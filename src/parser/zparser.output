Terminals which are not used

   TYPE_NAME
   REGISTER
   ELLIPSIS
   GOTO


State 287 conflicts: 1 shift/reduce


Grammar

    0 $accept: translation_unit $end

    1 primary_expression: IDENTIFIER
    2                   | HEX_CONSTANT
    3                   | OCT_CONSTANT
    4                   | DEC_CONSTANT
    5                   | FLT_CONSTANT
    6                   | STRING_LITERAL
    7                   | '(' expression ')'

    8 postfix_expression: primary_expression
    9                   | postfix_expression '[' expression ']'
   10                   | postfix_expression '(' ')'
   11                   | postfix_expression '(' argument_expression_list ')'
   12                   | postfix_expression '.' IDENTIFIER
   13                   | postfix_expression PTR_OP IDENTIFIER
   14                   | postfix_expression INC_OP
   15                   | postfix_expression DEC_OP

   16 argument_expression_list: assignment_expression
   17                         | argument_expression_list ',' assignment_expression

   18 unary_expression: postfix_expression
   19                 | INC_OP unary_expression
   20                 | DEC_OP unary_expression
   21                 | '-' cast_expression
   22                 | '&' cast_expression
   23                 | '*' cast_expression
   24                 | '~' cast_expression
   25                 | '!' cast_expression
   26                 | SIZEOF unary_expression
   27                 | SIZEOF '(' CHAR ')'
   28                 | SIZEOF '(' SHORT ')'
   29                 | SIZEOF '(' INT ')'
   30                 | SIZEOF '(' LONG ')'
   31                 | SIZEOF '(' FLOAT ')'

   32 cast_expression: unary_expression

   33 multiplicative_expression: cast_expression
   34                          | multiplicative_expression '*' cast_expression
   35                          | multiplicative_expression '/' cast_expression
   36                          | multiplicative_expression '%' cast_expression

   37 additive_expression: multiplicative_expression
   38                    | additive_expression '+' multiplicative_expression
   39                    | additive_expression '-' multiplicative_expression

   40 shift_expression: additive_expression
   41                 | shift_expression LEFT_OP additive_expression
   42                 | shift_expression RIGHT_OP additive_expression

   43 relational_expression: shift_expression
   44                      | relational_expression '<' shift_expression
   45                      | relational_expression '>' shift_expression
   46                      | relational_expression LE_OP shift_expression
   47                      | relational_expression GE_OP shift_expression

   48 equality_expression: relational_expression
   49                    | equality_expression EQ_OP relational_expression
   50                    | equality_expression NE_OP relational_expression

   51 and_expression: equality_expression
   52               | and_expression '&' equality_expression

   53 exclusive_or_expression: and_expression
   54                        | exclusive_or_expression '^' and_expression

   55 inclusive_or_expression: exclusive_or_expression
   56                        | inclusive_or_expression '|' exclusive_or_expression

   57 logical_and_expression: inclusive_or_expression
   58                       | logical_and_expression AND_OP inclusive_or_expression

   59 logical_or_expression: logical_and_expression
   60                      | logical_or_expression OR_OP logical_and_expression

   61 conditional_expression: logical_or_expression

   62 assignment_expression: conditional_expression
   63                      | unary_expression assignment_operator assignment_expression

   64 assignment_operator: ASSIGN_OP
   65                    | MUL_ASSIGN
   66                    | DIV_ASSIGN
   67                    | MOD_ASSIGN
   68                    | ADD_ASSIGN
   69                    | SUB_ASSIGN
   70                    | LEFT_ASSIGN
   71                    | RIGHT_ASSIGN
   72                    | AND_ASSIGN
   73                    | XOR_ASSIGN
   74                    | OR_ASSIGN

   75 expression: assignment_expression
   76           | expression ',' assignment_expression

   77 constant_expression: conditional_expression

   78 declaration: declaration_specifiers init_declarator_list ';'

   79 declaration_specifiers: storage_class_specifier
   80                       | storage_class_specifier declaration_specifiers
   81                       | type_specifier
   82                       | type_specifier declaration_specifiers
   83                       | type_qualifier
   84                       | type_qualifier declaration_specifiers

   85 init_declarator_list: init_declarator
   86                     | init_declarator_list ',' init_declarator

   87 init_declarator: declarator
   88                | declarator ASSIGN_OP initializer

   89 storage_class_specifier: TYPEDEF
   90                        | EXTERN
   91                        | STATIC
   92                        | AUTO

   93 type_specifier: VOID
   94               | CHAR
   95               | SHORT
   96               | INT
   97               | LONG
   98               | FLOAT
   99               | DOUBLE
  100               | SIGNED
  101               | UNSIGNED
  102               | struct_or_union_specifier
  103               | enum_specifier

  104 struct_or_union_specifier: struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  105                          | struct_or_union IDENTIFIER

  106 struct_or_union: STRUCT
  107                | UNION

  108 struct_declaration_list: struct_declaration
  109                        | struct_declaration_list struct_declaration

  110 struct_declaration: specifier_qualifier_list struct_declarator_list ';'

  111 specifier_qualifier_list: type_specifier specifier_qualifier_list
  112                         | type_specifier
  113                         | type_qualifier specifier_qualifier_list
  114                         | type_qualifier

  115 struct_declarator_list: struct_declarator

  116 struct_declarator: declarator

  117 enum_specifier: ENUM '{' enumerator_list '}'
  118               | ENUM IDENTIFIER '{' enumerator_list '}'
  119               | ENUM IDENTIFIER

  120 enumerator_list: enumerator
  121                | enumerator_list ',' enumerator

  122 enumerator: IDENTIFIER
  123           | IDENTIFIER ASSIGN_OP constant_expression

  124 type_qualifier: CONST
  125               | VOLATILE

  126 declarator: pointer direct_declarator
  127           | direct_declarator

  128 direct_declarator: IDENTIFIER
  129                  | direct_declarator '[' constant_expression ']'
  130                  | direct_declarator '[' ']'
  131                  | direct_declarator '(' parameter_type_list ')'
  132                  | direct_declarator '(' identifier_list ')'
  133                  | direct_declarator '(' ')'

  134 pointer: '*'
  135        | '*' type_qualifier
  136        | '*' pointer

  137 parameter_type_list: parameter_list

  138 parameter_list: parameter_declaration
  139               | parameter_list ',' parameter_declaration

  140 parameter_declaration: declaration_specifiers declarator
  141                      | declaration_specifiers abstract_declarator
  142                      | declaration_specifiers

  143 identifier_list: IDENTIFIER
  144                | identifier_list ',' IDENTIFIER

  145 abstract_declarator: pointer

  146 initializer: assignment_expression
  147            | '{' initializer_list '}'
  148            | '{' initializer_list ',' '}'

  149 initializer_list: initializer
  150                 | initializer_list ',' initializer

  151 statement: labeled_statement
  152          | compound_statement
  153          | expression_statement
  154          | selection_statement
  155          | iteration_statement
  156          | jump_statement

  157 labeled_statement: CASE constant_expression ':' statement
  158                  | DEFAULT ':' statement

  159 compound_statement: '{' '}'
  160                   | '{' statement_list '}'
  161                   | '{' declaration_list statement_list '}'

  162 declaration_list: declaration
  163                 | declaration_list declaration

  164 statement_list: statement
  165               | statement_list statement

  166 expression_statement: ';'
  167                     | expression ';'

  168 selection_statement: IF '(' expression ')' statement
  169                    | IF '(' expression ')' statement ELSE statement
  170                    | SWITCH '(' expression ')' statement

  171 iteration_statement: WHILE '(' expression ')' statement
  172                    | DO statement WHILE '(' expression ')' ';'
  173                    | FOR '(' expression_statement expression_statement expression ')' statement

  174 jump_statement: CONTINUE ';'
  175               | BREAK ';'
  176               | RETURN ';'
  177               | RETURN expression ';'

  178 translation_unit: external_declaration
  179                 | translation_unit external_declaration

  180 external_declaration: function_definition
  181                     | declaration

  182 function_definition: declaration_specifiers declarator compound_statement
  183                    | declarator compound_statement


Terminals, with rules where they appear

$end (0) 0
'!' (33) 25
'%' (37) 36
'&' (38) 22 52
'(' (40) 7 10 11 27 28 29 30 31 131 132 133 168 169 170 171 172 173
')' (41) 7 10 11 27 28 29 30 31 131 132 133 168 169 170 171 172 173
'*' (42) 23 34 134 135 136
'+' (43) 38
',' (44) 17 76 86 121 139 144 148 150
'-' (45) 21 39
'.' (46) 12
'/' (47) 35
':' (58) 157 158
';' (59) 78 110 166 167 172 174 175 176 177
'<' (60) 44
'>' (62) 45
'[' (91) 9 129 130
']' (93) 9 129 130
'^' (94) 54
'{' (123) 104 117 118 147 148 159 160 161
'|' (124) 56
'}' (125) 104 117 118 147 148 159 160 161
'~' (126) 24
error (256)
IDENTIFIER (258) 1 12 13 104 105 118 119 122 123 128 143 144
HEX_CONSTANT (259) 2
OCT_CONSTANT (260) 3
DEC_CONSTANT (261) 4
FLT_CONSTANT (262) 5
STRING_LITERAL (263) 6
PTR_OP (264) 13
INC_OP (265) 14 19
DEC_OP (266) 15 20
LEFT_OP (267) 41
RIGHT_OP (268) 42
LE_OP (269) 46
GE_OP (270) 47
EQ_OP (271) 49
NE_OP (272) 50
ASSIGN_OP (273) 64 88 123
AND_OP (274) 58
OR_OP (275) 60
MUL_ASSIGN (276) 65
DIV_ASSIGN (277) 66
MOD_ASSIGN (278) 67
ADD_ASSIGN (279) 68
SUB_ASSIGN (280) 69
LEFT_ASSIGN (281) 70
RIGHT_ASSIGN (282) 71
AND_ASSIGN (283) 72
XOR_ASSIGN (284) 73
OR_ASSIGN (285) 74
TYPE_NAME (286)
SIZEOF (287) 26 27 28 29 30 31
TYPEDEF (288) 89
EXTERN (289) 90
STATIC (290) 91
AUTO (291) 92
REGISTER (292)
CHAR (293) 27 94
SHORT (294) 28 95
INT (295) 29 96
LONG (296) 30 97
SIGNED (297) 100
UNSIGNED (298) 101
FLOAT (299) 31 98
DOUBLE (300) 99
CONST (301) 124
VOLATILE (302) 125
VOID (303) 93
STRUCT (304) 106
UNION (305) 107
ENUM (306) 117 118 119
ELLIPSIS (307)
CASE (308) 157
DEFAULT (309) 158
IF (310) 168 169
ELSE (311) 169
SWITCH (312) 170
WHILE (313) 171 172
DO (314) 172
FOR (315) 173
GOTO (316)
CONTINUE (317) 174
BREAK (318) 175
RETURN (319) 176 177


Nonterminals, with rules where they appear

$accept (87)
    on left: 0
primary_expression (88)
    on left: 1 2 3 4 5 6 7, on right: 8
postfix_expression (89)
    on left: 8 9 10 11 12 13 14 15, on right: 9 10 11 12 13 14 15 18
argument_expression_list (90)
    on left: 16 17, on right: 11 17
unary_expression (91)
    on left: 18 19 20 21 22 23 24 25 26 27 28 29 30 31,
    on right: 19 20 26 32 63
cast_expression (92)
    on left: 32, on right: 21 22 23 24 25 33 34 35 36
multiplicative_expression (93)
    on left: 33 34 35 36, on right: 34 35 36 37 38 39
additive_expression (94)
    on left: 37 38 39, on right: 38 39 40 41 42
shift_expression (95)
    on left: 40 41 42, on right: 41 42 43 44 45 46 47
relational_expression (96)
    on left: 43 44 45 46 47, on right: 44 45 46 47 48 49 50
equality_expression (97)
    on left: 48 49 50, on right: 49 50 51 52
and_expression (98)
    on left: 51 52, on right: 52 53 54
exclusive_or_expression (99)
    on left: 53 54, on right: 54 55 56
inclusive_or_expression (100)
    on left: 55 56, on right: 56 57 58
logical_and_expression (101)
    on left: 57 58, on right: 58 59 60
logical_or_expression (102)
    on left: 59 60, on right: 60 61
conditional_expression (103)
    on left: 61, on right: 62 77
assignment_expression (104)
    on left: 62 63, on right: 16 17 63 75 76 146
assignment_operator (105)
    on left: 64 65 66 67 68 69 70 71 72 73 74, on right: 63
expression (106)
    on left: 75 76, on right: 7 9 76 167 168 169 170 171 172 173 177
constant_expression (107)
    on left: 77, on right: 123 129 157
declaration (108)
    on left: 78, on right: 162 163 181
declaration_specifiers (109)
    on left: 79 80 81 82 83 84, on right: 78 80 82 84 140 141 142 182
init_declarator_list (110)
    on left: 85 86, on right: 78 86
init_declarator (111)
    on left: 87 88, on right: 85 86
storage_class_specifier (112)
    on left: 89 90 91 92, on right: 79 80
type_specifier (113)
    on left: 93 94 95 96 97 98 99 100 101 102 103, on right: 81 82
    111 112
struct_or_union_specifier (114)
    on left: 104 105, on right: 102
struct_or_union (115)
    on left: 106 107, on right: 104 105
struct_declaration_list (116)
    on left: 108 109, on right: 104 109
struct_declaration (117)
    on left: 110, on right: 108 109
specifier_qualifier_list (118)
    on left: 111 112 113 114, on right: 110 111 113
struct_declarator_list (119)
    on left: 115, on right: 110
struct_declarator (120)
    on left: 116, on right: 115
enum_specifier (121)
    on left: 117 118 119, on right: 103
enumerator_list (122)
    on left: 120 121, on right: 117 118 121
enumerator (123)
    on left: 122 123, on right: 120 121
type_qualifier (124)
    on left: 124 125, on right: 83 84 113 114 135
declarator (125)
    on left: 126 127, on right: 87 88 116 140 182 183
direct_declarator (126)
    on left: 128 129 130 131 132 133, on right: 126 127 129 130 131
    132 133
pointer (127)
    on left: 134 135 136, on right: 126 136 145
parameter_type_list (128)
    on left: 137, on right: 131
parameter_list (129)
    on left: 138 139, on right: 137 139
parameter_declaration (130)
    on left: 140 141 142, on right: 138 139
identifier_list (131)
    on left: 143 144, on right: 132 144
abstract_declarator (132)
    on left: 145, on right: 141
initializer (133)
    on left: 146 147 148, on right: 88 149 150
initializer_list (134)
    on left: 149 150, on right: 147 148 150
statement (135)
    on left: 151 152 153 154 155 156, on right: 157 158 164 165 168
    169 170 171 172 173
labeled_statement (136)
    on left: 157 158, on right: 151
compound_statement (137)
    on left: 159 160 161, on right: 152 182 183
declaration_list (138)
    on left: 162 163, on right: 161 163
statement_list (139)
    on left: 164 165, on right: 160 161 165
expression_statement (140)
    on left: 166 167, on right: 153 173
selection_statement (141)
    on left: 168 169 170, on right: 154
iteration_statement (142)
    on left: 171 172 173, on right: 155
jump_statement (143)
    on left: 174 175 176 177, on right: 156
translation_unit (144)
    on left: 178 179, on right: 0 179
external_declaration (145)
    on left: 180 181, on right: 178 179
function_definition (146)
    on left: 182 183, on right: 180


state 0

    0 $accept: . translation_unit $end
   78 declaration: . declaration_specifiers init_declarator_list ';'
   79 declaration_specifiers: . storage_class_specifier
   80                       | . storage_class_specifier declaration_specifiers
   81                       | . type_specifier
   82                       | . type_specifier declaration_specifiers
   83                       | . type_qualifier
   84                       | . type_qualifier declaration_specifiers
   89 storage_class_specifier: . TYPEDEF
   90                        | . EXTERN
   91                        | . STATIC
   92                        | . AUTO
   93 type_specifier: . VOID
   94               | . CHAR
   95               | . SHORT
   96               | . INT
   97               | . LONG
   98               | . FLOAT
   99               | . DOUBLE
  100               | . SIGNED
  101               | . UNSIGNED
  102               | . struct_or_union_specifier
  103               | . enum_specifier
  104 struct_or_union_specifier: . struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  105                          | . struct_or_union IDENTIFIER
  106 struct_or_union: . STRUCT
  107                | . UNION
  117 enum_specifier: . ENUM '{' enumerator_list '}'
  118               | . ENUM IDENTIFIER '{' enumerator_list '}'
  119               | . ENUM IDENTIFIER
  124 type_qualifier: . CONST
  125               | . VOLATILE
  126 declarator: . pointer direct_declarator
  127           | . direct_declarator
  128 direct_declarator: . IDENTIFIER
  129                  | . direct_declarator '[' constant_expression ']'
  130                  | . direct_declarator '[' ']'
  131                  | . direct_declarator '(' parameter_type_list ')'
  132                  | . direct_declarator '(' identifier_list ')'
  133                  | . direct_declarator '(' ')'
  134 pointer: . '*'
  135        | . '*' type_qualifier
  136        | . '*' pointer
  178 translation_unit: . external_declaration
  179                 | . translation_unit external_declaration
  180 external_declaration: . function_definition
  181                     | . declaration
  182 function_definition: . declaration_specifiers declarator compound_statement
  183                    | . declarator compound_statement

    IDENTIFIER  shift, and go to state 1
    TYPEDEF     shift, and go to state 2
    EXTERN      shift, and go to state 3
    STATIC      shift, and go to state 4
    AUTO        shift, and go to state 5
    CHAR        shift, and go to state 6
    SHORT       shift, and go to state 7
    INT         shift, and go to state 8
    LONG        shift, and go to state 9
    SIGNED      shift, and go to state 10
    UNSIGNED    shift, and go to state 11
    FLOAT       shift, and go to state 12
    DOUBLE      shift, and go to state 13
    CONST       shift, and go to state 14
    VOLATILE    shift, and go to state 15
    VOID        shift, and go to state 16
    STRUCT      shift, and go to state 17
    UNION       shift, and go to state 18
    ENUM        shift, and go to state 19
    '*'         shift, and go to state 20

    declaration                go to state 21
    declaration_specifiers     go to state 22
    storage_class_specifier    go to state 23
    type_specifier             go to state 24
    struct_or_union_specifier  go to state 25
    struct_or_union            go to state 26
    enum_specifier             go to state 27
    type_qualifier             go to state 28
    declarator                 go to state 29
    direct_declarator          go to state 30
    pointer                    go to state 31
    translation_unit           go to state 32
    external_declaration       go to state 33
    function_definition        go to state 34


state 1

  128 direct_declarator: IDENTIFIER .

    $default  reduce using rule 128 (direct_declarator)


state 2

   89 storage_class_specifier: TYPEDEF .

    $default  reduce using rule 89 (storage_class_specifier)


state 3

   90 storage_class_specifier: EXTERN .

    $default  reduce using rule 90 (storage_class_specifier)


state 4

   91 storage_class_specifier: STATIC .

    $default  reduce using rule 91 (storage_class_specifier)


state 5

   92 storage_class_specifier: AUTO .

    $default  reduce using rule 92 (storage_class_specifier)


state 6

   94 type_specifier: CHAR .

    $default  reduce using rule 94 (type_specifier)


state 7

   95 type_specifier: SHORT .

    $default  reduce using rule 95 (type_specifier)


state 8

   96 type_specifier: INT .

    $default  reduce using rule 96 (type_specifier)


state 9

   97 type_specifier: LONG .

    $default  reduce using rule 97 (type_specifier)


state 10

  100 type_specifier: SIGNED .

    $default  reduce using rule 100 (type_specifier)


state 11

  101 type_specifier: UNSIGNED .

    $default  reduce using rule 101 (type_specifier)


state 12

   98 type_specifier: FLOAT .

    $default  reduce using rule 98 (type_specifier)


state 13

   99 type_specifier: DOUBLE .

    $default  reduce using rule 99 (type_specifier)


state 14

  124 type_qualifier: CONST .

    $default  reduce using rule 124 (type_qualifier)


state 15

  125 type_qualifier: VOLATILE .

    $default  reduce using rule 125 (type_qualifier)


state 16

   93 type_specifier: VOID .

    $default  reduce using rule 93 (type_specifier)


state 17

  106 struct_or_union: STRUCT .

    $default  reduce using rule 106 (struct_or_union)


state 18

  107 struct_or_union: UNION .

    $default  reduce using rule 107 (struct_or_union)


state 19

  117 enum_specifier: ENUM . '{' enumerator_list '}'
  118               | ENUM . IDENTIFIER '{' enumerator_list '}'
  119               | ENUM . IDENTIFIER

    IDENTIFIER  shift, and go to state 35
    '{'         shift, and go to state 36


state 20

  124 type_qualifier: . CONST
  125               | . VOLATILE
  134 pointer: . '*'  [IDENTIFIER, ')', ',']
  134        | '*' .  [IDENTIFIER, ')', ',']
  135        | . '*' type_qualifier
  135        | '*' . type_qualifier
  136        | . '*' pointer
  136        | '*' . pointer

    CONST     shift, and go to state 14
    VOLATILE  shift, and go to state 15
    '*'       shift, and go to state 20

    $default  reduce using rule 134 (pointer)

    type_qualifier  go to state 37
    pointer         go to state 38


state 21

  181 external_declaration: declaration .

    $default  reduce using rule 181 (external_declaration)


state 22

   78 declaration: declaration_specifiers . init_declarator_list ';'
   85 init_declarator_list: . init_declarator
   86                     | . init_declarator_list ',' init_declarator
   87 init_declarator: . declarator
   88                | . declarator ASSIGN_OP initializer
  126 declarator: . pointer direct_declarator
  127           | . direct_declarator
  128 direct_declarator: . IDENTIFIER
  129                  | . direct_declarator '[' constant_expression ']'
  130                  | . direct_declarator '[' ']'
  131                  | . direct_declarator '(' parameter_type_list ')'
  132                  | . direct_declarator '(' identifier_list ')'
  133                  | . direct_declarator '(' ')'
  134 pointer: . '*'
  135        | . '*' type_qualifier
  136        | . '*' pointer
  182 function_definition: declaration_specifiers . declarator compound_statement

    IDENTIFIER  shift, and go to state 1
    '*'         shift, and go to state 20

    init_declarator_list  go to state 39
    init_declarator       go to state 40
    declarator            go to state 41
    direct_declarator     go to state 30
    pointer               go to state 31


state 23

   79 declaration_specifiers: . storage_class_specifier  [IDENTIFIER, ')', ',', '*']
   79                       | storage_class_specifier .  [IDENTIFIER, ')', ',', '*']
   80                       | . storage_class_specifier declaration_specifiers
   80                       | storage_class_specifier . declaration_specifiers
   81                       | . type_specifier
   82                       | . type_specifier declaration_specifiers
   83                       | . type_qualifier
   84                       | . type_qualifier declaration_specifiers
   89 storage_class_specifier: . TYPEDEF
   90                        | . EXTERN
   91                        | . STATIC
   92                        | . AUTO
   93 type_specifier: . VOID
   94               | . CHAR
   95               | . SHORT
   96               | . INT
   97               | . LONG
   98               | . FLOAT
   99               | . DOUBLE
  100               | . SIGNED
  101               | . UNSIGNED
  102               | . struct_or_union_specifier
  103               | . enum_specifier
  104 struct_or_union_specifier: . struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  105                          | . struct_or_union IDENTIFIER
  106 struct_or_union: . STRUCT
  107                | . UNION
  117 enum_specifier: . ENUM '{' enumerator_list '}'
  118               | . ENUM IDENTIFIER '{' enumerator_list '}'
  119               | . ENUM IDENTIFIER
  124 type_qualifier: . CONST
  125               | . VOLATILE

    TYPEDEF   shift, and go to state 2
    EXTERN    shift, and go to state 3
    STATIC    shift, and go to state 4
    AUTO      shift, and go to state 5
    CHAR      shift, and go to state 6
    SHORT     shift, and go to state 7
    INT       shift, and go to state 8
    LONG      shift, and go to state 9
    SIGNED    shift, and go to state 10
    UNSIGNED  shift, and go to state 11
    FLOAT     shift, and go to state 12
    DOUBLE    shift, and go to state 13
    CONST     shift, and go to state 14
    VOLATILE  shift, and go to state 15
    VOID      shift, and go to state 16
    STRUCT    shift, and go to state 17
    UNION     shift, and go to state 18
    ENUM      shift, and go to state 19

    $default  reduce using rule 79 (declaration_specifiers)

    declaration_specifiers     go to state 42
    storage_class_specifier    go to state 23
    type_specifier             go to state 24
    struct_or_union_specifier  go to state 25
    struct_or_union            go to state 26
    enum_specifier             go to state 27
    type_qualifier             go to state 28


state 24

   79 declaration_specifiers: . storage_class_specifier
   80                       | . storage_class_specifier declaration_specifiers
   81                       | . type_specifier  [IDENTIFIER, ')', ',', '*']
   81                       | type_specifier .  [IDENTIFIER, ')', ',', '*']
   82                       | . type_specifier declaration_specifiers
   82                       | type_specifier . declaration_specifiers
   83                       | . type_qualifier
   84                       | . type_qualifier declaration_specifiers
   89 storage_class_specifier: . TYPEDEF
   90                        | . EXTERN
   91                        | . STATIC
   92                        | . AUTO
   93 type_specifier: . VOID
   94               | . CHAR
   95               | . SHORT
   96               | . INT
   97               | . LONG
   98               | . FLOAT
   99               | . DOUBLE
  100               | . SIGNED
  101               | . UNSIGNED
  102               | . struct_or_union_specifier
  103               | . enum_specifier
  104 struct_or_union_specifier: . struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  105                          | . struct_or_union IDENTIFIER
  106 struct_or_union: . STRUCT
  107                | . UNION
  117 enum_specifier: . ENUM '{' enumerator_list '}'
  118               | . ENUM IDENTIFIER '{' enumerator_list '}'
  119               | . ENUM IDENTIFIER
  124 type_qualifier: . CONST
  125               | . VOLATILE

    TYPEDEF   shift, and go to state 2
    EXTERN    shift, and go to state 3
    STATIC    shift, and go to state 4
    AUTO      shift, and go to state 5
    CHAR      shift, and go to state 6
    SHORT     shift, and go to state 7
    INT       shift, and go to state 8
    LONG      shift, and go to state 9
    SIGNED    shift, and go to state 10
    UNSIGNED  shift, and go to state 11
    FLOAT     shift, and go to state 12
    DOUBLE    shift, and go to state 13
    CONST     shift, and go to state 14
    VOLATILE  shift, and go to state 15
    VOID      shift, and go to state 16
    STRUCT    shift, and go to state 17
    UNION     shift, and go to state 18
    ENUM      shift, and go to state 19

    $default  reduce using rule 81 (declaration_specifiers)

    declaration_specifiers     go to state 43
    storage_class_specifier    go to state 23
    type_specifier             go to state 24
    struct_or_union_specifier  go to state 25
    struct_or_union            go to state 26
    enum_specifier             go to state 27
    type_qualifier             go to state 28


state 25

  102 type_specifier: struct_or_union_specifier .

    $default  reduce using rule 102 (type_specifier)


state 26

  104 struct_or_union_specifier: struct_or_union . IDENTIFIER '{' struct_declaration_list '}'
  105                          | struct_or_union . IDENTIFIER

    IDENTIFIER  shift, and go to state 44


state 27

  103 type_specifier: enum_specifier .

    $default  reduce using rule 103 (type_specifier)


state 28

   79 declaration_specifiers: . storage_class_specifier
   80                       | . storage_class_specifier declaration_specifiers
   81                       | . type_specifier
   82                       | . type_specifier declaration_specifiers
   83                       | . type_qualifier  [IDENTIFIER, ')', ',', '*']
   83                       | type_qualifier .  [IDENTIFIER, ')', ',', '*']
   84                       | . type_qualifier declaration_specifiers
   84                       | type_qualifier . declaration_specifiers
   89 storage_class_specifier: . TYPEDEF
   90                        | . EXTERN
   91                        | . STATIC
   92                        | . AUTO
   93 type_specifier: . VOID
   94               | . CHAR
   95               | . SHORT
   96               | . INT
   97               | . LONG
   98               | . FLOAT
   99               | . DOUBLE
  100               | . SIGNED
  101               | . UNSIGNED
  102               | . struct_or_union_specifier
  103               | . enum_specifier
  104 struct_or_union_specifier: . struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  105                          | . struct_or_union IDENTIFIER
  106 struct_or_union: . STRUCT
  107                | . UNION
  117 enum_specifier: . ENUM '{' enumerator_list '}'
  118               | . ENUM IDENTIFIER '{' enumerator_list '}'
  119               | . ENUM IDENTIFIER
  124 type_qualifier: . CONST
  125               | . VOLATILE

    TYPEDEF   shift, and go to state 2
    EXTERN    shift, and go to state 3
    STATIC    shift, and go to state 4
    AUTO      shift, and go to state 5
    CHAR      shift, and go to state 6
    SHORT     shift, and go to state 7
    INT       shift, and go to state 8
    LONG      shift, and go to state 9
    SIGNED    shift, and go to state 10
    UNSIGNED  shift, and go to state 11
    FLOAT     shift, and go to state 12
    DOUBLE    shift, and go to state 13
    CONST     shift, and go to state 14
    VOLATILE  shift, and go to state 15
    VOID      shift, and go to state 16
    STRUCT    shift, and go to state 17
    UNION     shift, and go to state 18
    ENUM      shift, and go to state 19

    $default  reduce using rule 83 (declaration_specifiers)

    declaration_specifiers     go to state 45
    storage_class_specifier    go to state 23
    type_specifier             go to state 24
    struct_or_union_specifier  go to state 25
    struct_or_union            go to state 26
    enum_specifier             go to state 27
    type_qualifier             go to state 28


state 29

  159 compound_statement: . '{' '}'
  160                   | . '{' statement_list '}'
  161                   | . '{' declaration_list statement_list '}'
  183 function_definition: declarator . compound_statement

    '{'  shift, and go to state 46

    compound_statement  go to state 47


state 30

  127 declarator: direct_declarator .  [ASSIGN_OP, ')', ',', ';', '{']
  129 direct_declarator: direct_declarator . '[' constant_expression ']'
  130                  | direct_declarator . '[' ']'
  131                  | direct_declarator . '(' parameter_type_list ')'
  132                  | direct_declarator . '(' identifier_list ')'
  133                  | direct_declarator . '(' ')'

    '('  shift, and go to state 48
    '['  shift, and go to state 49

    $default  reduce using rule 127 (declarator)


state 31

  126 declarator: pointer . direct_declarator
  128 direct_declarator: . IDENTIFIER
  129                  | . direct_declarator '[' constant_expression ']'
  130                  | . direct_declarator '[' ']'
  131                  | . direct_declarator '(' parameter_type_list ')'
  132                  | . direct_declarator '(' identifier_list ')'
  133                  | . direct_declarator '(' ')'

    IDENTIFIER  shift, and go to state 1

    direct_declarator  go to state 50


state 32

    0 $accept: translation_unit . $end
   78 declaration: . declaration_specifiers init_declarator_list ';'
   79 declaration_specifiers: . storage_class_specifier
   80                       | . storage_class_specifier declaration_specifiers
   81                       | . type_specifier
   82                       | . type_specifier declaration_specifiers
   83                       | . type_qualifier
   84                       | . type_qualifier declaration_specifiers
   89 storage_class_specifier: . TYPEDEF
   90                        | . EXTERN
   91                        | . STATIC
   92                        | . AUTO
   93 type_specifier: . VOID
   94               | . CHAR
   95               | . SHORT
   96               | . INT
   97               | . LONG
   98               | . FLOAT
   99               | . DOUBLE
  100               | . SIGNED
  101               | . UNSIGNED
  102               | . struct_or_union_specifier
  103               | . enum_specifier
  104 struct_or_union_specifier: . struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  105                          | . struct_or_union IDENTIFIER
  106 struct_or_union: . STRUCT
  107                | . UNION
  117 enum_specifier: . ENUM '{' enumerator_list '}'
  118               | . ENUM IDENTIFIER '{' enumerator_list '}'
  119               | . ENUM IDENTIFIER
  124 type_qualifier: . CONST
  125               | . VOLATILE
  126 declarator: . pointer direct_declarator
  127           | . direct_declarator
  128 direct_declarator: . IDENTIFIER
  129                  | . direct_declarator '[' constant_expression ']'
  130                  | . direct_declarator '[' ']'
  131                  | . direct_declarator '(' parameter_type_list ')'
  132                  | . direct_declarator '(' identifier_list ')'
  133                  | . direct_declarator '(' ')'
  134 pointer: . '*'
  135        | . '*' type_qualifier
  136        | . '*' pointer
  179 translation_unit: translation_unit . external_declaration
  180 external_declaration: . function_definition
  181                     | . declaration
  182 function_definition: . declaration_specifiers declarator compound_statement
  183                    | . declarator compound_statement

    $end        shift, and go to state 51
    IDENTIFIER  shift, and go to state 1
    TYPEDEF     shift, and go to state 2
    EXTERN      shift, and go to state 3
    STATIC      shift, and go to state 4
    AUTO        shift, and go to state 5
    CHAR        shift, and go to state 6
    SHORT       shift, and go to state 7
    INT         shift, and go to state 8
    LONG        shift, and go to state 9
    SIGNED      shift, and go to state 10
    UNSIGNED    shift, and go to state 11
    FLOAT       shift, and go to state 12
    DOUBLE      shift, and go to state 13
    CONST       shift, and go to state 14
    VOLATILE    shift, and go to state 15
    VOID        shift, and go to state 16
    STRUCT      shift, and go to state 17
    UNION       shift, and go to state 18
    ENUM        shift, and go to state 19
    '*'         shift, and go to state 20

    declaration                go to state 21
    declaration_specifiers     go to state 22
    storage_class_specifier    go to state 23
    type_specifier             go to state 24
    struct_or_union_specifier  go to state 25
    struct_or_union            go to state 26
    enum_specifier             go to state 27
    type_qualifier             go to state 28
    declarator                 go to state 29
    direct_declarator          go to state 30
    pointer                    go to state 31
    external_declaration       go to state 52
    function_definition        go to state 34


state 33

  178 translation_unit: external_declaration .

    $default  reduce using rule 178 (translation_unit)


state 34

  180 external_declaration: function_definition .

    $default  reduce using rule 180 (external_declaration)


state 35

  118 enum_specifier: ENUM IDENTIFIER . '{' enumerator_list '}'
  119               | ENUM IDENTIFIER .  [IDENTIFIER, TYPEDEF, EXTERN, STATIC, AUTO, CHAR, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, CONST, VOLATILE, VOID, STRUCT, UNION, ENUM, ')', ',', '*']

    '{'  shift, and go to state 53

    $default  reduce using rule 119 (enum_specifier)


state 36

  117 enum_specifier: ENUM '{' . enumerator_list '}'
  120 enumerator_list: . enumerator
  121                | . enumerator_list ',' enumerator
  122 enumerator: . IDENTIFIER
  123           | . IDENTIFIER ASSIGN_OP constant_expression

    IDENTIFIER  shift, and go to state 54

    enumerator_list  go to state 55
    enumerator       go to state 56


state 37

  135 pointer: '*' type_qualifier .

    $default  reduce using rule 135 (pointer)


state 38

  136 pointer: '*' pointer .

    $default  reduce using rule 136 (pointer)


state 39

   78 declaration: declaration_specifiers init_declarator_list . ';'
   86 init_declarator_list: init_declarator_list . ',' init_declarator

    ','  shift, and go to state 57
    ';'  shift, and go to state 58


state 40

   85 init_declarator_list: init_declarator .

    $default  reduce using rule 85 (init_declarator_list)


state 41

   87 init_declarator: declarator .  [',', ';']
   88                | declarator . ASSIGN_OP initializer
  159 compound_statement: . '{' '}'
  160                   | . '{' statement_list '}'
  161                   | . '{' declaration_list statement_list '}'
  182 function_definition: declaration_specifiers declarator . compound_statement

    ASSIGN_OP  shift, and go to state 59
    '{'        shift, and go to state 46

    $default  reduce using rule 87 (init_declarator)

    compound_statement  go to state 60


state 42

   80 declaration_specifiers: storage_class_specifier declaration_specifiers .

    $default  reduce using rule 80 (declaration_specifiers)


state 43

   82 declaration_specifiers: type_specifier declaration_specifiers .

    $default  reduce using rule 82 (declaration_specifiers)


state 44

  104 struct_or_union_specifier: struct_or_union IDENTIFIER . '{' struct_declaration_list '}'
  105                          | struct_or_union IDENTIFIER .  [IDENTIFIER, TYPEDEF, EXTERN, STATIC, AUTO, CHAR, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, CONST, VOLATILE, VOID, STRUCT, UNION, ENUM, ')', ',', '*']

    '{'  shift, and go to state 61

    $default  reduce using rule 105 (struct_or_union_specifier)


state 45

   84 declaration_specifiers: type_qualifier declaration_specifiers .

    $default  reduce using rule 84 (declaration_specifiers)


state 46

    1 primary_expression: . IDENTIFIER
    2                   | . HEX_CONSTANT
    3                   | . OCT_CONSTANT
    4                   | . DEC_CONSTANT
    5                   | . FLT_CONSTANT
    6                   | . STRING_LITERAL
    7                   | . '(' expression ')'
    8 postfix_expression: . primary_expression
    9                   | . postfix_expression '[' expression ']'
   10                   | . postfix_expression '(' ')'
   11                   | . postfix_expression '(' argument_expression_list ')'
   12                   | . postfix_expression '.' IDENTIFIER
   13                   | . postfix_expression PTR_OP IDENTIFIER
   14                   | . postfix_expression INC_OP
   15                   | . postfix_expression DEC_OP
   18 unary_expression: . postfix_expression
   19                 | . INC_OP unary_expression
   20                 | . DEC_OP unary_expression
   21                 | . '-' cast_expression
   22                 | . '&' cast_expression
   23                 | . '*' cast_expression
   24                 | . '~' cast_expression
   25                 | . '!' cast_expression
   26                 | . SIZEOF unary_expression
   27                 | . SIZEOF '(' CHAR ')'
   28                 | . SIZEOF '(' SHORT ')'
   29                 | . SIZEOF '(' INT ')'
   30                 | . SIZEOF '(' LONG ')'
   31                 | . SIZEOF '(' FLOAT ')'
   32 cast_expression: . unary_expression
   33 multiplicative_expression: . cast_expression
   34                          | . multiplicative_expression '*' cast_expression
   35                          | . multiplicative_expression '/' cast_expression
   36                          | . multiplicative_expression '%' cast_expression
   37 additive_expression: . multiplicative_expression
   38                    | . additive_expression '+' multiplicative_expression
   39                    | . additive_expression '-' multiplicative_expression
   40 shift_expression: . additive_expression
   41                 | . shift_expression LEFT_OP additive_expression
   42                 | . shift_expression RIGHT_OP additive_expression
   43 relational_expression: . shift_expression
   44                      | . relational_expression '<' shift_expression
   45                      | . relational_expression '>' shift_expression
   46                      | . relational_expression LE_OP shift_expression
   47                      | . relational_expression GE_OP shift_expression
   48 equality_expression: . relational_expression
   49                    | . equality_expression EQ_OP relational_expression
   50                    | . equality_expression NE_OP relational_expression
   51 and_expression: . equality_expression
   52               | . and_expression '&' equality_expression
   53 exclusive_or_expression: . and_expression
   54                        | . exclusive_or_expression '^' and_expression
   55 inclusive_or_expression: . exclusive_or_expression
   56                        | . inclusive_or_expression '|' exclusive_or_expression
   57 logical_and_expression: . inclusive_or_expression
   58                       | . logical_and_expression AND_OP inclusive_or_expression
   59 logical_or_expression: . logical_and_expression
   60                      | . logical_or_expression OR_OP logical_and_expression
   61 conditional_expression: . logical_or_expression
   62 assignment_expression: . conditional_expression
   63                      | . unary_expression assignment_operator assignment_expression
   75 expression: . assignment_expression
   76           | . expression ',' assignment_expression
   78 declaration: . declaration_specifiers init_declarator_list ';'
   79 declaration_specifiers: . storage_class_specifier
   80                       | . storage_class_specifier declaration_specifiers
   81                       | . type_specifier
   82                       | . type_specifier declaration_specifiers
   83                       | . type_qualifier
   84                       | . type_qualifier declaration_specifiers
   89 storage_class_specifier: . TYPEDEF
   90                        | . EXTERN
   91                        | . STATIC
   92                        | . AUTO
   93 type_specifier: . VOID
   94               | . CHAR
   95               | . SHORT
   96               | . INT
   97               | . LONG
   98               | . FLOAT
   99               | . DOUBLE
  100               | . SIGNED
  101               | . UNSIGNED
  102               | . struct_or_union_specifier
  103               | . enum_specifier
  104 struct_or_union_specifier: . struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  105                          | . struct_or_union IDENTIFIER
  106 struct_or_union: . STRUCT
  107                | . UNION
  117 enum_specifier: . ENUM '{' enumerator_list '}'
  118               | . ENUM IDENTIFIER '{' enumerator_list '}'
  119               | . ENUM IDENTIFIER
  124 type_qualifier: . CONST
  125               | . VOLATILE
  151 statement: . labeled_statement
  152          | . compound_statement
  153          | . expression_statement
  154          | . selection_statement
  155          | . iteration_statement
  156          | . jump_statement
  157 labeled_statement: . CASE constant_expression ':' statement
  158                  | . DEFAULT ':' statement
  159 compound_statement: . '{' '}'
  159                   | '{' . '}'
  160                   | . '{' statement_list '}'
  160                   | '{' . statement_list '}'
  161                   | . '{' declaration_list statement_list '}'
  161                   | '{' . declaration_list statement_list '}'
  162 declaration_list: . declaration
  163                 | . declaration_list declaration
  164 statement_list: . statement
  165               | . statement_list statement
  166 expression_statement: . ';'
  167                     | . expression ';'
  168 selection_statement: . IF '(' expression ')' statement
  169                    | . IF '(' expression ')' statement ELSE statement
  170                    | . SWITCH '(' expression ')' statement
  171 iteration_statement: . WHILE '(' expression ')' statement
  172                    | . DO statement WHILE '(' expression ')' ';'
  173                    | . FOR '(' expression_statement expression_statement expression ')' statement
  174 jump_statement: . CONTINUE ';'
  175               | . BREAK ';'
  176               | . RETURN ';'
  177               | . RETURN expression ';'

    IDENTIFIER      shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    OCT_CONSTANT    shift, and go to state 64
    DEC_CONSTANT    shift, and go to state 65
    FLT_CONSTANT    shift, and go to state 66
    STRING_LITERAL  shift, and go to state 67
    INC_OP          shift, and go to state 68
    DEC_OP          shift, and go to state 69
    SIZEOF          shift, and go to state 70
    TYPEDEF         shift, and go to state 2
    EXTERN          shift, and go to state 3
    STATIC          shift, and go to state 4
    AUTO            shift, and go to state 5
    CHAR            shift, and go to state 6
    SHORT           shift, and go to state 7
    INT             shift, and go to state 8
    LONG            shift, and go to state 9
    SIGNED          shift, and go to state 10
    UNSIGNED        shift, and go to state 11
    FLOAT           shift, and go to state 12
    DOUBLE          shift, and go to state 13
    CONST           shift, and go to state 14
    VOLATILE        shift, and go to state 15
    VOID            shift, and go to state 16
    STRUCT          shift, and go to state 17
    UNION           shift, and go to state 18
    ENUM            shift, and go to state 19
    CASE            shift, and go to state 71
    DEFAULT         shift, and go to state 72
    IF              shift, and go to state 73
    SWITCH          shift, and go to state 74
    WHILE           shift, and go to state 75
    DO              shift, and go to state 76
    FOR             shift, and go to state 77
    CONTINUE        shift, and go to state 78
    BREAK           shift, and go to state 79
    RETURN          shift, and go to state 80
    '('             shift, and go to state 81
    '-'             shift, and go to state 82
    '&'             shift, and go to state 83
    '*'             shift, and go to state 84
    '~'             shift, and go to state 85
    '!'             shift, and go to state 86
    ';'             shift, and go to state 87
    '{'             shift, and go to state 46
    '}'             shift, and go to state 88

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    cast_expression            go to state 92
    multiplicative_expression  go to state 93
    additive_expression        go to state 94
    shift_expression           go to state 95
    relational_expression      go to state 96
    equality_expression        go to state 97
    and_expression             go to state 98
    exclusive_or_expression    go to state 99
    inclusive_or_expression    go to state 100
    logical_and_expression     go to state 101
    logical_or_expression      go to state 102
    conditional_expression     go to state 103
    assignment_expression      go to state 104
    expression                 go to state 105
    declaration                go to state 106
    declaration_specifiers     go to state 107
    storage_class_specifier    go to state 23
    type_specifier             go to state 24
    struct_or_union_specifier  go to state 25
    struct_or_union            go to state 26
    enum_specifier             go to state 27
    type_qualifier             go to state 28
    statement                  go to state 108
    labeled_statement          go to state 109
    compound_statement         go to state 110
    declaration_list           go to state 111
    statement_list             go to state 112
    expression_statement       go to state 113
    selection_statement        go to state 114
    iteration_statement        go to state 115
    jump_statement             go to state 116


state 47

  183 function_definition: declarator compound_statement .

    $default  reduce using rule 183 (function_definition)


state 48

   79 declaration_specifiers: . storage_class_specifier
   80                       | . storage_class_specifier declaration_specifiers
   81                       | . type_specifier
   82                       | . type_specifier declaration_specifiers
   83                       | . type_qualifier
   84                       | . type_qualifier declaration_specifiers
   89 storage_class_specifier: . TYPEDEF
   90                        | . EXTERN
   91                        | . STATIC
   92                        | . AUTO
   93 type_specifier: . VOID
   94               | . CHAR
   95               | . SHORT
   96               | . INT
   97               | . LONG
   98               | . FLOAT
   99               | . DOUBLE
  100               | . SIGNED
  101               | . UNSIGNED
  102               | . struct_or_union_specifier
  103               | . enum_specifier
  104 struct_or_union_specifier: . struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  105                          | . struct_or_union IDENTIFIER
  106 struct_or_union: . STRUCT
  107                | . UNION
  117 enum_specifier: . ENUM '{' enumerator_list '}'
  118               | . ENUM IDENTIFIER '{' enumerator_list '}'
  119               | . ENUM IDENTIFIER
  124 type_qualifier: . CONST
  125               | . VOLATILE
  131 direct_declarator: direct_declarator '(' . parameter_type_list ')'
  132                  | direct_declarator '(' . identifier_list ')'
  133                  | direct_declarator '(' . ')'
  137 parameter_type_list: . parameter_list
  138 parameter_list: . parameter_declaration
  139               | . parameter_list ',' parameter_declaration
  140 parameter_declaration: . declaration_specifiers declarator
  141                      | . declaration_specifiers abstract_declarator
  142                      | . declaration_specifiers
  143 identifier_list: . IDENTIFIER
  144                | . identifier_list ',' IDENTIFIER

    IDENTIFIER  shift, and go to state 117
    TYPEDEF     shift, and go to state 2
    EXTERN      shift, and go to state 3
    STATIC      shift, and go to state 4
    AUTO        shift, and go to state 5
    CHAR        shift, and go to state 6
    SHORT       shift, and go to state 7
    INT         shift, and go to state 8
    LONG        shift, and go to state 9
    SIGNED      shift, and go to state 10
    UNSIGNED    shift, and go to state 11
    FLOAT       shift, and go to state 12
    DOUBLE      shift, and go to state 13
    CONST       shift, and go to state 14
    VOLATILE    shift, and go to state 15
    VOID        shift, and go to state 16
    STRUCT      shift, and go to state 17
    UNION       shift, and go to state 18
    ENUM        shift, and go to state 19
    ')'         shift, and go to state 118

    declaration_specifiers     go to state 119
    storage_class_specifier    go to state 23
    type_specifier             go to state 24
    struct_or_union_specifier  go to state 25
    struct_or_union            go to state 26
    enum_specifier             go to state 27
    type_qualifier             go to state 28
    parameter_type_list        go to state 120
    parameter_list             go to state 121
    parameter_declaration      go to state 122
    identifier_list            go to state 123


state 49

    1 primary_expression: . IDENTIFIER
    2                   | . HEX_CONSTANT
    3                   | . OCT_CONSTANT
    4                   | . DEC_CONSTANT
    5                   | . FLT_CONSTANT
    6                   | . STRING_LITERAL
    7                   | . '(' expression ')'
    8 postfix_expression: . primary_expression
    9                   | . postfix_expression '[' expression ']'
   10                   | . postfix_expression '(' ')'
   11                   | . postfix_expression '(' argument_expression_list ')'
   12                   | . postfix_expression '.' IDENTIFIER
   13                   | . postfix_expression PTR_OP IDENTIFIER
   14                   | . postfix_expression INC_OP
   15                   | . postfix_expression DEC_OP
   18 unary_expression: . postfix_expression
   19                 | . INC_OP unary_expression
   20                 | . DEC_OP unary_expression
   21                 | . '-' cast_expression
   22                 | . '&' cast_expression
   23                 | . '*' cast_expression
   24                 | . '~' cast_expression
   25                 | . '!' cast_expression
   26                 | . SIZEOF unary_expression
   27                 | . SIZEOF '(' CHAR ')'
   28                 | . SIZEOF '(' SHORT ')'
   29                 | . SIZEOF '(' INT ')'
   30                 | . SIZEOF '(' LONG ')'
   31                 | . SIZEOF '(' FLOAT ')'
   32 cast_expression: . unary_expression
   33 multiplicative_expression: . cast_expression
   34                          | . multiplicative_expression '*' cast_expression
   35                          | . multiplicative_expression '/' cast_expression
   36                          | . multiplicative_expression '%' cast_expression
   37 additive_expression: . multiplicative_expression
   38                    | . additive_expression '+' multiplicative_expression
   39                    | . additive_expression '-' multiplicative_expression
   40 shift_expression: . additive_expression
   41                 | . shift_expression LEFT_OP additive_expression
   42                 | . shift_expression RIGHT_OP additive_expression
   43 relational_expression: . shift_expression
   44                      | . relational_expression '<' shift_expression
   45                      | . relational_expression '>' shift_expression
   46                      | . relational_expression LE_OP shift_expression
   47                      | . relational_expression GE_OP shift_expression
   48 equality_expression: . relational_expression
   49                    | . equality_expression EQ_OP relational_expression
   50                    | . equality_expression NE_OP relational_expression
   51 and_expression: . equality_expression
   52               | . and_expression '&' equality_expression
   53 exclusive_or_expression: . and_expression
   54                        | . exclusive_or_expression '^' and_expression
   55 inclusive_or_expression: . exclusive_or_expression
   56                        | . inclusive_or_expression '|' exclusive_or_expression
   57 logical_and_expression: . inclusive_or_expression
   58                       | . logical_and_expression AND_OP inclusive_or_expression
   59 logical_or_expression: . logical_and_expression
   60                      | . logical_or_expression OR_OP logical_and_expression
   61 conditional_expression: . logical_or_expression
   77 constant_expression: . conditional_expression
  129 direct_declarator: direct_declarator '[' . constant_expression ']'
  130                  | direct_declarator '[' . ']'

    IDENTIFIER      shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    OCT_CONSTANT    shift, and go to state 64
    DEC_CONSTANT    shift, and go to state 65
    FLT_CONSTANT    shift, and go to state 66
    STRING_LITERAL  shift, and go to state 67
    INC_OP          shift, and go to state 68
    DEC_OP          shift, and go to state 69
    SIZEOF          shift, and go to state 70
    '('             shift, and go to state 81
    ']'             shift, and go to state 124
    '-'             shift, and go to state 82
    '&'             shift, and go to state 83
    '*'             shift, and go to state 84
    '~'             shift, and go to state 85
    '!'             shift, and go to state 86

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 125
    cast_expression            go to state 92
    multiplicative_expression  go to state 93
    additive_expression        go to state 94
    shift_expression           go to state 95
    relational_expression      go to state 96
    equality_expression        go to state 97
    and_expression             go to state 98
    exclusive_or_expression    go to state 99
    inclusive_or_expression    go to state 100
    logical_and_expression     go to state 101
    logical_or_expression      go to state 102
    conditional_expression     go to state 126
    constant_expression        go to state 127


state 50

  126 declarator: pointer direct_declarator .  [ASSIGN_OP, ')', ',', ';', '{']
  129 direct_declarator: direct_declarator . '[' constant_expression ']'
  130                  | direct_declarator . '[' ']'
  131                  | direct_declarator . '(' parameter_type_list ')'
  132                  | direct_declarator . '(' identifier_list ')'
  133                  | direct_declarator . '(' ')'

    '('  shift, and go to state 48
    '['  shift, and go to state 49

    $default  reduce using rule 126 (declarator)


state 51

    0 $accept: translation_unit $end .

    $default  accept


state 52

  179 translation_unit: translation_unit external_declaration .

    $default  reduce using rule 179 (translation_unit)


state 53

  118 enum_specifier: ENUM IDENTIFIER '{' . enumerator_list '}'
  120 enumerator_list: . enumerator
  121                | . enumerator_list ',' enumerator
  122 enumerator: . IDENTIFIER
  123           | . IDENTIFIER ASSIGN_OP constant_expression

    IDENTIFIER  shift, and go to state 54

    enumerator_list  go to state 128
    enumerator       go to state 56


state 54

  122 enumerator: IDENTIFIER .  [',', '}']
  123           | IDENTIFIER . ASSIGN_OP constant_expression

    ASSIGN_OP  shift, and go to state 129

    $default  reduce using rule 122 (enumerator)


state 55

  117 enum_specifier: ENUM '{' enumerator_list . '}'
  121 enumerator_list: enumerator_list . ',' enumerator

    ','  shift, and go to state 130
    '}'  shift, and go to state 131


state 56

  120 enumerator_list: enumerator .

    $default  reduce using rule 120 (enumerator_list)


state 57

   86 init_declarator_list: init_declarator_list ',' . init_declarator
   87 init_declarator: . declarator
   88                | . declarator ASSIGN_OP initializer
  126 declarator: . pointer direct_declarator
  127           | . direct_declarator
  128 direct_declarator: . IDENTIFIER
  129                  | . direct_declarator '[' constant_expression ']'
  130                  | . direct_declarator '[' ']'
  131                  | . direct_declarator '(' parameter_type_list ')'
  132                  | . direct_declarator '(' identifier_list ')'
  133                  | . direct_declarator '(' ')'
  134 pointer: . '*'
  135        | . '*' type_qualifier
  136        | . '*' pointer

    IDENTIFIER  shift, and go to state 1
    '*'         shift, and go to state 20

    init_declarator    go to state 132
    declarator         go to state 133
    direct_declarator  go to state 30
    pointer            go to state 31


state 58

   78 declaration: declaration_specifiers init_declarator_list ';' .

    $default  reduce using rule 78 (declaration)


state 59

    1 primary_expression: . IDENTIFIER
    2                   | . HEX_CONSTANT
    3                   | . OCT_CONSTANT
    4                   | . DEC_CONSTANT
    5                   | . FLT_CONSTANT
    6                   | . STRING_LITERAL
    7                   | . '(' expression ')'
    8 postfix_expression: . primary_expression
    9                   | . postfix_expression '[' expression ']'
   10                   | . postfix_expression '(' ')'
   11                   | . postfix_expression '(' argument_expression_list ')'
   12                   | . postfix_expression '.' IDENTIFIER
   13                   | . postfix_expression PTR_OP IDENTIFIER
   14                   | . postfix_expression INC_OP
   15                   | . postfix_expression DEC_OP
   18 unary_expression: . postfix_expression
   19                 | . INC_OP unary_expression
   20                 | . DEC_OP unary_expression
   21                 | . '-' cast_expression
   22                 | . '&' cast_expression
   23                 | . '*' cast_expression
   24                 | . '~' cast_expression
   25                 | . '!' cast_expression
   26                 | . SIZEOF unary_expression
   27                 | . SIZEOF '(' CHAR ')'
   28                 | . SIZEOF '(' SHORT ')'
   29                 | . SIZEOF '(' INT ')'
   30                 | . SIZEOF '(' LONG ')'
   31                 | . SIZEOF '(' FLOAT ')'
   32 cast_expression: . unary_expression
   33 multiplicative_expression: . cast_expression
   34                          | . multiplicative_expression '*' cast_expression
   35                          | . multiplicative_expression '/' cast_expression
   36                          | . multiplicative_expression '%' cast_expression
   37 additive_expression: . multiplicative_expression
   38                    | . additive_expression '+' multiplicative_expression
   39                    | . additive_expression '-' multiplicative_expression
   40 shift_expression: . additive_expression
   41                 | . shift_expression LEFT_OP additive_expression
   42                 | . shift_expression RIGHT_OP additive_expression
   43 relational_expression: . shift_expression
   44                      | . relational_expression '<' shift_expression
   45                      | . relational_expression '>' shift_expression
   46                      | . relational_expression LE_OP shift_expression
   47                      | . relational_expression GE_OP shift_expression
   48 equality_expression: . relational_expression
   49                    | . equality_expression EQ_OP relational_expression
   50                    | . equality_expression NE_OP relational_expression
   51 and_expression: . equality_expression
   52               | . and_expression '&' equality_expression
   53 exclusive_or_expression: . and_expression
   54                        | . exclusive_or_expression '^' and_expression
   55 inclusive_or_expression: . exclusive_or_expression
   56                        | . inclusive_or_expression '|' exclusive_or_expression
   57 logical_and_expression: . inclusive_or_expression
   58                       | . logical_and_expression AND_OP inclusive_or_expression
   59 logical_or_expression: . logical_and_expression
   60                      | . logical_or_expression OR_OP logical_and_expression
   61 conditional_expression: . logical_or_expression
   62 assignment_expression: . conditional_expression
   63                      | . unary_expression assignment_operator assignment_expression
   88 init_declarator: declarator ASSIGN_OP . initializer
  146 initializer: . assignment_expression
  147            | . '{' initializer_list '}'
  148            | . '{' initializer_list ',' '}'

    IDENTIFIER      shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    OCT_CONSTANT    shift, and go to state 64
    DEC_CONSTANT    shift, and go to state 65
    FLT_CONSTANT    shift, and go to state 66
    STRING_LITERAL  shift, and go to state 67
    INC_OP          shift, and go to state 68
    DEC_OP          shift, and go to state 69
    SIZEOF          shift, and go to state 70
    '('             shift, and go to state 81
    '-'             shift, and go to state 82
    '&'             shift, and go to state 83
    '*'             shift, and go to state 84
    '~'             shift, and go to state 85
    '!'             shift, and go to state 86
    '{'             shift, and go to state 134

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    cast_expression            go to state 92
    multiplicative_expression  go to state 93
    additive_expression        go to state 94
    shift_expression           go to state 95
    relational_expression      go to state 96
    equality_expression        go to state 97
    and_expression             go to state 98
    exclusive_or_expression    go to state 99
    inclusive_or_expression    go to state 100
    logical_and_expression     go to state 101
    logical_or_expression      go to state 102
    conditional_expression     go to state 103
    assignment_expression      go to state 135
    initializer                go to state 136


state 60

  182 function_definition: declaration_specifiers declarator compound_statement .

    $default  reduce using rule 182 (function_definition)


state 61

   93 type_specifier: . VOID
   94               | . CHAR
   95               | . SHORT
   96               | . INT
   97               | . LONG
   98               | . FLOAT
   99               | . DOUBLE
  100               | . SIGNED
  101               | . UNSIGNED
  102               | . struct_or_union_specifier
  103               | . enum_specifier
  104 struct_or_union_specifier: . struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  104                          | struct_or_union IDENTIFIER '{' . struct_declaration_list '}'
  105                          | . struct_or_union IDENTIFIER
  106 struct_or_union: . STRUCT
  107                | . UNION
  108 struct_declaration_list: . struct_declaration
  109                        | . struct_declaration_list struct_declaration
  110 struct_declaration: . specifier_qualifier_list struct_declarator_list ';'
  111 specifier_qualifier_list: . type_specifier specifier_qualifier_list
  112                         | . type_specifier
  113                         | . type_qualifier specifier_qualifier_list
  114                         | . type_qualifier
  117 enum_specifier: . ENUM '{' enumerator_list '}'
  118               | . ENUM IDENTIFIER '{' enumerator_list '}'
  119               | . ENUM IDENTIFIER
  124 type_qualifier: . CONST
  125               | . VOLATILE

    CHAR      shift, and go to state 6
    SHORT     shift, and go to state 7
    INT       shift, and go to state 8
    LONG      shift, and go to state 9
    SIGNED    shift, and go to state 10
    UNSIGNED  shift, and go to state 11
    FLOAT     shift, and go to state 12
    DOUBLE    shift, and go to state 13
    CONST     shift, and go to state 14
    VOLATILE  shift, and go to state 15
    VOID      shift, and go to state 16
    STRUCT    shift, and go to state 17
    UNION     shift, and go to state 18
    ENUM      shift, and go to state 19

    type_specifier             go to state 137
    struct_or_union_specifier  go to state 25
    struct_or_union            go to state 26
    struct_declaration_list    go to state 138
    struct_declaration         go to state 139
    specifier_qualifier_list   go to state 140
    enum_specifier             go to state 27
    type_qualifier             go to state 141


state 62

    1 primary_expression: IDENTIFIER .

    $default  reduce using rule 1 (primary_expression)


state 63

    2 primary_expression: HEX_CONSTANT .

    $default  reduce using rule 2 (primary_expression)


state 64

    3 primary_expression: OCT_CONSTANT .

    $default  reduce using rule 3 (primary_expression)


state 65

    4 primary_expression: DEC_CONSTANT .

    $default  reduce using rule 4 (primary_expression)


state 66

    5 primary_expression: FLT_CONSTANT .

    $default  reduce using rule 5 (primary_expression)


state 67

    6 primary_expression: STRING_LITERAL .

    $default  reduce using rule 6 (primary_expression)


state 68

    1 primary_expression: . IDENTIFIER
    2                   | . HEX_CONSTANT
    3                   | . OCT_CONSTANT
    4                   | . DEC_CONSTANT
    5                   | . FLT_CONSTANT
    6                   | . STRING_LITERAL
    7                   | . '(' expression ')'
    8 postfix_expression: . primary_expression
    9                   | . postfix_expression '[' expression ']'
   10                   | . postfix_expression '(' ')'
   11                   | . postfix_expression '(' argument_expression_list ')'
   12                   | . postfix_expression '.' IDENTIFIER
   13                   | . postfix_expression PTR_OP IDENTIFIER
   14                   | . postfix_expression INC_OP
   15                   | . postfix_expression DEC_OP
   18 unary_expression: . postfix_expression
   19                 | . INC_OP unary_expression
   19                 | INC_OP . unary_expression
   20                 | . DEC_OP unary_expression
   21                 | . '-' cast_expression
   22                 | . '&' cast_expression
   23                 | . '*' cast_expression
   24                 | . '~' cast_expression
   25                 | . '!' cast_expression
   26                 | . SIZEOF unary_expression
   27                 | . SIZEOF '(' CHAR ')'
   28                 | . SIZEOF '(' SHORT ')'
   29                 | . SIZEOF '(' INT ')'
   30                 | . SIZEOF '(' LONG ')'
   31                 | . SIZEOF '(' FLOAT ')'

    IDENTIFIER      shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    OCT_CONSTANT    shift, and go to state 64
    DEC_CONSTANT    shift, and go to state 65
    FLT_CONSTANT    shift, and go to state 66
    STRING_LITERAL  shift, and go to state 67
    INC_OP          shift, and go to state 68
    DEC_OP          shift, and go to state 69
    SIZEOF          shift, and go to state 70
    '('             shift, and go to state 81
    '-'             shift, and go to state 82
    '&'             shift, and go to state 83
    '*'             shift, and go to state 84
    '~'             shift, and go to state 85
    '!'             shift, and go to state 86

    primary_expression  go to state 89
    postfix_expression  go to state 90
    unary_expression    go to state 142


state 69

    1 primary_expression: . IDENTIFIER
    2                   | . HEX_CONSTANT
    3                   | . OCT_CONSTANT
    4                   | . DEC_CONSTANT
    5                   | . FLT_CONSTANT
    6                   | . STRING_LITERAL
    7                   | . '(' expression ')'
    8 postfix_expression: . primary_expression
    9                   | . postfix_expression '[' expression ']'
   10                   | . postfix_expression '(' ')'
   11                   | . postfix_expression '(' argument_expression_list ')'
   12                   | . postfix_expression '.' IDENTIFIER
   13                   | . postfix_expression PTR_OP IDENTIFIER
   14                   | . postfix_expression INC_OP
   15                   | . postfix_expression DEC_OP
   18 unary_expression: . postfix_expression
   19                 | . INC_OP unary_expression
   20                 | . DEC_OP unary_expression
   20                 | DEC_OP . unary_expression
   21                 | . '-' cast_expression
   22                 | . '&' cast_expression
   23                 | . '*' cast_expression
   24                 | . '~' cast_expression
   25                 | . '!' cast_expression
   26                 | . SIZEOF unary_expression
   27                 | . SIZEOF '(' CHAR ')'
   28                 | . SIZEOF '(' SHORT ')'
   29                 | . SIZEOF '(' INT ')'
   30                 | . SIZEOF '(' LONG ')'
   31                 | . SIZEOF '(' FLOAT ')'

    IDENTIFIER      shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    OCT_CONSTANT    shift, and go to state 64
    DEC_CONSTANT    shift, and go to state 65
    FLT_CONSTANT    shift, and go to state 66
    STRING_LITERAL  shift, and go to state 67
    INC_OP          shift, and go to state 68
    DEC_OP          shift, and go to state 69
    SIZEOF          shift, and go to state 70
    '('             shift, and go to state 81
    '-'             shift, and go to state 82
    '&'             shift, and go to state 83
    '*'             shift, and go to state 84
    '~'             shift, and go to state 85
    '!'             shift, and go to state 86

    primary_expression  go to state 89
    postfix_expression  go to state 90
    unary_expression    go to state 143


state 70

    1 primary_expression: . IDENTIFIER
    2                   | . HEX_CONSTANT
    3                   | . OCT_CONSTANT
    4                   | . DEC_CONSTANT
    5                   | . FLT_CONSTANT
    6                   | . STRING_LITERAL
    7                   | . '(' expression ')'
    8 postfix_expression: . primary_expression
    9                   | . postfix_expression '[' expression ']'
   10                   | . postfix_expression '(' ')'
   11                   | . postfix_expression '(' argument_expression_list ')'
   12                   | . postfix_expression '.' IDENTIFIER
   13                   | . postfix_expression PTR_OP IDENTIFIER
   14                   | . postfix_expression INC_OP
   15                   | . postfix_expression DEC_OP
   18 unary_expression: . postfix_expression
   19                 | . INC_OP unary_expression
   20                 | . DEC_OP unary_expression
   21                 | . '-' cast_expression
   22                 | . '&' cast_expression
   23                 | . '*' cast_expression
   24                 | . '~' cast_expression
   25                 | . '!' cast_expression
   26                 | . SIZEOF unary_expression
   26                 | SIZEOF . unary_expression
   27                 | . SIZEOF '(' CHAR ')'
   27                 | SIZEOF . '(' CHAR ')'
   28                 | . SIZEOF '(' SHORT ')'
   28                 | SIZEOF . '(' SHORT ')'
   29                 | . SIZEOF '(' INT ')'
   29                 | SIZEOF . '(' INT ')'
   30                 | . SIZEOF '(' LONG ')'
   30                 | SIZEOF . '(' LONG ')'
   31                 | . SIZEOF '(' FLOAT ')'
   31                 | SIZEOF . '(' FLOAT ')'

    IDENTIFIER      shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    OCT_CONSTANT    shift, and go to state 64
    DEC_CONSTANT    shift, and go to state 65
    FLT_CONSTANT    shift, and go to state 66
    STRING_LITERAL  shift, and go to state 67
    INC_OP          shift, and go to state 68
    DEC_OP          shift, and go to state 69
    SIZEOF          shift, and go to state 70
    '('             shift, and go to state 144
    '-'             shift, and go to state 82
    '&'             shift, and go to state 83
    '*'             shift, and go to state 84
    '~'             shift, and go to state 85
    '!'             shift, and go to state 86

    primary_expression  go to state 89
    postfix_expression  go to state 90
    unary_expression    go to state 145


state 71

    1 primary_expression: . IDENTIFIER
    2                   | . HEX_CONSTANT
    3                   | . OCT_CONSTANT
    4                   | . DEC_CONSTANT
    5                   | . FLT_CONSTANT
    6                   | . STRING_LITERAL
    7                   | . '(' expression ')'
    8 postfix_expression: . primary_expression
    9                   | . postfix_expression '[' expression ']'
   10                   | . postfix_expression '(' ')'
   11                   | . postfix_expression '(' argument_expression_list ')'
   12                   | . postfix_expression '.' IDENTIFIER
   13                   | . postfix_expression PTR_OP IDENTIFIER
   14                   | . postfix_expression INC_OP
   15                   | . postfix_expression DEC_OP
   18 unary_expression: . postfix_expression
   19                 | . INC_OP unary_expression
   20                 | . DEC_OP unary_expression
   21                 | . '-' cast_expression
   22                 | . '&' cast_expression
   23                 | . '*' cast_expression
   24                 | . '~' cast_expression
   25                 | . '!' cast_expression
   26                 | . SIZEOF unary_expression
   27                 | . SIZEOF '(' CHAR ')'
   28                 | . SIZEOF '(' SHORT ')'
   29                 | . SIZEOF '(' INT ')'
   30                 | . SIZEOF '(' LONG ')'
   31                 | . SIZEOF '(' FLOAT ')'
   32 cast_expression: . unary_expression
   33 multiplicative_expression: . cast_expression
   34                          | . multiplicative_expression '*' cast_expression
   35                          | . multiplicative_expression '/' cast_expression
   36                          | . multiplicative_expression '%' cast_expression
   37 additive_expression: . multiplicative_expression
   38                    | . additive_expression '+' multiplicative_expression
   39                    | . additive_expression '-' multiplicative_expression
   40 shift_expression: . additive_expression
   41                 | . shift_expression LEFT_OP additive_expression
   42                 | . shift_expression RIGHT_OP additive_expression
   43 relational_expression: . shift_expression
   44                      | . relational_expression '<' shift_expression
   45                      | . relational_expression '>' shift_expression
   46                      | . relational_expression LE_OP shift_expression
   47                      | . relational_expression GE_OP shift_expression
   48 equality_expression: . relational_expression
   49                    | . equality_expression EQ_OP relational_expression
   50                    | . equality_expression NE_OP relational_expression
   51 and_expression: . equality_expression
   52               | . and_expression '&' equality_expression
   53 exclusive_or_expression: . and_expression
   54                        | . exclusive_or_expression '^' and_expression
   55 inclusive_or_expression: . exclusive_or_expression
   56                        | . inclusive_or_expression '|' exclusive_or_expression
   57 logical_and_expression: . inclusive_or_expression
   58                       | . logical_and_expression AND_OP inclusive_or_expression
   59 logical_or_expression: . logical_and_expression
   60                      | . logical_or_expression OR_OP logical_and_expression
   61 conditional_expression: . logical_or_expression
   77 constant_expression: . conditional_expression
  157 labeled_statement: CASE . constant_expression ':' statement

    IDENTIFIER      shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    OCT_CONSTANT    shift, and go to state 64
    DEC_CONSTANT    shift, and go to state 65
    FLT_CONSTANT    shift, and go to state 66
    STRING_LITERAL  shift, and go to state 67
    INC_OP          shift, and go to state 68
    DEC_OP          shift, and go to state 69
    SIZEOF          shift, and go to state 70
    '('             shift, and go to state 81
    '-'             shift, and go to state 82
    '&'             shift, and go to state 83
    '*'             shift, and go to state 84
    '~'             shift, and go to state 85
    '!'             shift, and go to state 86

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 125
    cast_expression            go to state 92
    multiplicative_expression  go to state 93
    additive_expression        go to state 94
    shift_expression           go to state 95
    relational_expression      go to state 96
    equality_expression        go to state 97
    and_expression             go to state 98
    exclusive_or_expression    go to state 99
    inclusive_or_expression    go to state 100
    logical_and_expression     go to state 101
    logical_or_expression      go to state 102
    conditional_expression     go to state 126
    constant_expression        go to state 146


state 72

  158 labeled_statement: DEFAULT . ':' statement

    ':'  shift, and go to state 147


state 73

  168 selection_statement: IF . '(' expression ')' statement
  169                    | IF . '(' expression ')' statement ELSE statement

    '('  shift, and go to state 148


state 74

  170 selection_statement: SWITCH . '(' expression ')' statement

    '('  shift, and go to state 149


state 75

  171 iteration_statement: WHILE . '(' expression ')' statement

    '('  shift, and go to state 150


state 76

    1 primary_expression: . IDENTIFIER
    2                   | . HEX_CONSTANT
    3                   | . OCT_CONSTANT
    4                   | . DEC_CONSTANT
    5                   | . FLT_CONSTANT
    6                   | . STRING_LITERAL
    7                   | . '(' expression ')'
    8 postfix_expression: . primary_expression
    9                   | . postfix_expression '[' expression ']'
   10                   | . postfix_expression '(' ')'
   11                   | . postfix_expression '(' argument_expression_list ')'
   12                   | . postfix_expression '.' IDENTIFIER
   13                   | . postfix_expression PTR_OP IDENTIFIER
   14                   | . postfix_expression INC_OP
   15                   | . postfix_expression DEC_OP
   18 unary_expression: . postfix_expression
   19                 | . INC_OP unary_expression
   20                 | . DEC_OP unary_expression
   21                 | . '-' cast_expression
   22                 | . '&' cast_expression
   23                 | . '*' cast_expression
   24                 | . '~' cast_expression
   25                 | . '!' cast_expression
   26                 | . SIZEOF unary_expression
   27                 | . SIZEOF '(' CHAR ')'
   28                 | . SIZEOF '(' SHORT ')'
   29                 | . SIZEOF '(' INT ')'
   30                 | . SIZEOF '(' LONG ')'
   31                 | . SIZEOF '(' FLOAT ')'
   32 cast_expression: . unary_expression
   33 multiplicative_expression: . cast_expression
   34                          | . multiplicative_expression '*' cast_expression
   35                          | . multiplicative_expression '/' cast_expression
   36                          | . multiplicative_expression '%' cast_expression
   37 additive_expression: . multiplicative_expression
   38                    | . additive_expression '+' multiplicative_expression
   39                    | . additive_expression '-' multiplicative_expression
   40 shift_expression: . additive_expression
   41                 | . shift_expression LEFT_OP additive_expression
   42                 | . shift_expression RIGHT_OP additive_expression
   43 relational_expression: . shift_expression
   44                      | . relational_expression '<' shift_expression
   45                      | . relational_expression '>' shift_expression
   46                      | . relational_expression LE_OP shift_expression
   47                      | . relational_expression GE_OP shift_expression
   48 equality_expression: . relational_expression
   49                    | . equality_expression EQ_OP relational_expression
   50                    | . equality_expression NE_OP relational_expression
   51 and_expression: . equality_expression
   52               | . and_expression '&' equality_expression
   53 exclusive_or_expression: . and_expression
   54                        | . exclusive_or_expression '^' and_expression
   55 inclusive_or_expression: . exclusive_or_expression
   56                        | . inclusive_or_expression '|' exclusive_or_expression
   57 logical_and_expression: . inclusive_or_expression
   58                       | . logical_and_expression AND_OP inclusive_or_expression
   59 logical_or_expression: . logical_and_expression
   60                      | . logical_or_expression OR_OP logical_and_expression
   61 conditional_expression: . logical_or_expression
   62 assignment_expression: . conditional_expression
   63                      | . unary_expression assignment_operator assignment_expression
   75 expression: . assignment_expression
   76           | . expression ',' assignment_expression
  151 statement: . labeled_statement
  152          | . compound_statement
  153          | . expression_statement
  154          | . selection_statement
  155          | . iteration_statement
  156          | . jump_statement
  157 labeled_statement: . CASE constant_expression ':' statement
  158                  | . DEFAULT ':' statement
  159 compound_statement: . '{' '}'
  160                   | . '{' statement_list '}'
  161                   | . '{' declaration_list statement_list '}'
  166 expression_statement: . ';'
  167                     | . expression ';'
  168 selection_statement: . IF '(' expression ')' statement
  169                    | . IF '(' expression ')' statement ELSE statement
  170                    | . SWITCH '(' expression ')' statement
  171 iteration_statement: . WHILE '(' expression ')' statement
  172                    | . DO statement WHILE '(' expression ')' ';'
  172                    | DO . statement WHILE '(' expression ')' ';'
  173                    | . FOR '(' expression_statement expression_statement expression ')' statement
  174 jump_statement: . CONTINUE ';'
  175               | . BREAK ';'
  176               | . RETURN ';'
  177               | . RETURN expression ';'

    IDENTIFIER      shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    OCT_CONSTANT    shift, and go to state 64
    DEC_CONSTANT    shift, and go to state 65
    FLT_CONSTANT    shift, and go to state 66
    STRING_LITERAL  shift, and go to state 67
    INC_OP          shift, and go to state 68
    DEC_OP          shift, and go to state 69
    SIZEOF          shift, and go to state 70
    CASE            shift, and go to state 71
    DEFAULT         shift, and go to state 72
    IF              shift, and go to state 73
    SWITCH          shift, and go to state 74
    WHILE           shift, and go to state 75
    DO              shift, and go to state 76
    FOR             shift, and go to state 77
    CONTINUE        shift, and go to state 78
    BREAK           shift, and go to state 79
    RETURN          shift, and go to state 80
    '('             shift, and go to state 81
    '-'             shift, and go to state 82
    '&'             shift, and go to state 83
    '*'             shift, and go to state 84
    '~'             shift, and go to state 85
    '!'             shift, and go to state 86
    ';'             shift, and go to state 87
    '{'             shift, and go to state 46

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    cast_expression            go to state 92
    multiplicative_expression  go to state 93
    additive_expression        go to state 94
    shift_expression           go to state 95
    relational_expression      go to state 96
    equality_expression        go to state 97
    and_expression             go to state 98
    exclusive_or_expression    go to state 99
    inclusive_or_expression    go to state 100
    logical_and_expression     go to state 101
    logical_or_expression      go to state 102
    conditional_expression     go to state 103
    assignment_expression      go to state 104
    expression                 go to state 105
    statement                  go to state 151
    labeled_statement          go to state 109
    compound_statement         go to state 110
    expression_statement       go to state 113
    selection_statement        go to state 114
    iteration_statement        go to state 115
    jump_statement             go to state 116


state 77

  173 iteration_statement: FOR . '(' expression_statement expression_statement expression ')' statement

    '('  shift, and go to state 152


state 78

  174 jump_statement: CONTINUE . ';'

    ';'  shift, and go to state 153


state 79

  175 jump_statement: BREAK . ';'

    ';'  shift, and go to state 154


state 80

    1 primary_expression: . IDENTIFIER
    2                   | . HEX_CONSTANT
    3                   | . OCT_CONSTANT
    4                   | . DEC_CONSTANT
    5                   | . FLT_CONSTANT
    6                   | . STRING_LITERAL
    7                   | . '(' expression ')'
    8 postfix_expression: . primary_expression
    9                   | . postfix_expression '[' expression ']'
   10                   | . postfix_expression '(' ')'
   11                   | . postfix_expression '(' argument_expression_list ')'
   12                   | . postfix_expression '.' IDENTIFIER
   13                   | . postfix_expression PTR_OP IDENTIFIER
   14                   | . postfix_expression INC_OP
   15                   | . postfix_expression DEC_OP
   18 unary_expression: . postfix_expression
   19                 | . INC_OP unary_expression
   20                 | . DEC_OP unary_expression
   21                 | . '-' cast_expression
   22                 | . '&' cast_expression
   23                 | . '*' cast_expression
   24                 | . '~' cast_expression
   25                 | . '!' cast_expression
   26                 | . SIZEOF unary_expression
   27                 | . SIZEOF '(' CHAR ')'
   28                 | . SIZEOF '(' SHORT ')'
   29                 | . SIZEOF '(' INT ')'
   30                 | . SIZEOF '(' LONG ')'
   31                 | . SIZEOF '(' FLOAT ')'
   32 cast_expression: . unary_expression
   33 multiplicative_expression: . cast_expression
   34                          | . multiplicative_expression '*' cast_expression
   35                          | . multiplicative_expression '/' cast_expression
   36                          | . multiplicative_expression '%' cast_expression
   37 additive_expression: . multiplicative_expression
   38                    | . additive_expression '+' multiplicative_expression
   39                    | . additive_expression '-' multiplicative_expression
   40 shift_expression: . additive_expression
   41                 | . shift_expression LEFT_OP additive_expression
   42                 | . shift_expression RIGHT_OP additive_expression
   43 relational_expression: . shift_expression
   44                      | . relational_expression '<' shift_expression
   45                      | . relational_expression '>' shift_expression
   46                      | . relational_expression LE_OP shift_expression
   47                      | . relational_expression GE_OP shift_expression
   48 equality_expression: . relational_expression
   49                    | . equality_expression EQ_OP relational_expression
   50                    | . equality_expression NE_OP relational_expression
   51 and_expression: . equality_expression
   52               | . and_expression '&' equality_expression
   53 exclusive_or_expression: . and_expression
   54                        | . exclusive_or_expression '^' and_expression
   55 inclusive_or_expression: . exclusive_or_expression
   56                        | . inclusive_or_expression '|' exclusive_or_expression
   57 logical_and_expression: . inclusive_or_expression
   58                       | . logical_and_expression AND_OP inclusive_or_expression
   59 logical_or_expression: . logical_and_expression
   60                      | . logical_or_expression OR_OP logical_and_expression
   61 conditional_expression: . logical_or_expression
   62 assignment_expression: . conditional_expression
   63                      | . unary_expression assignment_operator assignment_expression
   75 expression: . assignment_expression
   76           | . expression ',' assignment_expression
  176 jump_statement: RETURN . ';'
  177               | RETURN . expression ';'

    IDENTIFIER      shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    OCT_CONSTANT    shift, and go to state 64
    DEC_CONSTANT    shift, and go to state 65
    FLT_CONSTANT    shift, and go to state 66
    STRING_LITERAL  shift, and go to state 67
    INC_OP          shift, and go to state 68
    DEC_OP          shift, and go to state 69
    SIZEOF          shift, and go to state 70
    '('             shift, and go to state 81
    '-'             shift, and go to state 82
    '&'             shift, and go to state 83
    '*'             shift, and go to state 84
    '~'             shift, and go to state 85
    '!'             shift, and go to state 86
    ';'             shift, and go to state 155

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    cast_expression            go to state 92
    multiplicative_expression  go to state 93
    additive_expression        go to state 94
    shift_expression           go to state 95
    relational_expression      go to state 96
    equality_expression        go to state 97
    and_expression             go to state 98
    exclusive_or_expression    go to state 99
    inclusive_or_expression    go to state 100
    logical_and_expression     go to state 101
    logical_or_expression      go to state 102
    conditional_expression     go to state 103
    assignment_expression      go to state 104
    expression                 go to state 156


state 81

    1 primary_expression: . IDENTIFIER
    2                   | . HEX_CONSTANT
    3                   | . OCT_CONSTANT
    4                   | . DEC_CONSTANT
    5                   | . FLT_CONSTANT
    6                   | . STRING_LITERAL
    7                   | . '(' expression ')'
    7                   | '(' . expression ')'
    8 postfix_expression: . primary_expression
    9                   | . postfix_expression '[' expression ']'
   10                   | . postfix_expression '(' ')'
   11                   | . postfix_expression '(' argument_expression_list ')'
   12                   | . postfix_expression '.' IDENTIFIER
   13                   | . postfix_expression PTR_OP IDENTIFIER
   14                   | . postfix_expression INC_OP
   15                   | . postfix_expression DEC_OP
   18 unary_expression: . postfix_expression
   19                 | . INC_OP unary_expression
   20                 | . DEC_OP unary_expression
   21                 | . '-' cast_expression
   22                 | . '&' cast_expression
   23                 | . '*' cast_expression
   24                 | . '~' cast_expression
   25                 | . '!' cast_expression
   26                 | . SIZEOF unary_expression
   27                 | . SIZEOF '(' CHAR ')'
   28                 | . SIZEOF '(' SHORT ')'
   29                 | . SIZEOF '(' INT ')'
   30                 | . SIZEOF '(' LONG ')'
   31                 | . SIZEOF '(' FLOAT ')'
   32 cast_expression: . unary_expression
   33 multiplicative_expression: . cast_expression
   34                          | . multiplicative_expression '*' cast_expression
   35                          | . multiplicative_expression '/' cast_expression
   36                          | . multiplicative_expression '%' cast_expression
   37 additive_expression: . multiplicative_expression
   38                    | . additive_expression '+' multiplicative_expression
   39                    | . additive_expression '-' multiplicative_expression
   40 shift_expression: . additive_expression
   41                 | . shift_expression LEFT_OP additive_expression
   42                 | . shift_expression RIGHT_OP additive_expression
   43 relational_expression: . shift_expression
   44                      | . relational_expression '<' shift_expression
   45                      | . relational_expression '>' shift_expression
   46                      | . relational_expression LE_OP shift_expression
   47                      | . relational_expression GE_OP shift_expression
   48 equality_expression: . relational_expression
   49                    | . equality_expression EQ_OP relational_expression
   50                    | . equality_expression NE_OP relational_expression
   51 and_expression: . equality_expression
   52               | . and_expression '&' equality_expression
   53 exclusive_or_expression: . and_expression
   54                        | . exclusive_or_expression '^' and_expression
   55 inclusive_or_expression: . exclusive_or_expression
   56                        | . inclusive_or_expression '|' exclusive_or_expression
   57 logical_and_expression: . inclusive_or_expression
   58                       | . logical_and_expression AND_OP inclusive_or_expression
   59 logical_or_expression: . logical_and_expression
   60                      | . logical_or_expression OR_OP logical_and_expression
   61 conditional_expression: . logical_or_expression
   62 assignment_expression: . conditional_expression
   63                      | . unary_expression assignment_operator assignment_expression
   75 expression: . assignment_expression
   76           | . expression ',' assignment_expression

    IDENTIFIER      shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    OCT_CONSTANT    shift, and go to state 64
    DEC_CONSTANT    shift, and go to state 65
    FLT_CONSTANT    shift, and go to state 66
    STRING_LITERAL  shift, and go to state 67
    INC_OP          shift, and go to state 68
    DEC_OP          shift, and go to state 69
    SIZEOF          shift, and go to state 70
    '('             shift, and go to state 81
    '-'             shift, and go to state 82
    '&'             shift, and go to state 83
    '*'             shift, and go to state 84
    '~'             shift, and go to state 85
    '!'             shift, and go to state 86

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    cast_expression            go to state 92
    multiplicative_expression  go to state 93
    additive_expression        go to state 94
    shift_expression           go to state 95
    relational_expression      go to state 96
    equality_expression        go to state 97
    and_expression             go to state 98
    exclusive_or_expression    go to state 99
    inclusive_or_expression    go to state 100
    logical_and_expression     go to state 101
    logical_or_expression      go to state 102
    conditional_expression     go to state 103
    assignment_expression      go to state 104
    expression                 go to state 157


state 82

    1 primary_expression: . IDENTIFIER
    2                   | . HEX_CONSTANT
    3                   | . OCT_CONSTANT
    4                   | . DEC_CONSTANT
    5                   | . FLT_CONSTANT
    6                   | . STRING_LITERAL
    7                   | . '(' expression ')'
    8 postfix_expression: . primary_expression
    9                   | . postfix_expression '[' expression ']'
   10                   | . postfix_expression '(' ')'
   11                   | . postfix_expression '(' argument_expression_list ')'
   12                   | . postfix_expression '.' IDENTIFIER
   13                   | . postfix_expression PTR_OP IDENTIFIER
   14                   | . postfix_expression INC_OP
   15                   | . postfix_expression DEC_OP
   18 unary_expression: . postfix_expression
   19                 | . INC_OP unary_expression
   20                 | . DEC_OP unary_expression
   21                 | . '-' cast_expression
   21                 | '-' . cast_expression
   22                 | . '&' cast_expression
   23                 | . '*' cast_expression
   24                 | . '~' cast_expression
   25                 | . '!' cast_expression
   26                 | . SIZEOF unary_expression
   27                 | . SIZEOF '(' CHAR ')'
   28                 | . SIZEOF '(' SHORT ')'
   29                 | . SIZEOF '(' INT ')'
   30                 | . SIZEOF '(' LONG ')'
   31                 | . SIZEOF '(' FLOAT ')'
   32 cast_expression: . unary_expression

    IDENTIFIER      shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    OCT_CONSTANT    shift, and go to state 64
    DEC_CONSTANT    shift, and go to state 65
    FLT_CONSTANT    shift, and go to state 66
    STRING_LITERAL  shift, and go to state 67
    INC_OP          shift, and go to state 68
    DEC_OP          shift, and go to state 69
    SIZEOF          shift, and go to state 70
    '('             shift, and go to state 81
    '-'             shift, and go to state 82
    '&'             shift, and go to state 83
    '*'             shift, and go to state 84
    '~'             shift, and go to state 85
    '!'             shift, and go to state 86

    primary_expression  go to state 89
    postfix_expression  go to state 90
    unary_expression    go to state 125
    cast_expression     go to state 158


state 83

    1 primary_expression: . IDENTIFIER
    2                   | . HEX_CONSTANT
    3                   | . OCT_CONSTANT
    4                   | . DEC_CONSTANT
    5                   | . FLT_CONSTANT
    6                   | . STRING_LITERAL
    7                   | . '(' expression ')'
    8 postfix_expression: . primary_expression
    9                   | . postfix_expression '[' expression ']'
   10                   | . postfix_expression '(' ')'
   11                   | . postfix_expression '(' argument_expression_list ')'
   12                   | . postfix_expression '.' IDENTIFIER
   13                   | . postfix_expression PTR_OP IDENTIFIER
   14                   | . postfix_expression INC_OP
   15                   | . postfix_expression DEC_OP
   18 unary_expression: . postfix_expression
   19                 | . INC_OP unary_expression
   20                 | . DEC_OP unary_expression
   21                 | . '-' cast_expression
   22                 | . '&' cast_expression
   22                 | '&' . cast_expression
   23                 | . '*' cast_expression
   24                 | . '~' cast_expression
   25                 | . '!' cast_expression
   26                 | . SIZEOF unary_expression
   27                 | . SIZEOF '(' CHAR ')'
   28                 | . SIZEOF '(' SHORT ')'
   29                 | . SIZEOF '(' INT ')'
   30                 | . SIZEOF '(' LONG ')'
   31                 | . SIZEOF '(' FLOAT ')'
   32 cast_expression: . unary_expression

    IDENTIFIER      shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    OCT_CONSTANT    shift, and go to state 64
    DEC_CONSTANT    shift, and go to state 65
    FLT_CONSTANT    shift, and go to state 66
    STRING_LITERAL  shift, and go to state 67
    INC_OP          shift, and go to state 68
    DEC_OP          shift, and go to state 69
    SIZEOF          shift, and go to state 70
    '('             shift, and go to state 81
    '-'             shift, and go to state 82
    '&'             shift, and go to state 83
    '*'             shift, and go to state 84
    '~'             shift, and go to state 85
    '!'             shift, and go to state 86

    primary_expression  go to state 89
    postfix_expression  go to state 90
    unary_expression    go to state 125
    cast_expression     go to state 159


state 84

    1 primary_expression: . IDENTIFIER
    2                   | . HEX_CONSTANT
    3                   | . OCT_CONSTANT
    4                   | . DEC_CONSTANT
    5                   | . FLT_CONSTANT
    6                   | . STRING_LITERAL
    7                   | . '(' expression ')'
    8 postfix_expression: . primary_expression
    9                   | . postfix_expression '[' expression ']'
   10                   | . postfix_expression '(' ')'
   11                   | . postfix_expression '(' argument_expression_list ')'
   12                   | . postfix_expression '.' IDENTIFIER
   13                   | . postfix_expression PTR_OP IDENTIFIER
   14                   | . postfix_expression INC_OP
   15                   | . postfix_expression DEC_OP
   18 unary_expression: . postfix_expression
   19                 | . INC_OP unary_expression
   20                 | . DEC_OP unary_expression
   21                 | . '-' cast_expression
   22                 | . '&' cast_expression
   23                 | . '*' cast_expression
   23                 | '*' . cast_expression
   24                 | . '~' cast_expression
   25                 | . '!' cast_expression
   26                 | . SIZEOF unary_expression
   27                 | . SIZEOF '(' CHAR ')'
   28                 | . SIZEOF '(' SHORT ')'
   29                 | . SIZEOF '(' INT ')'
   30                 | . SIZEOF '(' LONG ')'
   31                 | . SIZEOF '(' FLOAT ')'
   32 cast_expression: . unary_expression

    IDENTIFIER      shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    OCT_CONSTANT    shift, and go to state 64
    DEC_CONSTANT    shift, and go to state 65
    FLT_CONSTANT    shift, and go to state 66
    STRING_LITERAL  shift, and go to state 67
    INC_OP          shift, and go to state 68
    DEC_OP          shift, and go to state 69
    SIZEOF          shift, and go to state 70
    '('             shift, and go to state 81
    '-'             shift, and go to state 82
    '&'             shift, and go to state 83
    '*'             shift, and go to state 84
    '~'             shift, and go to state 85
    '!'             shift, and go to state 86

    primary_expression  go to state 89
    postfix_expression  go to state 90
    unary_expression    go to state 125
    cast_expression     go to state 160


state 85

    1 primary_expression: . IDENTIFIER
    2                   | . HEX_CONSTANT
    3                   | . OCT_CONSTANT
    4                   | . DEC_CONSTANT
    5                   | . FLT_CONSTANT
    6                   | . STRING_LITERAL
    7                   | . '(' expression ')'
    8 postfix_expression: . primary_expression
    9                   | . postfix_expression '[' expression ']'
   10                   | . postfix_expression '(' ')'
   11                   | . postfix_expression '(' argument_expression_list ')'
   12                   | . postfix_expression '.' IDENTIFIER
   13                   | . postfix_expression PTR_OP IDENTIFIER
   14                   | . postfix_expression INC_OP
   15                   | . postfix_expression DEC_OP
   18 unary_expression: . postfix_expression
   19                 | . INC_OP unary_expression
   20                 | . DEC_OP unary_expression
   21                 | . '-' cast_expression
   22                 | . '&' cast_expression
   23                 | . '*' cast_expression
   24                 | . '~' cast_expression
   24                 | '~' . cast_expression
   25                 | . '!' cast_expression
   26                 | . SIZEOF unary_expression
   27                 | . SIZEOF '(' CHAR ')'
   28                 | . SIZEOF '(' SHORT ')'
   29                 | . SIZEOF '(' INT ')'
   30                 | . SIZEOF '(' LONG ')'
   31                 | . SIZEOF '(' FLOAT ')'
   32 cast_expression: . unary_expression

    IDENTIFIER      shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    OCT_CONSTANT    shift, and go to state 64
    DEC_CONSTANT    shift, and go to state 65
    FLT_CONSTANT    shift, and go to state 66
    STRING_LITERAL  shift, and go to state 67
    INC_OP          shift, and go to state 68
    DEC_OP          shift, and go to state 69
    SIZEOF          shift, and go to state 70
    '('             shift, and go to state 81
    '-'             shift, and go to state 82
    '&'             shift, and go to state 83
    '*'             shift, and go to state 84
    '~'             shift, and go to state 85
    '!'             shift, and go to state 86

    primary_expression  go to state 89
    postfix_expression  go to state 90
    unary_expression    go to state 125
    cast_expression     go to state 161


state 86

    1 primary_expression: . IDENTIFIER
    2                   | . HEX_CONSTANT
    3                   | . OCT_CONSTANT
    4                   | . DEC_CONSTANT
    5                   | . FLT_CONSTANT
    6                   | . STRING_LITERAL
    7                   | . '(' expression ')'
    8 postfix_expression: . primary_expression
    9                   | . postfix_expression '[' expression ']'
   10                   | . postfix_expression '(' ')'
   11                   | . postfix_expression '(' argument_expression_list ')'
   12                   | . postfix_expression '.' IDENTIFIER
   13                   | . postfix_expression PTR_OP IDENTIFIER
   14                   | . postfix_expression INC_OP
   15                   | . postfix_expression DEC_OP
   18 unary_expression: . postfix_expression
   19                 | . INC_OP unary_expression
   20                 | . DEC_OP unary_expression
   21                 | . '-' cast_expression
   22                 | . '&' cast_expression
   23                 | . '*' cast_expression
   24                 | . '~' cast_expression
   25                 | . '!' cast_expression
   25                 | '!' . cast_expression
   26                 | . SIZEOF unary_expression
   27                 | . SIZEOF '(' CHAR ')'
   28                 | . SIZEOF '(' SHORT ')'
   29                 | . SIZEOF '(' INT ')'
   30                 | . SIZEOF '(' LONG ')'
   31                 | . SIZEOF '(' FLOAT ')'
   32 cast_expression: . unary_expression

    IDENTIFIER      shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    OCT_CONSTANT    shift, and go to state 64
    DEC_CONSTANT    shift, and go to state 65
    FLT_CONSTANT    shift, and go to state 66
    STRING_LITERAL  shift, and go to state 67
    INC_OP          shift, and go to state 68
    DEC_OP          shift, and go to state 69
    SIZEOF          shift, and go to state 70
    '('             shift, and go to state 81
    '-'             shift, and go to state 82
    '&'             shift, and go to state 83
    '*'             shift, and go to state 84
    '~'             shift, and go to state 85
    '!'             shift, and go to state 86

    primary_expression  go to state 89
    postfix_expression  go to state 90
    unary_expression    go to state 125
    cast_expression     go to state 162


state 87

  166 expression_statement: ';' .

    $default  reduce using rule 166 (expression_statement)


state 88

  159 compound_statement: '{' '}' .

    $default  reduce using rule 159 (compound_statement)


state 89

    8 postfix_expression: primary_expression .

    $default  reduce using rule 8 (postfix_expression)


state 90

    9 postfix_expression: postfix_expression . '[' expression ']'
   10                   | postfix_expression . '(' ')'
   11                   | postfix_expression . '(' argument_expression_list ')'
   12                   | postfix_expression . '.' IDENTIFIER
   13                   | postfix_expression . PTR_OP IDENTIFIER
   14                   | postfix_expression . INC_OP
   15                   | postfix_expression . DEC_OP
   18 unary_expression: postfix_expression .  [LEFT_OP, RIGHT_OP, LE_OP, GE_OP, EQ_OP, NE_OP, ASSIGN_OP, AND_OP, OR_OP, MUL_ASSIGN, DIV_ASSIGN, MOD_ASSIGN, ADD_ASSIGN, SUB_ASSIGN, LEFT_ASSIGN, RIGHT_ASSIGN, AND_ASSIGN, XOR_ASSIGN, OR_ASSIGN, ')', ']', ',', '-', '&', '*', '/', '%', '+', '<', '>', '^', '|', ';', '}', ':']

    PTR_OP  shift, and go to state 163
    INC_OP  shift, and go to state 164
    DEC_OP  shift, and go to state 165
    '('     shift, and go to state 166
    '['     shift, and go to state 167
    '.'     shift, and go to state 168

    $default  reduce using rule 18 (unary_expression)


state 91

   32 cast_expression: unary_expression .  [LEFT_OP, RIGHT_OP, LE_OP, GE_OP, EQ_OP, NE_OP, AND_OP, OR_OP, ')', ']', ',', '-', '&', '*', '/', '%', '+', '<', '>', '^', '|', ';', '}']
   63 assignment_expression: unary_expression . assignment_operator assignment_expression
   64 assignment_operator: . ASSIGN_OP
   65                    | . MUL_ASSIGN
   66                    | . DIV_ASSIGN
   67                    | . MOD_ASSIGN
   68                    | . ADD_ASSIGN
   69                    | . SUB_ASSIGN
   70                    | . LEFT_ASSIGN
   71                    | . RIGHT_ASSIGN
   72                    | . AND_ASSIGN
   73                    | . XOR_ASSIGN
   74                    | . OR_ASSIGN

    ASSIGN_OP     shift, and go to state 169
    MUL_ASSIGN    shift, and go to state 170
    DIV_ASSIGN    shift, and go to state 171
    MOD_ASSIGN    shift, and go to state 172
    ADD_ASSIGN    shift, and go to state 173
    SUB_ASSIGN    shift, and go to state 174
    LEFT_ASSIGN   shift, and go to state 175
    RIGHT_ASSIGN  shift, and go to state 176
    AND_ASSIGN    shift, and go to state 177
    XOR_ASSIGN    shift, and go to state 178
    OR_ASSIGN     shift, and go to state 179

    $default  reduce using rule 32 (cast_expression)

    assignment_operator  go to state 180


state 92

   33 multiplicative_expression: cast_expression .

    $default  reduce using rule 33 (multiplicative_expression)


state 93

   34 multiplicative_expression: multiplicative_expression . '*' cast_expression
   35                          | multiplicative_expression . '/' cast_expression
   36                          | multiplicative_expression . '%' cast_expression
   37 additive_expression: multiplicative_expression .  [LEFT_OP, RIGHT_OP, LE_OP, GE_OP, EQ_OP, NE_OP, AND_OP, OR_OP, ')', ']', ',', '-', '&', '+', '<', '>', '^', '|', ';', '}', ':']

    '*'  shift, and go to state 181
    '/'  shift, and go to state 182
    '%'  shift, and go to state 183

    $default  reduce using rule 37 (additive_expression)


state 94

   38 additive_expression: additive_expression . '+' multiplicative_expression
   39                    | additive_expression . '-' multiplicative_expression
   40 shift_expression: additive_expression .  [LEFT_OP, RIGHT_OP, LE_OP, GE_OP, EQ_OP, NE_OP, AND_OP, OR_OP, ')', ']', ',', '&', '<', '>', '^', '|', ';', '}', ':']

    '-'  shift, and go to state 184
    '+'  shift, and go to state 185

    $default  reduce using rule 40 (shift_expression)


state 95

   41 shift_expression: shift_expression . LEFT_OP additive_expression
   42                 | shift_expression . RIGHT_OP additive_expression
   43 relational_expression: shift_expression .  [LE_OP, GE_OP, EQ_OP, NE_OP, AND_OP, OR_OP, ')', ']', ',', '&', '<', '>', '^', '|', ';', '}', ':']

    LEFT_OP   shift, and go to state 186
    RIGHT_OP  shift, and go to state 187

    $default  reduce using rule 43 (relational_expression)


state 96

   44 relational_expression: relational_expression . '<' shift_expression
   45                      | relational_expression . '>' shift_expression
   46                      | relational_expression . LE_OP shift_expression
   47                      | relational_expression . GE_OP shift_expression
   48 equality_expression: relational_expression .  [EQ_OP, NE_OP, AND_OP, OR_OP, ')', ']', ',', '&', '^', '|', ';', '}', ':']

    LE_OP  shift, and go to state 188
    GE_OP  shift, and go to state 189
    '<'    shift, and go to state 190
    '>'    shift, and go to state 191

    $default  reduce using rule 48 (equality_expression)


state 97

   49 equality_expression: equality_expression . EQ_OP relational_expression
   50                    | equality_expression . NE_OP relational_expression
   51 and_expression: equality_expression .  [AND_OP, OR_OP, ')', ']', ',', '&', '^', '|', ';', '}', ':']

    EQ_OP  shift, and go to state 192
    NE_OP  shift, and go to state 193

    $default  reduce using rule 51 (and_expression)


state 98

   52 and_expression: and_expression . '&' equality_expression
   53 exclusive_or_expression: and_expression .  [AND_OP, OR_OP, ')', ']', ',', '^', '|', ';', '}', ':']

    '&'  shift, and go to state 194

    $default  reduce using rule 53 (exclusive_or_expression)


state 99

   54 exclusive_or_expression: exclusive_or_expression . '^' and_expression
   55 inclusive_or_expression: exclusive_or_expression .  [AND_OP, OR_OP, ')', ']', ',', '|', ';', '}', ':']

    '^'  shift, and go to state 195

    $default  reduce using rule 55 (inclusive_or_expression)


state 100

   56 inclusive_or_expression: inclusive_or_expression . '|' exclusive_or_expression
   57 logical_and_expression: inclusive_or_expression .  [AND_OP, OR_OP, ')', ']', ',', ';', '}', ':']

    '|'  shift, and go to state 196

    $default  reduce using rule 57 (logical_and_expression)


state 101

   58 logical_and_expression: logical_and_expression . AND_OP inclusive_or_expression
   59 logical_or_expression: logical_and_expression .  [OR_OP, ')', ']', ',', ';', '}', ':']

    AND_OP  shift, and go to state 197

    $default  reduce using rule 59 (logical_or_expression)


state 102

   60 logical_or_expression: logical_or_expression . OR_OP logical_and_expression
   61 conditional_expression: logical_or_expression .  [')', ']', ',', ';', '}', ':']

    OR_OP  shift, and go to state 198

    $default  reduce using rule 61 (conditional_expression)


state 103

   62 assignment_expression: conditional_expression .

    $default  reduce using rule 62 (assignment_expression)


state 104

   75 expression: assignment_expression .

    $default  reduce using rule 75 (expression)


state 105

   76 expression: expression . ',' assignment_expression
  167 expression_statement: expression . ';'

    ','  shift, and go to state 199
    ';'  shift, and go to state 200


state 106

  162 declaration_list: declaration .

    $default  reduce using rule 162 (declaration_list)


state 107

   78 declaration: declaration_specifiers . init_declarator_list ';'
   85 init_declarator_list: . init_declarator
   86                     | . init_declarator_list ',' init_declarator
   87 init_declarator: . declarator
   88                | . declarator ASSIGN_OP initializer
  126 declarator: . pointer direct_declarator
  127           | . direct_declarator
  128 direct_declarator: . IDENTIFIER
  129                  | . direct_declarator '[' constant_expression ']'
  130                  | . direct_declarator '[' ']'
  131                  | . direct_declarator '(' parameter_type_list ')'
  132                  | . direct_declarator '(' identifier_list ')'
  133                  | . direct_declarator '(' ')'
  134 pointer: . '*'
  135        | . '*' type_qualifier
  136        | . '*' pointer

    IDENTIFIER  shift, and go to state 1
    '*'         shift, and go to state 20

    init_declarator_list  go to state 39
    init_declarator       go to state 40
    declarator            go to state 133
    direct_declarator     go to state 30
    pointer               go to state 31


state 108

  164 statement_list: statement .

    $default  reduce using rule 164 (statement_list)


state 109

  151 statement: labeled_statement .

    $default  reduce using rule 151 (statement)


state 110

  152 statement: compound_statement .

    $default  reduce using rule 152 (statement)


state 111

    1 primary_expression: . IDENTIFIER
    2                   | . HEX_CONSTANT
    3                   | . OCT_CONSTANT
    4                   | . DEC_CONSTANT
    5                   | . FLT_CONSTANT
    6                   | . STRING_LITERAL
    7                   | . '(' expression ')'
    8 postfix_expression: . primary_expression
    9                   | . postfix_expression '[' expression ']'
   10                   | . postfix_expression '(' ')'
   11                   | . postfix_expression '(' argument_expression_list ')'
   12                   | . postfix_expression '.' IDENTIFIER
   13                   | . postfix_expression PTR_OP IDENTIFIER
   14                   | . postfix_expression INC_OP
   15                   | . postfix_expression DEC_OP
   18 unary_expression: . postfix_expression
   19                 | . INC_OP unary_expression
   20                 | . DEC_OP unary_expression
   21                 | . '-' cast_expression
   22                 | . '&' cast_expression
   23                 | . '*' cast_expression
   24                 | . '~' cast_expression
   25                 | . '!' cast_expression
   26                 | . SIZEOF unary_expression
   27                 | . SIZEOF '(' CHAR ')'
   28                 | . SIZEOF '(' SHORT ')'
   29                 | . SIZEOF '(' INT ')'
   30                 | . SIZEOF '(' LONG ')'
   31                 | . SIZEOF '(' FLOAT ')'
   32 cast_expression: . unary_expression
   33 multiplicative_expression: . cast_expression
   34                          | . multiplicative_expression '*' cast_expression
   35                          | . multiplicative_expression '/' cast_expression
   36                          | . multiplicative_expression '%' cast_expression
   37 additive_expression: . multiplicative_expression
   38                    | . additive_expression '+' multiplicative_expression
   39                    | . additive_expression '-' multiplicative_expression
   40 shift_expression: . additive_expression
   41                 | . shift_expression LEFT_OP additive_expression
   42                 | . shift_expression RIGHT_OP additive_expression
   43 relational_expression: . shift_expression
   44                      | . relational_expression '<' shift_expression
   45                      | . relational_expression '>' shift_expression
   46                      | . relational_expression LE_OP shift_expression
   47                      | . relational_expression GE_OP shift_expression
   48 equality_expression: . relational_expression
   49                    | . equality_expression EQ_OP relational_expression
   50                    | . equality_expression NE_OP relational_expression
   51 and_expression: . equality_expression
   52               | . and_expression '&' equality_expression
   53 exclusive_or_expression: . and_expression
   54                        | . exclusive_or_expression '^' and_expression
   55 inclusive_or_expression: . exclusive_or_expression
   56                        | . inclusive_or_expression '|' exclusive_or_expression
   57 logical_and_expression: . inclusive_or_expression
   58                       | . logical_and_expression AND_OP inclusive_or_expression
   59 logical_or_expression: . logical_and_expression
   60                      | . logical_or_expression OR_OP logical_and_expression
   61 conditional_expression: . logical_or_expression
   62 assignment_expression: . conditional_expression
   63                      | . unary_expression assignment_operator assignment_expression
   75 expression: . assignment_expression
   76           | . expression ',' assignment_expression
   78 declaration: . declaration_specifiers init_declarator_list ';'
   79 declaration_specifiers: . storage_class_specifier
   80                       | . storage_class_specifier declaration_specifiers
   81                       | . type_specifier
   82                       | . type_specifier declaration_specifiers
   83                       | . type_qualifier
   84                       | . type_qualifier declaration_specifiers
   89 storage_class_specifier: . TYPEDEF
   90                        | . EXTERN
   91                        | . STATIC
   92                        | . AUTO
   93 type_specifier: . VOID
   94               | . CHAR
   95               | . SHORT
   96               | . INT
   97               | . LONG
   98               | . FLOAT
   99               | . DOUBLE
  100               | . SIGNED
  101               | . UNSIGNED
  102               | . struct_or_union_specifier
  103               | . enum_specifier
  104 struct_or_union_specifier: . struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  105                          | . struct_or_union IDENTIFIER
  106 struct_or_union: . STRUCT
  107                | . UNION
  117 enum_specifier: . ENUM '{' enumerator_list '}'
  118               | . ENUM IDENTIFIER '{' enumerator_list '}'
  119               | . ENUM IDENTIFIER
  124 type_qualifier: . CONST
  125               | . VOLATILE
  151 statement: . labeled_statement
  152          | . compound_statement
  153          | . expression_statement
  154          | . selection_statement
  155          | . iteration_statement
  156          | . jump_statement
  157 labeled_statement: . CASE constant_expression ':' statement
  158                  | . DEFAULT ':' statement
  159 compound_statement: . '{' '}'
  160                   | . '{' statement_list '}'
  161                   | . '{' declaration_list statement_list '}'
  161                   | '{' declaration_list . statement_list '}'
  163 declaration_list: declaration_list . declaration
  164 statement_list: . statement
  165               | . statement_list statement
  166 expression_statement: . ';'
  167                     | . expression ';'
  168 selection_statement: . IF '(' expression ')' statement
  169                    | . IF '(' expression ')' statement ELSE statement
  170                    | . SWITCH '(' expression ')' statement
  171 iteration_statement: . WHILE '(' expression ')' statement
  172                    | . DO statement WHILE '(' expression ')' ';'
  173                    | . FOR '(' expression_statement expression_statement expression ')' statement
  174 jump_statement: . CONTINUE ';'
  175               | . BREAK ';'
  176               | . RETURN ';'
  177               | . RETURN expression ';'

    IDENTIFIER      shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    OCT_CONSTANT    shift, and go to state 64
    DEC_CONSTANT    shift, and go to state 65
    FLT_CONSTANT    shift, and go to state 66
    STRING_LITERAL  shift, and go to state 67
    INC_OP          shift, and go to state 68
    DEC_OP          shift, and go to state 69
    SIZEOF          shift, and go to state 70
    TYPEDEF         shift, and go to state 2
    EXTERN          shift, and go to state 3
    STATIC          shift, and go to state 4
    AUTO            shift, and go to state 5
    CHAR            shift, and go to state 6
    SHORT           shift, and go to state 7
    INT             shift, and go to state 8
    LONG            shift, and go to state 9
    SIGNED          shift, and go to state 10
    UNSIGNED        shift, and go to state 11
    FLOAT           shift, and go to state 12
    DOUBLE          shift, and go to state 13
    CONST           shift, and go to state 14
    VOLATILE        shift, and go to state 15
    VOID            shift, and go to state 16
    STRUCT          shift, and go to state 17
    UNION           shift, and go to state 18
    ENUM            shift, and go to state 19
    CASE            shift, and go to state 71
    DEFAULT         shift, and go to state 72
    IF              shift, and go to state 73
    SWITCH          shift, and go to state 74
    WHILE           shift, and go to state 75
    DO              shift, and go to state 76
    FOR             shift, and go to state 77
    CONTINUE        shift, and go to state 78
    BREAK           shift, and go to state 79
    RETURN          shift, and go to state 80
    '('             shift, and go to state 81
    '-'             shift, and go to state 82
    '&'             shift, and go to state 83
    '*'             shift, and go to state 84
    '~'             shift, and go to state 85
    '!'             shift, and go to state 86
    ';'             shift, and go to state 87
    '{'             shift, and go to state 46

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    cast_expression            go to state 92
    multiplicative_expression  go to state 93
    additive_expression        go to state 94
    shift_expression           go to state 95
    relational_expression      go to state 96
    equality_expression        go to state 97
    and_expression             go to state 98
    exclusive_or_expression    go to state 99
    inclusive_or_expression    go to state 100
    logical_and_expression     go to state 101
    logical_or_expression      go to state 102
    conditional_expression     go to state 103
    assignment_expression      go to state 104
    expression                 go to state 105
    declaration                go to state 201
    declaration_specifiers     go to state 107
    storage_class_specifier    go to state 23
    type_specifier             go to state 24
    struct_or_union_specifier  go to state 25
    struct_or_union            go to state 26
    enum_specifier             go to state 27
    type_qualifier             go to state 28
    statement                  go to state 108
    labeled_statement          go to state 109
    compound_statement         go to state 110
    statement_list             go to state 202
    expression_statement       go to state 113
    selection_statement        go to state 114
    iteration_statement        go to state 115
    jump_statement             go to state 116


state 112

    1 primary_expression: . IDENTIFIER
    2                   | . HEX_CONSTANT
    3                   | . OCT_CONSTANT
    4                   | . DEC_CONSTANT
    5                   | . FLT_CONSTANT
    6                   | . STRING_LITERAL
    7                   | . '(' expression ')'
    8 postfix_expression: . primary_expression
    9                   | . postfix_expression '[' expression ']'
   10                   | . postfix_expression '(' ')'
   11                   | . postfix_expression '(' argument_expression_list ')'
   12                   | . postfix_expression '.' IDENTIFIER
   13                   | . postfix_expression PTR_OP IDENTIFIER
   14                   | . postfix_expression INC_OP
   15                   | . postfix_expression DEC_OP
   18 unary_expression: . postfix_expression
   19                 | . INC_OP unary_expression
   20                 | . DEC_OP unary_expression
   21                 | . '-' cast_expression
   22                 | . '&' cast_expression
   23                 | . '*' cast_expression
   24                 | . '~' cast_expression
   25                 | . '!' cast_expression
   26                 | . SIZEOF unary_expression
   27                 | . SIZEOF '(' CHAR ')'
   28                 | . SIZEOF '(' SHORT ')'
   29                 | . SIZEOF '(' INT ')'
   30                 | . SIZEOF '(' LONG ')'
   31                 | . SIZEOF '(' FLOAT ')'
   32 cast_expression: . unary_expression
   33 multiplicative_expression: . cast_expression
   34                          | . multiplicative_expression '*' cast_expression
   35                          | . multiplicative_expression '/' cast_expression
   36                          | . multiplicative_expression '%' cast_expression
   37 additive_expression: . multiplicative_expression
   38                    | . additive_expression '+' multiplicative_expression
   39                    | . additive_expression '-' multiplicative_expression
   40 shift_expression: . additive_expression
   41                 | . shift_expression LEFT_OP additive_expression
   42                 | . shift_expression RIGHT_OP additive_expression
   43 relational_expression: . shift_expression
   44                      | . relational_expression '<' shift_expression
   45                      | . relational_expression '>' shift_expression
   46                      | . relational_expression LE_OP shift_expression
   47                      | . relational_expression GE_OP shift_expression
   48 equality_expression: . relational_expression
   49                    | . equality_expression EQ_OP relational_expression
   50                    | . equality_expression NE_OP relational_expression
   51 and_expression: . equality_expression
   52               | . and_expression '&' equality_expression
   53 exclusive_or_expression: . and_expression
   54                        | . exclusive_or_expression '^' and_expression
   55 inclusive_or_expression: . exclusive_or_expression
   56                        | . inclusive_or_expression '|' exclusive_or_expression
   57 logical_and_expression: . inclusive_or_expression
   58                       | . logical_and_expression AND_OP inclusive_or_expression
   59 logical_or_expression: . logical_and_expression
   60                      | . logical_or_expression OR_OP logical_and_expression
   61 conditional_expression: . logical_or_expression
   62 assignment_expression: . conditional_expression
   63                      | . unary_expression assignment_operator assignment_expression
   75 expression: . assignment_expression
   76           | . expression ',' assignment_expression
  151 statement: . labeled_statement
  152          | . compound_statement
  153          | . expression_statement
  154          | . selection_statement
  155          | . iteration_statement
  156          | . jump_statement
  157 labeled_statement: . CASE constant_expression ':' statement
  158                  | . DEFAULT ':' statement
  159 compound_statement: . '{' '}'
  160                   | . '{' statement_list '}'
  160                   | '{' statement_list . '}'
  161                   | . '{' declaration_list statement_list '}'
  165 statement_list: statement_list . statement
  166 expression_statement: . ';'
  167                     | . expression ';'
  168 selection_statement: . IF '(' expression ')' statement
  169                    | . IF '(' expression ')' statement ELSE statement
  170                    | . SWITCH '(' expression ')' statement
  171 iteration_statement: . WHILE '(' expression ')' statement
  172                    | . DO statement WHILE '(' expression ')' ';'
  173                    | . FOR '(' expression_statement expression_statement expression ')' statement
  174 jump_statement: . CONTINUE ';'
  175               | . BREAK ';'
  176               | . RETURN ';'
  177               | . RETURN expression ';'

    IDENTIFIER      shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    OCT_CONSTANT    shift, and go to state 64
    DEC_CONSTANT    shift, and go to state 65
    FLT_CONSTANT    shift, and go to state 66
    STRING_LITERAL  shift, and go to state 67
    INC_OP          shift, and go to state 68
    DEC_OP          shift, and go to state 69
    SIZEOF          shift, and go to state 70
    CASE            shift, and go to state 71
    DEFAULT         shift, and go to state 72
    IF              shift, and go to state 73
    SWITCH          shift, and go to state 74
    WHILE           shift, and go to state 75
    DO              shift, and go to state 76
    FOR             shift, and go to state 77
    CONTINUE        shift, and go to state 78
    BREAK           shift, and go to state 79
    RETURN          shift, and go to state 80
    '('             shift, and go to state 81
    '-'             shift, and go to state 82
    '&'             shift, and go to state 83
    '*'             shift, and go to state 84
    '~'             shift, and go to state 85
    '!'             shift, and go to state 86
    ';'             shift, and go to state 87
    '{'             shift, and go to state 46
    '}'             shift, and go to state 203

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    cast_expression            go to state 92
    multiplicative_expression  go to state 93
    additive_expression        go to state 94
    shift_expression           go to state 95
    relational_expression      go to state 96
    equality_expression        go to state 97
    and_expression             go to state 98
    exclusive_or_expression    go to state 99
    inclusive_or_expression    go to state 100
    logical_and_expression     go to state 101
    logical_or_expression      go to state 102
    conditional_expression     go to state 103
    assignment_expression      go to state 104
    expression                 go to state 105
    statement                  go to state 204
    labeled_statement          go to state 109
    compound_statement         go to state 110
    expression_statement       go to state 113
    selection_statement        go to state 114
    iteration_statement        go to state 115
    jump_statement             go to state 116


state 113

  153 statement: expression_statement .

    $default  reduce using rule 153 (statement)


state 114

  154 statement: selection_statement .

    $default  reduce using rule 154 (statement)


state 115

  155 statement: iteration_statement .

    $default  reduce using rule 155 (statement)


state 116

  156 statement: jump_statement .

    $default  reduce using rule 156 (statement)


state 117

  143 identifier_list: IDENTIFIER .

    $default  reduce using rule 143 (identifier_list)


state 118

  133 direct_declarator: direct_declarator '(' ')' .

    $default  reduce using rule 133 (direct_declarator)


state 119

  126 declarator: . pointer direct_declarator
  127           | . direct_declarator
  128 direct_declarator: . IDENTIFIER
  129                  | . direct_declarator '[' constant_expression ']'
  130                  | . direct_declarator '[' ']'
  131                  | . direct_declarator '(' parameter_type_list ')'
  132                  | . direct_declarator '(' identifier_list ')'
  133                  | . direct_declarator '(' ')'
  134 pointer: . '*'
  135        | . '*' type_qualifier
  136        | . '*' pointer
  140 parameter_declaration: declaration_specifiers . declarator
  141                      | declaration_specifiers . abstract_declarator
  142                      | declaration_specifiers .  [')', ',']
  145 abstract_declarator: . pointer

    IDENTIFIER  shift, and go to state 1
    '*'         shift, and go to state 20

    $default  reduce using rule 142 (parameter_declaration)

    declarator           go to state 205
    direct_declarator    go to state 30
    pointer              go to state 206
    abstract_declarator  go to state 207


state 120

  131 direct_declarator: direct_declarator '(' parameter_type_list . ')'

    ')'  shift, and go to state 208


state 121

  137 parameter_type_list: parameter_list .  [')']
  139 parameter_list: parameter_list . ',' parameter_declaration

    ','  shift, and go to state 209

    $default  reduce using rule 137 (parameter_type_list)


state 122

  138 parameter_list: parameter_declaration .

    $default  reduce using rule 138 (parameter_list)


state 123

  132 direct_declarator: direct_declarator '(' identifier_list . ')'
  144 identifier_list: identifier_list . ',' IDENTIFIER

    ')'  shift, and go to state 210
    ','  shift, and go to state 211


state 124

  130 direct_declarator: direct_declarator '[' ']' .

    $default  reduce using rule 130 (direct_declarator)


state 125

   32 cast_expression: unary_expression .

    $default  reduce using rule 32 (cast_expression)


state 126

   77 constant_expression: conditional_expression .

    $default  reduce using rule 77 (constant_expression)


state 127

  129 direct_declarator: direct_declarator '[' constant_expression . ']'

    ']'  shift, and go to state 212


state 128

  118 enum_specifier: ENUM IDENTIFIER '{' enumerator_list . '}'
  121 enumerator_list: enumerator_list . ',' enumerator

    ','  shift, and go to state 130
    '}'  shift, and go to state 213


state 129

    1 primary_expression: . IDENTIFIER
    2                   | . HEX_CONSTANT
    3                   | . OCT_CONSTANT
    4                   | . DEC_CONSTANT
    5                   | . FLT_CONSTANT
    6                   | . STRING_LITERAL
    7                   | . '(' expression ')'
    8 postfix_expression: . primary_expression
    9                   | . postfix_expression '[' expression ']'
   10                   | . postfix_expression '(' ')'
   11                   | . postfix_expression '(' argument_expression_list ')'
   12                   | . postfix_expression '.' IDENTIFIER
   13                   | . postfix_expression PTR_OP IDENTIFIER
   14                   | . postfix_expression INC_OP
   15                   | . postfix_expression DEC_OP
   18 unary_expression: . postfix_expression
   19                 | . INC_OP unary_expression
   20                 | . DEC_OP unary_expression
   21                 | . '-' cast_expression
   22                 | . '&' cast_expression
   23                 | . '*' cast_expression
   24                 | . '~' cast_expression
   25                 | . '!' cast_expression
   26                 | . SIZEOF unary_expression
   27                 | . SIZEOF '(' CHAR ')'
   28                 | . SIZEOF '(' SHORT ')'
   29                 | . SIZEOF '(' INT ')'
   30                 | . SIZEOF '(' LONG ')'
   31                 | . SIZEOF '(' FLOAT ')'
   32 cast_expression: . unary_expression
   33 multiplicative_expression: . cast_expression
   34                          | . multiplicative_expression '*' cast_expression
   35                          | . multiplicative_expression '/' cast_expression
   36                          | . multiplicative_expression '%' cast_expression
   37 additive_expression: . multiplicative_expression
   38                    | . additive_expression '+' multiplicative_expression
   39                    | . additive_expression '-' multiplicative_expression
   40 shift_expression: . additive_expression
   41                 | . shift_expression LEFT_OP additive_expression
   42                 | . shift_expression RIGHT_OP additive_expression
   43 relational_expression: . shift_expression
   44                      | . relational_expression '<' shift_expression
   45                      | . relational_expression '>' shift_expression
   46                      | . relational_expression LE_OP shift_expression
   47                      | . relational_expression GE_OP shift_expression
   48 equality_expression: . relational_expression
   49                    | . equality_expression EQ_OP relational_expression
   50                    | . equality_expression NE_OP relational_expression
   51 and_expression: . equality_expression
   52               | . and_expression '&' equality_expression
   53 exclusive_or_expression: . and_expression
   54                        | . exclusive_or_expression '^' and_expression
   55 inclusive_or_expression: . exclusive_or_expression
   56                        | . inclusive_or_expression '|' exclusive_or_expression
   57 logical_and_expression: . inclusive_or_expression
   58                       | . logical_and_expression AND_OP inclusive_or_expression
   59 logical_or_expression: . logical_and_expression
   60                      | . logical_or_expression OR_OP logical_and_expression
   61 conditional_expression: . logical_or_expression
   77 constant_expression: . conditional_expression
  123 enumerator: IDENTIFIER ASSIGN_OP . constant_expression

    IDENTIFIER      shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    OCT_CONSTANT    shift, and go to state 64
    DEC_CONSTANT    shift, and go to state 65
    FLT_CONSTANT    shift, and go to state 66
    STRING_LITERAL  shift, and go to state 67
    INC_OP          shift, and go to state 68
    DEC_OP          shift, and go to state 69
    SIZEOF          shift, and go to state 70
    '('             shift, and go to state 81
    '-'             shift, and go to state 82
    '&'             shift, and go to state 83
    '*'             shift, and go to state 84
    '~'             shift, and go to state 85
    '!'             shift, and go to state 86

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 125
    cast_expression            go to state 92
    multiplicative_expression  go to state 93
    additive_expression        go to state 94
    shift_expression           go to state 95
    relational_expression      go to state 96
    equality_expression        go to state 97
    and_expression             go to state 98
    exclusive_or_expression    go to state 99
    inclusive_or_expression    go to state 100
    logical_and_expression     go to state 101
    logical_or_expression      go to state 102
    conditional_expression     go to state 126
    constant_expression        go to state 214


state 130

  121 enumerator_list: enumerator_list ',' . enumerator
  122 enumerator: . IDENTIFIER
  123           | . IDENTIFIER ASSIGN_OP constant_expression

    IDENTIFIER  shift, and go to state 54

    enumerator  go to state 215


state 131

  117 enum_specifier: ENUM '{' enumerator_list '}' .

    $default  reduce using rule 117 (enum_specifier)


state 132

   86 init_declarator_list: init_declarator_list ',' init_declarator .

    $default  reduce using rule 86 (init_declarator_list)


state 133

   87 init_declarator: declarator .  [',', ';']
   88                | declarator . ASSIGN_OP initializer

    ASSIGN_OP  shift, and go to state 59

    $default  reduce using rule 87 (init_declarator)


state 134

    1 primary_expression: . IDENTIFIER
    2                   | . HEX_CONSTANT
    3                   | . OCT_CONSTANT
    4                   | . DEC_CONSTANT
    5                   | . FLT_CONSTANT
    6                   | . STRING_LITERAL
    7                   | . '(' expression ')'
    8 postfix_expression: . primary_expression
    9                   | . postfix_expression '[' expression ']'
   10                   | . postfix_expression '(' ')'
   11                   | . postfix_expression '(' argument_expression_list ')'
   12                   | . postfix_expression '.' IDENTIFIER
   13                   | . postfix_expression PTR_OP IDENTIFIER
   14                   | . postfix_expression INC_OP
   15                   | . postfix_expression DEC_OP
   18 unary_expression: . postfix_expression
   19                 | . INC_OP unary_expression
   20                 | . DEC_OP unary_expression
   21                 | . '-' cast_expression
   22                 | . '&' cast_expression
   23                 | . '*' cast_expression
   24                 | . '~' cast_expression
   25                 | . '!' cast_expression
   26                 | . SIZEOF unary_expression
   27                 | . SIZEOF '(' CHAR ')'
   28                 | . SIZEOF '(' SHORT ')'
   29                 | . SIZEOF '(' INT ')'
   30                 | . SIZEOF '(' LONG ')'
   31                 | . SIZEOF '(' FLOAT ')'
   32 cast_expression: . unary_expression
   33 multiplicative_expression: . cast_expression
   34                          | . multiplicative_expression '*' cast_expression
   35                          | . multiplicative_expression '/' cast_expression
   36                          | . multiplicative_expression '%' cast_expression
   37 additive_expression: . multiplicative_expression
   38                    | . additive_expression '+' multiplicative_expression
   39                    | . additive_expression '-' multiplicative_expression
   40 shift_expression: . additive_expression
   41                 | . shift_expression LEFT_OP additive_expression
   42                 | . shift_expression RIGHT_OP additive_expression
   43 relational_expression: . shift_expression
   44                      | . relational_expression '<' shift_expression
   45                      | . relational_expression '>' shift_expression
   46                      | . relational_expression LE_OP shift_expression
   47                      | . relational_expression GE_OP shift_expression
   48 equality_expression: . relational_expression
   49                    | . equality_expression EQ_OP relational_expression
   50                    | . equality_expression NE_OP relational_expression
   51 and_expression: . equality_expression
   52               | . and_expression '&' equality_expression
   53 exclusive_or_expression: . and_expression
   54                        | . exclusive_or_expression '^' and_expression
   55 inclusive_or_expression: . exclusive_or_expression
   56                        | . inclusive_or_expression '|' exclusive_or_expression
   57 logical_and_expression: . inclusive_or_expression
   58                       | . logical_and_expression AND_OP inclusive_or_expression
   59 logical_or_expression: . logical_and_expression
   60                      | . logical_or_expression OR_OP logical_and_expression
   61 conditional_expression: . logical_or_expression
   62 assignment_expression: . conditional_expression
   63                      | . unary_expression assignment_operator assignment_expression
  146 initializer: . assignment_expression
  147            | . '{' initializer_list '}'
  147            | '{' . initializer_list '}'
  148            | . '{' initializer_list ',' '}'
  148            | '{' . initializer_list ',' '}'
  149 initializer_list: . initializer
  150                 | . initializer_list ',' initializer

    IDENTIFIER      shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    OCT_CONSTANT    shift, and go to state 64
    DEC_CONSTANT    shift, and go to state 65
    FLT_CONSTANT    shift, and go to state 66
    STRING_LITERAL  shift, and go to state 67
    INC_OP          shift, and go to state 68
    DEC_OP          shift, and go to state 69
    SIZEOF          shift, and go to state 70
    '('             shift, and go to state 81
    '-'             shift, and go to state 82
    '&'             shift, and go to state 83
    '*'             shift, and go to state 84
    '~'             shift, and go to state 85
    '!'             shift, and go to state 86
    '{'             shift, and go to state 134

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    cast_expression            go to state 92
    multiplicative_expression  go to state 93
    additive_expression        go to state 94
    shift_expression           go to state 95
    relational_expression      go to state 96
    equality_expression        go to state 97
    and_expression             go to state 98
    exclusive_or_expression    go to state 99
    inclusive_or_expression    go to state 100
    logical_and_expression     go to state 101
    logical_or_expression      go to state 102
    conditional_expression     go to state 103
    assignment_expression      go to state 135
    initializer                go to state 216
    initializer_list           go to state 217


state 135

  146 initializer: assignment_expression .

    $default  reduce using rule 146 (initializer)


state 136

   88 init_declarator: declarator ASSIGN_OP initializer .

    $default  reduce using rule 88 (init_declarator)


state 137

   93 type_specifier: . VOID
   94               | . CHAR
   95               | . SHORT
   96               | . INT
   97               | . LONG
   98               | . FLOAT
   99               | . DOUBLE
  100               | . SIGNED
  101               | . UNSIGNED
  102               | . struct_or_union_specifier
  103               | . enum_specifier
  104 struct_or_union_specifier: . struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  105                          | . struct_or_union IDENTIFIER
  106 struct_or_union: . STRUCT
  107                | . UNION
  111 specifier_qualifier_list: . type_specifier specifier_qualifier_list
  111                         | type_specifier . specifier_qualifier_list
  112                         | . type_specifier  [IDENTIFIER, '*']
  112                         | type_specifier .  [IDENTIFIER, '*']
  113                         | . type_qualifier specifier_qualifier_list
  114                         | . type_qualifier
  117 enum_specifier: . ENUM '{' enumerator_list '}'
  118               | . ENUM IDENTIFIER '{' enumerator_list '}'
  119               | . ENUM IDENTIFIER
  124 type_qualifier: . CONST
  125               | . VOLATILE

    CHAR      shift, and go to state 6
    SHORT     shift, and go to state 7
    INT       shift, and go to state 8
    LONG      shift, and go to state 9
    SIGNED    shift, and go to state 10
    UNSIGNED  shift, and go to state 11
    FLOAT     shift, and go to state 12
    DOUBLE    shift, and go to state 13
    CONST     shift, and go to state 14
    VOLATILE  shift, and go to state 15
    VOID      shift, and go to state 16
    STRUCT    shift, and go to state 17
    UNION     shift, and go to state 18
    ENUM      shift, and go to state 19

    $default  reduce using rule 112 (specifier_qualifier_list)

    type_specifier             go to state 137
    struct_or_union_specifier  go to state 25
    struct_or_union            go to state 26
    specifier_qualifier_list   go to state 218
    enum_specifier             go to state 27
    type_qualifier             go to state 141


state 138

   93 type_specifier: . VOID
   94               | . CHAR
   95               | . SHORT
   96               | . INT
   97               | . LONG
   98               | . FLOAT
   99               | . DOUBLE
  100               | . SIGNED
  101               | . UNSIGNED
  102               | . struct_or_union_specifier
  103               | . enum_specifier
  104 struct_or_union_specifier: . struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  104                          | struct_or_union IDENTIFIER '{' struct_declaration_list . '}'
  105                          | . struct_or_union IDENTIFIER
  106 struct_or_union: . STRUCT
  107                | . UNION
  109 struct_declaration_list: struct_declaration_list . struct_declaration
  110 struct_declaration: . specifier_qualifier_list struct_declarator_list ';'
  111 specifier_qualifier_list: . type_specifier specifier_qualifier_list
  112                         | . type_specifier
  113                         | . type_qualifier specifier_qualifier_list
  114                         | . type_qualifier
  117 enum_specifier: . ENUM '{' enumerator_list '}'
  118               | . ENUM IDENTIFIER '{' enumerator_list '}'
  119               | . ENUM IDENTIFIER
  124 type_qualifier: . CONST
  125               | . VOLATILE

    CHAR      shift, and go to state 6
    SHORT     shift, and go to state 7
    INT       shift, and go to state 8
    LONG      shift, and go to state 9
    SIGNED    shift, and go to state 10
    UNSIGNED  shift, and go to state 11
    FLOAT     shift, and go to state 12
    DOUBLE    shift, and go to state 13
    CONST     shift, and go to state 14
    VOLATILE  shift, and go to state 15
    VOID      shift, and go to state 16
    STRUCT    shift, and go to state 17
    UNION     shift, and go to state 18
    ENUM      shift, and go to state 19
    '}'       shift, and go to state 219

    type_specifier             go to state 137
    struct_or_union_specifier  go to state 25
    struct_or_union            go to state 26
    struct_declaration         go to state 220
    specifier_qualifier_list   go to state 140
    enum_specifier             go to state 27
    type_qualifier             go to state 141


state 139

  108 struct_declaration_list: struct_declaration .

    $default  reduce using rule 108 (struct_declaration_list)


state 140

  110 struct_declaration: specifier_qualifier_list . struct_declarator_list ';'
  115 struct_declarator_list: . struct_declarator
  116 struct_declarator: . declarator
  126 declarator: . pointer direct_declarator
  127           | . direct_declarator
  128 direct_declarator: . IDENTIFIER
  129                  | . direct_declarator '[' constant_expression ']'
  130                  | . direct_declarator '[' ']'
  131                  | . direct_declarator '(' parameter_type_list ')'
  132                  | . direct_declarator '(' identifier_list ')'
  133                  | . direct_declarator '(' ')'
  134 pointer: . '*'
  135        | . '*' type_qualifier
  136        | . '*' pointer

    IDENTIFIER  shift, and go to state 1
    '*'         shift, and go to state 20

    struct_declarator_list  go to state 221
    struct_declarator       go to state 222
    declarator              go to state 223
    direct_declarator       go to state 30
    pointer                 go to state 31


state 141

   93 type_specifier: . VOID
   94               | . CHAR
   95               | . SHORT
   96               | . INT
   97               | . LONG
   98               | . FLOAT
   99               | . DOUBLE
  100               | . SIGNED
  101               | . UNSIGNED
  102               | . struct_or_union_specifier
  103               | . enum_specifier
  104 struct_or_union_specifier: . struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  105                          | . struct_or_union IDENTIFIER
  106 struct_or_union: . STRUCT
  107                | . UNION
  111 specifier_qualifier_list: . type_specifier specifier_qualifier_list
  112                         | . type_specifier
  113                         | . type_qualifier specifier_qualifier_list
  113                         | type_qualifier . specifier_qualifier_list
  114                         | . type_qualifier  [IDENTIFIER, '*']
  114                         | type_qualifier .  [IDENTIFIER, '*']
  117 enum_specifier: . ENUM '{' enumerator_list '}'
  118               | . ENUM IDENTIFIER '{' enumerator_list '}'
  119               | . ENUM IDENTIFIER
  124 type_qualifier: . CONST
  125               | . VOLATILE

    CHAR      shift, and go to state 6
    SHORT     shift, and go to state 7
    INT       shift, and go to state 8
    LONG      shift, and go to state 9
    SIGNED    shift, and go to state 10
    UNSIGNED  shift, and go to state 11
    FLOAT     shift, and go to state 12
    DOUBLE    shift, and go to state 13
    CONST     shift, and go to state 14
    VOLATILE  shift, and go to state 15
    VOID      shift, and go to state 16
    STRUCT    shift, and go to state 17
    UNION     shift, and go to state 18
    ENUM      shift, and go to state 19

    $default  reduce using rule 114 (specifier_qualifier_list)

    type_specifier             go to state 137
    struct_or_union_specifier  go to state 25
    struct_or_union            go to state 26
    specifier_qualifier_list   go to state 224
    enum_specifier             go to state 27
    type_qualifier             go to state 141


state 142

   19 unary_expression: INC_OP unary_expression .

    $default  reduce using rule 19 (unary_expression)


state 143

   20 unary_expression: DEC_OP unary_expression .

    $default  reduce using rule 20 (unary_expression)


state 144

    1 primary_expression: . IDENTIFIER
    2                   | . HEX_CONSTANT
    3                   | . OCT_CONSTANT
    4                   | . DEC_CONSTANT
    5                   | . FLT_CONSTANT
    6                   | . STRING_LITERAL
    7                   | . '(' expression ')'
    7                   | '(' . expression ')'
    8 postfix_expression: . primary_expression
    9                   | . postfix_expression '[' expression ']'
   10                   | . postfix_expression '(' ')'
   11                   | . postfix_expression '(' argument_expression_list ')'
   12                   | . postfix_expression '.' IDENTIFIER
   13                   | . postfix_expression PTR_OP IDENTIFIER
   14                   | . postfix_expression INC_OP
   15                   | . postfix_expression DEC_OP
   18 unary_expression: . postfix_expression
   19                 | . INC_OP unary_expression
   20                 | . DEC_OP unary_expression
   21                 | . '-' cast_expression
   22                 | . '&' cast_expression
   23                 | . '*' cast_expression
   24                 | . '~' cast_expression
   25                 | . '!' cast_expression
   26                 | . SIZEOF unary_expression
   27                 | . SIZEOF '(' CHAR ')'
   27                 | SIZEOF '(' . CHAR ')'
   28                 | . SIZEOF '(' SHORT ')'
   28                 | SIZEOF '(' . SHORT ')'
   29                 | . SIZEOF '(' INT ')'
   29                 | SIZEOF '(' . INT ')'
   30                 | . SIZEOF '(' LONG ')'
   30                 | SIZEOF '(' . LONG ')'
   31                 | . SIZEOF '(' FLOAT ')'
   31                 | SIZEOF '(' . FLOAT ')'
   32 cast_expression: . unary_expression
   33 multiplicative_expression: . cast_expression
   34                          | . multiplicative_expression '*' cast_expression
   35                          | . multiplicative_expression '/' cast_expression
   36                          | . multiplicative_expression '%' cast_expression
   37 additive_expression: . multiplicative_expression
   38                    | . additive_expression '+' multiplicative_expression
   39                    | . additive_expression '-' multiplicative_expression
   40 shift_expression: . additive_expression
   41                 | . shift_expression LEFT_OP additive_expression
   42                 | . shift_expression RIGHT_OP additive_expression
   43 relational_expression: . shift_expression
   44                      | . relational_expression '<' shift_expression
   45                      | . relational_expression '>' shift_expression
   46                      | . relational_expression LE_OP shift_expression
   47                      | . relational_expression GE_OP shift_expression
   48 equality_expression: . relational_expression
   49                    | . equality_expression EQ_OP relational_expression
   50                    | . equality_expression NE_OP relational_expression
   51 and_expression: . equality_expression
   52               | . and_expression '&' equality_expression
   53 exclusive_or_expression: . and_expression
   54                        | . exclusive_or_expression '^' and_expression
   55 inclusive_or_expression: . exclusive_or_expression
   56                        | . inclusive_or_expression '|' exclusive_or_expression
   57 logical_and_expression: . inclusive_or_expression
   58                       | . logical_and_expression AND_OP inclusive_or_expression
   59 logical_or_expression: . logical_and_expression
   60                      | . logical_or_expression OR_OP logical_and_expression
   61 conditional_expression: . logical_or_expression
   62 assignment_expression: . conditional_expression
   63                      | . unary_expression assignment_operator assignment_expression
   75 expression: . assignment_expression
   76           | . expression ',' assignment_expression

    IDENTIFIER      shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    OCT_CONSTANT    shift, and go to state 64
    DEC_CONSTANT    shift, and go to state 65
    FLT_CONSTANT    shift, and go to state 66
    STRING_LITERAL  shift, and go to state 67
    INC_OP          shift, and go to state 68
    DEC_OP          shift, and go to state 69
    SIZEOF          shift, and go to state 70
    CHAR            shift, and go to state 225
    SHORT           shift, and go to state 226
    INT             shift, and go to state 227
    LONG            shift, and go to state 228
    FLOAT           shift, and go to state 229
    '('             shift, and go to state 81
    '-'             shift, and go to state 82
    '&'             shift, and go to state 83
    '*'             shift, and go to state 84
    '~'             shift, and go to state 85
    '!'             shift, and go to state 86

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    cast_expression            go to state 92
    multiplicative_expression  go to state 93
    additive_expression        go to state 94
    shift_expression           go to state 95
    relational_expression      go to state 96
    equality_expression        go to state 97
    and_expression             go to state 98
    exclusive_or_expression    go to state 99
    inclusive_or_expression    go to state 100
    logical_and_expression     go to state 101
    logical_or_expression      go to state 102
    conditional_expression     go to state 103
    assignment_expression      go to state 104
    expression                 go to state 157


state 145

   26 unary_expression: SIZEOF unary_expression .

    $default  reduce using rule 26 (unary_expression)


state 146

  157 labeled_statement: CASE constant_expression . ':' statement

    ':'  shift, and go to state 230


state 147

    1 primary_expression: . IDENTIFIER
    2                   | . HEX_CONSTANT
    3                   | . OCT_CONSTANT
    4                   | . DEC_CONSTANT
    5                   | . FLT_CONSTANT
    6                   | . STRING_LITERAL
    7                   | . '(' expression ')'
    8 postfix_expression: . primary_expression
    9                   | . postfix_expression '[' expression ']'
   10                   | . postfix_expression '(' ')'
   11                   | . postfix_expression '(' argument_expression_list ')'
   12                   | . postfix_expression '.' IDENTIFIER
   13                   | . postfix_expression PTR_OP IDENTIFIER
   14                   | . postfix_expression INC_OP
   15                   | . postfix_expression DEC_OP
   18 unary_expression: . postfix_expression
   19                 | . INC_OP unary_expression
   20                 | . DEC_OP unary_expression
   21                 | . '-' cast_expression
   22                 | . '&' cast_expression
   23                 | . '*' cast_expression
   24                 | . '~' cast_expression
   25                 | . '!' cast_expression
   26                 | . SIZEOF unary_expression
   27                 | . SIZEOF '(' CHAR ')'
   28                 | . SIZEOF '(' SHORT ')'
   29                 | . SIZEOF '(' INT ')'
   30                 | . SIZEOF '(' LONG ')'
   31                 | . SIZEOF '(' FLOAT ')'
   32 cast_expression: . unary_expression
   33 multiplicative_expression: . cast_expression
   34                          | . multiplicative_expression '*' cast_expression
   35                          | . multiplicative_expression '/' cast_expression
   36                          | . multiplicative_expression '%' cast_expression
   37 additive_expression: . multiplicative_expression
   38                    | . additive_expression '+' multiplicative_expression
   39                    | . additive_expression '-' multiplicative_expression
   40 shift_expression: . additive_expression
   41                 | . shift_expression LEFT_OP additive_expression
   42                 | . shift_expression RIGHT_OP additive_expression
   43 relational_expression: . shift_expression
   44                      | . relational_expression '<' shift_expression
   45                      | . relational_expression '>' shift_expression
   46                      | . relational_expression LE_OP shift_expression
   47                      | . relational_expression GE_OP shift_expression
   48 equality_expression: . relational_expression
   49                    | . equality_expression EQ_OP relational_expression
   50                    | . equality_expression NE_OP relational_expression
   51 and_expression: . equality_expression
   52               | . and_expression '&' equality_expression
   53 exclusive_or_expression: . and_expression
   54                        | . exclusive_or_expression '^' and_expression
   55 inclusive_or_expression: . exclusive_or_expression
   56                        | . inclusive_or_expression '|' exclusive_or_expression
   57 logical_and_expression: . inclusive_or_expression
   58                       | . logical_and_expression AND_OP inclusive_or_expression
   59 logical_or_expression: . logical_and_expression
   60                      | . logical_or_expression OR_OP logical_and_expression
   61 conditional_expression: . logical_or_expression
   62 assignment_expression: . conditional_expression
   63                      | . unary_expression assignment_operator assignment_expression
   75 expression: . assignment_expression
   76           | . expression ',' assignment_expression
  151 statement: . labeled_statement
  152          | . compound_statement
  153          | . expression_statement
  154          | . selection_statement
  155          | . iteration_statement
  156          | . jump_statement
  157 labeled_statement: . CASE constant_expression ':' statement
  158                  | . DEFAULT ':' statement
  158                  | DEFAULT ':' . statement
  159 compound_statement: . '{' '}'
  160                   | . '{' statement_list '}'
  161                   | . '{' declaration_list statement_list '}'
  166 expression_statement: . ';'
  167                     | . expression ';'
  168 selection_statement: . IF '(' expression ')' statement
  169                    | . IF '(' expression ')' statement ELSE statement
  170                    | . SWITCH '(' expression ')' statement
  171 iteration_statement: . WHILE '(' expression ')' statement
  172                    | . DO statement WHILE '(' expression ')' ';'
  173                    | . FOR '(' expression_statement expression_statement expression ')' statement
  174 jump_statement: . CONTINUE ';'
  175               | . BREAK ';'
  176               | . RETURN ';'
  177               | . RETURN expression ';'

    IDENTIFIER      shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    OCT_CONSTANT    shift, and go to state 64
    DEC_CONSTANT    shift, and go to state 65
    FLT_CONSTANT    shift, and go to state 66
    STRING_LITERAL  shift, and go to state 67
    INC_OP          shift, and go to state 68
    DEC_OP          shift, and go to state 69
    SIZEOF          shift, and go to state 70
    CASE            shift, and go to state 71
    DEFAULT         shift, and go to state 72
    IF              shift, and go to state 73
    SWITCH          shift, and go to state 74
    WHILE           shift, and go to state 75
    DO              shift, and go to state 76
    FOR             shift, and go to state 77
    CONTINUE        shift, and go to state 78
    BREAK           shift, and go to state 79
    RETURN          shift, and go to state 80
    '('             shift, and go to state 81
    '-'             shift, and go to state 82
    '&'             shift, and go to state 83
    '*'             shift, and go to state 84
    '~'             shift, and go to state 85
    '!'             shift, and go to state 86
    ';'             shift, and go to state 87
    '{'             shift, and go to state 46

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    cast_expression            go to state 92
    multiplicative_expression  go to state 93
    additive_expression        go to state 94
    shift_expression           go to state 95
    relational_expression      go to state 96
    equality_expression        go to state 97
    and_expression             go to state 98
    exclusive_or_expression    go to state 99
    inclusive_or_expression    go to state 100
    logical_and_expression     go to state 101
    logical_or_expression      go to state 102
    conditional_expression     go to state 103
    assignment_expression      go to state 104
    expression                 go to state 105
    statement                  go to state 231
    labeled_statement          go to state 109
    compound_statement         go to state 110
    expression_statement       go to state 113
    selection_statement        go to state 114
    iteration_statement        go to state 115
    jump_statement             go to state 116


state 148

    1 primary_expression: . IDENTIFIER
    2                   | . HEX_CONSTANT
    3                   | . OCT_CONSTANT
    4                   | . DEC_CONSTANT
    5                   | . FLT_CONSTANT
    6                   | . STRING_LITERAL
    7                   | . '(' expression ')'
    8 postfix_expression: . primary_expression
    9                   | . postfix_expression '[' expression ']'
   10                   | . postfix_expression '(' ')'
   11                   | . postfix_expression '(' argument_expression_list ')'
   12                   | . postfix_expression '.' IDENTIFIER
   13                   | . postfix_expression PTR_OP IDENTIFIER
   14                   | . postfix_expression INC_OP
   15                   | . postfix_expression DEC_OP
   18 unary_expression: . postfix_expression
   19                 | . INC_OP unary_expression
   20                 | . DEC_OP unary_expression
   21                 | . '-' cast_expression
   22                 | . '&' cast_expression
   23                 | . '*' cast_expression
   24                 | . '~' cast_expression
   25                 | . '!' cast_expression
   26                 | . SIZEOF unary_expression
   27                 | . SIZEOF '(' CHAR ')'
   28                 | . SIZEOF '(' SHORT ')'
   29                 | . SIZEOF '(' INT ')'
   30                 | . SIZEOF '(' LONG ')'
   31                 | . SIZEOF '(' FLOAT ')'
   32 cast_expression: . unary_expression
   33 multiplicative_expression: . cast_expression
   34                          | . multiplicative_expression '*' cast_expression
   35                          | . multiplicative_expression '/' cast_expression
   36                          | . multiplicative_expression '%' cast_expression
   37 additive_expression: . multiplicative_expression
   38                    | . additive_expression '+' multiplicative_expression
   39                    | . additive_expression '-' multiplicative_expression
   40 shift_expression: . additive_expression
   41                 | . shift_expression LEFT_OP additive_expression
   42                 | . shift_expression RIGHT_OP additive_expression
   43 relational_expression: . shift_expression
   44                      | . relational_expression '<' shift_expression
   45                      | . relational_expression '>' shift_expression
   46                      | . relational_expression LE_OP shift_expression
   47                      | . relational_expression GE_OP shift_expression
   48 equality_expression: . relational_expression
   49                    | . equality_expression EQ_OP relational_expression
   50                    | . equality_expression NE_OP relational_expression
   51 and_expression: . equality_expression
   52               | . and_expression '&' equality_expression
   53 exclusive_or_expression: . and_expression
   54                        | . exclusive_or_expression '^' and_expression
   55 inclusive_or_expression: . exclusive_or_expression
   56                        | . inclusive_or_expression '|' exclusive_or_expression
   57 logical_and_expression: . inclusive_or_expression
   58                       | . logical_and_expression AND_OP inclusive_or_expression
   59 logical_or_expression: . logical_and_expression
   60                      | . logical_or_expression OR_OP logical_and_expression
   61 conditional_expression: . logical_or_expression
   62 assignment_expression: . conditional_expression
   63                      | . unary_expression assignment_operator assignment_expression
   75 expression: . assignment_expression
   76           | . expression ',' assignment_expression
  168 selection_statement: IF '(' . expression ')' statement
  169                    | IF '(' . expression ')' statement ELSE statement

    IDENTIFIER      shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    OCT_CONSTANT    shift, and go to state 64
    DEC_CONSTANT    shift, and go to state 65
    FLT_CONSTANT    shift, and go to state 66
    STRING_LITERAL  shift, and go to state 67
    INC_OP          shift, and go to state 68
    DEC_OP          shift, and go to state 69
    SIZEOF          shift, and go to state 70
    '('             shift, and go to state 81
    '-'             shift, and go to state 82
    '&'             shift, and go to state 83
    '*'             shift, and go to state 84
    '~'             shift, and go to state 85
    '!'             shift, and go to state 86

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    cast_expression            go to state 92
    multiplicative_expression  go to state 93
    additive_expression        go to state 94
    shift_expression           go to state 95
    relational_expression      go to state 96
    equality_expression        go to state 97
    and_expression             go to state 98
    exclusive_or_expression    go to state 99
    inclusive_or_expression    go to state 100
    logical_and_expression     go to state 101
    logical_or_expression      go to state 102
    conditional_expression     go to state 103
    assignment_expression      go to state 104
    expression                 go to state 232


state 149

    1 primary_expression: . IDENTIFIER
    2                   | . HEX_CONSTANT
    3                   | . OCT_CONSTANT
    4                   | . DEC_CONSTANT
    5                   | . FLT_CONSTANT
    6                   | . STRING_LITERAL
    7                   | . '(' expression ')'
    8 postfix_expression: . primary_expression
    9                   | . postfix_expression '[' expression ']'
   10                   | . postfix_expression '(' ')'
   11                   | . postfix_expression '(' argument_expression_list ')'
   12                   | . postfix_expression '.' IDENTIFIER
   13                   | . postfix_expression PTR_OP IDENTIFIER
   14                   | . postfix_expression INC_OP
   15                   | . postfix_expression DEC_OP
   18 unary_expression: . postfix_expression
   19                 | . INC_OP unary_expression
   20                 | . DEC_OP unary_expression
   21                 | . '-' cast_expression
   22                 | . '&' cast_expression
   23                 | . '*' cast_expression
   24                 | . '~' cast_expression
   25                 | . '!' cast_expression
   26                 | . SIZEOF unary_expression
   27                 | . SIZEOF '(' CHAR ')'
   28                 | . SIZEOF '(' SHORT ')'
   29                 | . SIZEOF '(' INT ')'
   30                 | . SIZEOF '(' LONG ')'
   31                 | . SIZEOF '(' FLOAT ')'
   32 cast_expression: . unary_expression
   33 multiplicative_expression: . cast_expression
   34                          | . multiplicative_expression '*' cast_expression
   35                          | . multiplicative_expression '/' cast_expression
   36                          | . multiplicative_expression '%' cast_expression
   37 additive_expression: . multiplicative_expression
   38                    | . additive_expression '+' multiplicative_expression
   39                    | . additive_expression '-' multiplicative_expression
   40 shift_expression: . additive_expression
   41                 | . shift_expression LEFT_OP additive_expression
   42                 | . shift_expression RIGHT_OP additive_expression
   43 relational_expression: . shift_expression
   44                      | . relational_expression '<' shift_expression
   45                      | . relational_expression '>' shift_expression
   46                      | . relational_expression LE_OP shift_expression
   47                      | . relational_expression GE_OP shift_expression
   48 equality_expression: . relational_expression
   49                    | . equality_expression EQ_OP relational_expression
   50                    | . equality_expression NE_OP relational_expression
   51 and_expression: . equality_expression
   52               | . and_expression '&' equality_expression
   53 exclusive_or_expression: . and_expression
   54                        | . exclusive_or_expression '^' and_expression
   55 inclusive_or_expression: . exclusive_or_expression
   56                        | . inclusive_or_expression '|' exclusive_or_expression
   57 logical_and_expression: . inclusive_or_expression
   58                       | . logical_and_expression AND_OP inclusive_or_expression
   59 logical_or_expression: . logical_and_expression
   60                      | . logical_or_expression OR_OP logical_and_expression
   61 conditional_expression: . logical_or_expression
   62 assignment_expression: . conditional_expression
   63                      | . unary_expression assignment_operator assignment_expression
   75 expression: . assignment_expression
   76           | . expression ',' assignment_expression
  170 selection_statement: SWITCH '(' . expression ')' statement

    IDENTIFIER      shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    OCT_CONSTANT    shift, and go to state 64
    DEC_CONSTANT    shift, and go to state 65
    FLT_CONSTANT    shift, and go to state 66
    STRING_LITERAL  shift, and go to state 67
    INC_OP          shift, and go to state 68
    DEC_OP          shift, and go to state 69
    SIZEOF          shift, and go to state 70
    '('             shift, and go to state 81
    '-'             shift, and go to state 82
    '&'             shift, and go to state 83
    '*'             shift, and go to state 84
    '~'             shift, and go to state 85
    '!'             shift, and go to state 86

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    cast_expression            go to state 92
    multiplicative_expression  go to state 93
    additive_expression        go to state 94
    shift_expression           go to state 95
    relational_expression      go to state 96
    equality_expression        go to state 97
    and_expression             go to state 98
    exclusive_or_expression    go to state 99
    inclusive_or_expression    go to state 100
    logical_and_expression     go to state 101
    logical_or_expression      go to state 102
    conditional_expression     go to state 103
    assignment_expression      go to state 104
    expression                 go to state 233


state 150

    1 primary_expression: . IDENTIFIER
    2                   | . HEX_CONSTANT
    3                   | . OCT_CONSTANT
    4                   | . DEC_CONSTANT
    5                   | . FLT_CONSTANT
    6                   | . STRING_LITERAL
    7                   | . '(' expression ')'
    8 postfix_expression: . primary_expression
    9                   | . postfix_expression '[' expression ']'
   10                   | . postfix_expression '(' ')'
   11                   | . postfix_expression '(' argument_expression_list ')'
   12                   | . postfix_expression '.' IDENTIFIER
   13                   | . postfix_expression PTR_OP IDENTIFIER
   14                   | . postfix_expression INC_OP
   15                   | . postfix_expression DEC_OP
   18 unary_expression: . postfix_expression
   19                 | . INC_OP unary_expression
   20                 | . DEC_OP unary_expression
   21                 | . '-' cast_expression
   22                 | . '&' cast_expression
   23                 | . '*' cast_expression
   24                 | . '~' cast_expression
   25                 | . '!' cast_expression
   26                 | . SIZEOF unary_expression
   27                 | . SIZEOF '(' CHAR ')'
   28                 | . SIZEOF '(' SHORT ')'
   29                 | . SIZEOF '(' INT ')'
   30                 | . SIZEOF '(' LONG ')'
   31                 | . SIZEOF '(' FLOAT ')'
   32 cast_expression: . unary_expression
   33 multiplicative_expression: . cast_expression
   34                          | . multiplicative_expression '*' cast_expression
   35                          | . multiplicative_expression '/' cast_expression
   36                          | . multiplicative_expression '%' cast_expression
   37 additive_expression: . multiplicative_expression
   38                    | . additive_expression '+' multiplicative_expression
   39                    | . additive_expression '-' multiplicative_expression
   40 shift_expression: . additive_expression
   41                 | . shift_expression LEFT_OP additive_expression
   42                 | . shift_expression RIGHT_OP additive_expression
   43 relational_expression: . shift_expression
   44                      | . relational_expression '<' shift_expression
   45                      | . relational_expression '>' shift_expression
   46                      | . relational_expression LE_OP shift_expression
   47                      | . relational_expression GE_OP shift_expression
   48 equality_expression: . relational_expression
   49                    | . equality_expression EQ_OP relational_expression
   50                    | . equality_expression NE_OP relational_expression
   51 and_expression: . equality_expression
   52               | . and_expression '&' equality_expression
   53 exclusive_or_expression: . and_expression
   54                        | . exclusive_or_expression '^' and_expression
   55 inclusive_or_expression: . exclusive_or_expression
   56                        | . inclusive_or_expression '|' exclusive_or_expression
   57 logical_and_expression: . inclusive_or_expression
   58                       | . logical_and_expression AND_OP inclusive_or_expression
   59 logical_or_expression: . logical_and_expression
   60                      | . logical_or_expression OR_OP logical_and_expression
   61 conditional_expression: . logical_or_expression
   62 assignment_expression: . conditional_expression
   63                      | . unary_expression assignment_operator assignment_expression
   75 expression: . assignment_expression
   76           | . expression ',' assignment_expression
  171 iteration_statement: WHILE '(' . expression ')' statement

    IDENTIFIER      shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    OCT_CONSTANT    shift, and go to state 64
    DEC_CONSTANT    shift, and go to state 65
    FLT_CONSTANT    shift, and go to state 66
    STRING_LITERAL  shift, and go to state 67
    INC_OP          shift, and go to state 68
    DEC_OP          shift, and go to state 69
    SIZEOF          shift, and go to state 70
    '('             shift, and go to state 81
    '-'             shift, and go to state 82
    '&'             shift, and go to state 83
    '*'             shift, and go to state 84
    '~'             shift, and go to state 85
    '!'             shift, and go to state 86

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    cast_expression            go to state 92
    multiplicative_expression  go to state 93
    additive_expression        go to state 94
    shift_expression           go to state 95
    relational_expression      go to state 96
    equality_expression        go to state 97
    and_expression             go to state 98
    exclusive_or_expression    go to state 99
    inclusive_or_expression    go to state 100
    logical_and_expression     go to state 101
    logical_or_expression      go to state 102
    conditional_expression     go to state 103
    assignment_expression      go to state 104
    expression                 go to state 234


state 151

  172 iteration_statement: DO statement . WHILE '(' expression ')' ';'

    WHILE  shift, and go to state 235


state 152

    1 primary_expression: . IDENTIFIER
    2                   | . HEX_CONSTANT
    3                   | . OCT_CONSTANT
    4                   | . DEC_CONSTANT
    5                   | . FLT_CONSTANT
    6                   | . STRING_LITERAL
    7                   | . '(' expression ')'
    8 postfix_expression: . primary_expression
    9                   | . postfix_expression '[' expression ']'
   10                   | . postfix_expression '(' ')'
   11                   | . postfix_expression '(' argument_expression_list ')'
   12                   | . postfix_expression '.' IDENTIFIER
   13                   | . postfix_expression PTR_OP IDENTIFIER
   14                   | . postfix_expression INC_OP
   15                   | . postfix_expression DEC_OP
   18 unary_expression: . postfix_expression
   19                 | . INC_OP unary_expression
   20                 | . DEC_OP unary_expression
   21                 | . '-' cast_expression
   22                 | . '&' cast_expression
   23                 | . '*' cast_expression
   24                 | . '~' cast_expression
   25                 | . '!' cast_expression
   26                 | . SIZEOF unary_expression
   27                 | . SIZEOF '(' CHAR ')'
   28                 | . SIZEOF '(' SHORT ')'
   29                 | . SIZEOF '(' INT ')'
   30                 | . SIZEOF '(' LONG ')'
   31                 | . SIZEOF '(' FLOAT ')'
   32 cast_expression: . unary_expression
   33 multiplicative_expression: . cast_expression
   34                          | . multiplicative_expression '*' cast_expression
   35                          | . multiplicative_expression '/' cast_expression
   36                          | . multiplicative_expression '%' cast_expression
   37 additive_expression: . multiplicative_expression
   38                    | . additive_expression '+' multiplicative_expression
   39                    | . additive_expression '-' multiplicative_expression
   40 shift_expression: . additive_expression
   41                 | . shift_expression LEFT_OP additive_expression
   42                 | . shift_expression RIGHT_OP additive_expression
   43 relational_expression: . shift_expression
   44                      | . relational_expression '<' shift_expression
   45                      | . relational_expression '>' shift_expression
   46                      | . relational_expression LE_OP shift_expression
   47                      | . relational_expression GE_OP shift_expression
   48 equality_expression: . relational_expression
   49                    | . equality_expression EQ_OP relational_expression
   50                    | . equality_expression NE_OP relational_expression
   51 and_expression: . equality_expression
   52               | . and_expression '&' equality_expression
   53 exclusive_or_expression: . and_expression
   54                        | . exclusive_or_expression '^' and_expression
   55 inclusive_or_expression: . exclusive_or_expression
   56                        | . inclusive_or_expression '|' exclusive_or_expression
   57 logical_and_expression: . inclusive_or_expression
   58                       | . logical_and_expression AND_OP inclusive_or_expression
   59 logical_or_expression: . logical_and_expression
   60                      | . logical_or_expression OR_OP logical_and_expression
   61 conditional_expression: . logical_or_expression
   62 assignment_expression: . conditional_expression
   63                      | . unary_expression assignment_operator assignment_expression
   75 expression: . assignment_expression
   76           | . expression ',' assignment_expression
  166 expression_statement: . ';'
  167                     | . expression ';'
  173 iteration_statement: FOR '(' . expression_statement expression_statement expression ')' statement

    IDENTIFIER      shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    OCT_CONSTANT    shift, and go to state 64
    DEC_CONSTANT    shift, and go to state 65
    FLT_CONSTANT    shift, and go to state 66
    STRING_LITERAL  shift, and go to state 67
    INC_OP          shift, and go to state 68
    DEC_OP          shift, and go to state 69
    SIZEOF          shift, and go to state 70
    '('             shift, and go to state 81
    '-'             shift, and go to state 82
    '&'             shift, and go to state 83
    '*'             shift, and go to state 84
    '~'             shift, and go to state 85
    '!'             shift, and go to state 86
    ';'             shift, and go to state 87

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    cast_expression            go to state 92
    multiplicative_expression  go to state 93
    additive_expression        go to state 94
    shift_expression           go to state 95
    relational_expression      go to state 96
    equality_expression        go to state 97
    and_expression             go to state 98
    exclusive_or_expression    go to state 99
    inclusive_or_expression    go to state 100
    logical_and_expression     go to state 101
    logical_or_expression      go to state 102
    conditional_expression     go to state 103
    assignment_expression      go to state 104
    expression                 go to state 105
    expression_statement       go to state 236


state 153

  174 jump_statement: CONTINUE ';' .

    $default  reduce using rule 174 (jump_statement)


state 154

  175 jump_statement: BREAK ';' .

    $default  reduce using rule 175 (jump_statement)


state 155

  176 jump_statement: RETURN ';' .

    $default  reduce using rule 176 (jump_statement)


state 156

   76 expression: expression . ',' assignment_expression
  177 jump_statement: RETURN expression . ';'

    ','  shift, and go to state 199
    ';'  shift, and go to state 237


state 157

    7 primary_expression: '(' expression . ')'
   76 expression: expression . ',' assignment_expression

    ')'  shift, and go to state 238
    ','  shift, and go to state 199


state 158

   21 unary_expression: '-' cast_expression .

    $default  reduce using rule 21 (unary_expression)


state 159

   22 unary_expression: '&' cast_expression .

    $default  reduce using rule 22 (unary_expression)


state 160

   23 unary_expression: '*' cast_expression .

    $default  reduce using rule 23 (unary_expression)


state 161

   24 unary_expression: '~' cast_expression .

    $default  reduce using rule 24 (unary_expression)


state 162

   25 unary_expression: '!' cast_expression .

    $default  reduce using rule 25 (unary_expression)


state 163

   13 postfix_expression: postfix_expression PTR_OP . IDENTIFIER

    IDENTIFIER  shift, and go to state 239


state 164

   14 postfix_expression: postfix_expression INC_OP .

    $default  reduce using rule 14 (postfix_expression)


state 165

   15 postfix_expression: postfix_expression DEC_OP .

    $default  reduce using rule 15 (postfix_expression)


state 166

    1 primary_expression: . IDENTIFIER
    2                   | . HEX_CONSTANT
    3                   | . OCT_CONSTANT
    4                   | . DEC_CONSTANT
    5                   | . FLT_CONSTANT
    6                   | . STRING_LITERAL
    7                   | . '(' expression ')'
    8 postfix_expression: . primary_expression
    9                   | . postfix_expression '[' expression ']'
   10                   | . postfix_expression '(' ')'
   10                   | postfix_expression '(' . ')'
   11                   | . postfix_expression '(' argument_expression_list ')'
   11                   | postfix_expression '(' . argument_expression_list ')'
   12                   | . postfix_expression '.' IDENTIFIER
   13                   | . postfix_expression PTR_OP IDENTIFIER
   14                   | . postfix_expression INC_OP
   15                   | . postfix_expression DEC_OP
   16 argument_expression_list: . assignment_expression
   17                         | . argument_expression_list ',' assignment_expression
   18 unary_expression: . postfix_expression
   19                 | . INC_OP unary_expression
   20                 | . DEC_OP unary_expression
   21                 | . '-' cast_expression
   22                 | . '&' cast_expression
   23                 | . '*' cast_expression
   24                 | . '~' cast_expression
   25                 | . '!' cast_expression
   26                 | . SIZEOF unary_expression
   27                 | . SIZEOF '(' CHAR ')'
   28                 | . SIZEOF '(' SHORT ')'
   29                 | . SIZEOF '(' INT ')'
   30                 | . SIZEOF '(' LONG ')'
   31                 | . SIZEOF '(' FLOAT ')'
   32 cast_expression: . unary_expression
   33 multiplicative_expression: . cast_expression
   34                          | . multiplicative_expression '*' cast_expression
   35                          | . multiplicative_expression '/' cast_expression
   36                          | . multiplicative_expression '%' cast_expression
   37 additive_expression: . multiplicative_expression
   38                    | . additive_expression '+' multiplicative_expression
   39                    | . additive_expression '-' multiplicative_expression
   40 shift_expression: . additive_expression
   41                 | . shift_expression LEFT_OP additive_expression
   42                 | . shift_expression RIGHT_OP additive_expression
   43 relational_expression: . shift_expression
   44                      | . relational_expression '<' shift_expression
   45                      | . relational_expression '>' shift_expression
   46                      | . relational_expression LE_OP shift_expression
   47                      | . relational_expression GE_OP shift_expression
   48 equality_expression: . relational_expression
   49                    | . equality_expression EQ_OP relational_expression
   50                    | . equality_expression NE_OP relational_expression
   51 and_expression: . equality_expression
   52               | . and_expression '&' equality_expression
   53 exclusive_or_expression: . and_expression
   54                        | . exclusive_or_expression '^' and_expression
   55 inclusive_or_expression: . exclusive_or_expression
   56                        | . inclusive_or_expression '|' exclusive_or_expression
   57 logical_and_expression: . inclusive_or_expression
   58                       | . logical_and_expression AND_OP inclusive_or_expression
   59 logical_or_expression: . logical_and_expression
   60                      | . logical_or_expression OR_OP logical_and_expression
   61 conditional_expression: . logical_or_expression
   62 assignment_expression: . conditional_expression
   63                      | . unary_expression assignment_operator assignment_expression

    IDENTIFIER      shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    OCT_CONSTANT    shift, and go to state 64
    DEC_CONSTANT    shift, and go to state 65
    FLT_CONSTANT    shift, and go to state 66
    STRING_LITERAL  shift, and go to state 67
    INC_OP          shift, and go to state 68
    DEC_OP          shift, and go to state 69
    SIZEOF          shift, and go to state 70
    '('             shift, and go to state 81
    ')'             shift, and go to state 240
    '-'             shift, and go to state 82
    '&'             shift, and go to state 83
    '*'             shift, and go to state 84
    '~'             shift, and go to state 85
    '!'             shift, and go to state 86

    primary_expression         go to state 89
    postfix_expression         go to state 90
    argument_expression_list   go to state 241
    unary_expression           go to state 91
    cast_expression            go to state 92
    multiplicative_expression  go to state 93
    additive_expression        go to state 94
    shift_expression           go to state 95
    relational_expression      go to state 96
    equality_expression        go to state 97
    and_expression             go to state 98
    exclusive_or_expression    go to state 99
    inclusive_or_expression    go to state 100
    logical_and_expression     go to state 101
    logical_or_expression      go to state 102
    conditional_expression     go to state 103
    assignment_expression      go to state 242


state 167

    1 primary_expression: . IDENTIFIER
    2                   | . HEX_CONSTANT
    3                   | . OCT_CONSTANT
    4                   | . DEC_CONSTANT
    5                   | . FLT_CONSTANT
    6                   | . STRING_LITERAL
    7                   | . '(' expression ')'
    8 postfix_expression: . primary_expression
    9                   | . postfix_expression '[' expression ']'
    9                   | postfix_expression '[' . expression ']'
   10                   | . postfix_expression '(' ')'
   11                   | . postfix_expression '(' argument_expression_list ')'
   12                   | . postfix_expression '.' IDENTIFIER
   13                   | . postfix_expression PTR_OP IDENTIFIER
   14                   | . postfix_expression INC_OP
   15                   | . postfix_expression DEC_OP
   18 unary_expression: . postfix_expression
   19                 | . INC_OP unary_expression
   20                 | . DEC_OP unary_expression
   21                 | . '-' cast_expression
   22                 | . '&' cast_expression
   23                 | . '*' cast_expression
   24                 | . '~' cast_expression
   25                 | . '!' cast_expression
   26                 | . SIZEOF unary_expression
   27                 | . SIZEOF '(' CHAR ')'
   28                 | . SIZEOF '(' SHORT ')'
   29                 | . SIZEOF '(' INT ')'
   30                 | . SIZEOF '(' LONG ')'
   31                 | . SIZEOF '(' FLOAT ')'
   32 cast_expression: . unary_expression
   33 multiplicative_expression: . cast_expression
   34                          | . multiplicative_expression '*' cast_expression
   35                          | . multiplicative_expression '/' cast_expression
   36                          | . multiplicative_expression '%' cast_expression
   37 additive_expression: . multiplicative_expression
   38                    | . additive_expression '+' multiplicative_expression
   39                    | . additive_expression '-' multiplicative_expression
   40 shift_expression: . additive_expression
   41                 | . shift_expression LEFT_OP additive_expression
   42                 | . shift_expression RIGHT_OP additive_expression
   43 relational_expression: . shift_expression
   44                      | . relational_expression '<' shift_expression
   45                      | . relational_expression '>' shift_expression
   46                      | . relational_expression LE_OP shift_expression
   47                      | . relational_expression GE_OP shift_expression
   48 equality_expression: . relational_expression
   49                    | . equality_expression EQ_OP relational_expression
   50                    | . equality_expression NE_OP relational_expression
   51 and_expression: . equality_expression
   52               | . and_expression '&' equality_expression
   53 exclusive_or_expression: . and_expression
   54                        | . exclusive_or_expression '^' and_expression
   55 inclusive_or_expression: . exclusive_or_expression
   56                        | . inclusive_or_expression '|' exclusive_or_expression
   57 logical_and_expression: . inclusive_or_expression
   58                       | . logical_and_expression AND_OP inclusive_or_expression
   59 logical_or_expression: . logical_and_expression
   60                      | . logical_or_expression OR_OP logical_and_expression
   61 conditional_expression: . logical_or_expression
   62 assignment_expression: . conditional_expression
   63                      | . unary_expression assignment_operator assignment_expression
   75 expression: . assignment_expression
   76           | . expression ',' assignment_expression

    IDENTIFIER      shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    OCT_CONSTANT    shift, and go to state 64
    DEC_CONSTANT    shift, and go to state 65
    FLT_CONSTANT    shift, and go to state 66
    STRING_LITERAL  shift, and go to state 67
    INC_OP          shift, and go to state 68
    DEC_OP          shift, and go to state 69
    SIZEOF          shift, and go to state 70
    '('             shift, and go to state 81
    '-'             shift, and go to state 82
    '&'             shift, and go to state 83
    '*'             shift, and go to state 84
    '~'             shift, and go to state 85
    '!'             shift, and go to state 86

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    cast_expression            go to state 92
    multiplicative_expression  go to state 93
    additive_expression        go to state 94
    shift_expression           go to state 95
    relational_expression      go to state 96
    equality_expression        go to state 97
    and_expression             go to state 98
    exclusive_or_expression    go to state 99
    inclusive_or_expression    go to state 100
    logical_and_expression     go to state 101
    logical_or_expression      go to state 102
    conditional_expression     go to state 103
    assignment_expression      go to state 104
    expression                 go to state 243


state 168

   12 postfix_expression: postfix_expression '.' . IDENTIFIER

    IDENTIFIER  shift, and go to state 244


state 169

   64 assignment_operator: ASSIGN_OP .

    $default  reduce using rule 64 (assignment_operator)


state 170

   65 assignment_operator: MUL_ASSIGN .

    $default  reduce using rule 65 (assignment_operator)


state 171

   66 assignment_operator: DIV_ASSIGN .

    $default  reduce using rule 66 (assignment_operator)


state 172

   67 assignment_operator: MOD_ASSIGN .

    $default  reduce using rule 67 (assignment_operator)


state 173

   68 assignment_operator: ADD_ASSIGN .

    $default  reduce using rule 68 (assignment_operator)


state 174

   69 assignment_operator: SUB_ASSIGN .

    $default  reduce using rule 69 (assignment_operator)


state 175

   70 assignment_operator: LEFT_ASSIGN .

    $default  reduce using rule 70 (assignment_operator)


state 176

   71 assignment_operator: RIGHT_ASSIGN .

    $default  reduce using rule 71 (assignment_operator)


state 177

   72 assignment_operator: AND_ASSIGN .

    $default  reduce using rule 72 (assignment_operator)


state 178

   73 assignment_operator: XOR_ASSIGN .

    $default  reduce using rule 73 (assignment_operator)


state 179

   74 assignment_operator: OR_ASSIGN .

    $default  reduce using rule 74 (assignment_operator)


state 180

    1 primary_expression: . IDENTIFIER
    2                   | . HEX_CONSTANT
    3                   | . OCT_CONSTANT
    4                   | . DEC_CONSTANT
    5                   | . FLT_CONSTANT
    6                   | . STRING_LITERAL
    7                   | . '(' expression ')'
    8 postfix_expression: . primary_expression
    9                   | . postfix_expression '[' expression ']'
   10                   | . postfix_expression '(' ')'
   11                   | . postfix_expression '(' argument_expression_list ')'
   12                   | . postfix_expression '.' IDENTIFIER
   13                   | . postfix_expression PTR_OP IDENTIFIER
   14                   | . postfix_expression INC_OP
   15                   | . postfix_expression DEC_OP
   18 unary_expression: . postfix_expression
   19                 | . INC_OP unary_expression
   20                 | . DEC_OP unary_expression
   21                 | . '-' cast_expression
   22                 | . '&' cast_expression
   23                 | . '*' cast_expression
   24                 | . '~' cast_expression
   25                 | . '!' cast_expression
   26                 | . SIZEOF unary_expression
   27                 | . SIZEOF '(' CHAR ')'
   28                 | . SIZEOF '(' SHORT ')'
   29                 | . SIZEOF '(' INT ')'
   30                 | . SIZEOF '(' LONG ')'
   31                 | . SIZEOF '(' FLOAT ')'
   32 cast_expression: . unary_expression
   33 multiplicative_expression: . cast_expression
   34                          | . multiplicative_expression '*' cast_expression
   35                          | . multiplicative_expression '/' cast_expression
   36                          | . multiplicative_expression '%' cast_expression
   37 additive_expression: . multiplicative_expression
   38                    | . additive_expression '+' multiplicative_expression
   39                    | . additive_expression '-' multiplicative_expression
   40 shift_expression: . additive_expression
   41                 | . shift_expression LEFT_OP additive_expression
   42                 | . shift_expression RIGHT_OP additive_expression
   43 relational_expression: . shift_expression
   44                      | . relational_expression '<' shift_expression
   45                      | . relational_expression '>' shift_expression
   46                      | . relational_expression LE_OP shift_expression
   47                      | . relational_expression GE_OP shift_expression
   48 equality_expression: . relational_expression
   49                    | . equality_expression EQ_OP relational_expression
   50                    | . equality_expression NE_OP relational_expression
   51 and_expression: . equality_expression
   52               | . and_expression '&' equality_expression
   53 exclusive_or_expression: . and_expression
   54                        | . exclusive_or_expression '^' and_expression
   55 inclusive_or_expression: . exclusive_or_expression
   56                        | . inclusive_or_expression '|' exclusive_or_expression
   57 logical_and_expression: . inclusive_or_expression
   58                       | . logical_and_expression AND_OP inclusive_or_expression
   59 logical_or_expression: . logical_and_expression
   60                      | . logical_or_expression OR_OP logical_and_expression
   61 conditional_expression: . logical_or_expression
   62 assignment_expression: . conditional_expression
   63                      | . unary_expression assignment_operator assignment_expression
   63                      | unary_expression assignment_operator . assignment_expression

    IDENTIFIER      shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    OCT_CONSTANT    shift, and go to state 64
    DEC_CONSTANT    shift, and go to state 65
    FLT_CONSTANT    shift, and go to state 66
    STRING_LITERAL  shift, and go to state 67
    INC_OP          shift, and go to state 68
    DEC_OP          shift, and go to state 69
    SIZEOF          shift, and go to state 70
    '('             shift, and go to state 81
    '-'             shift, and go to state 82
    '&'             shift, and go to state 83
    '*'             shift, and go to state 84
    '~'             shift, and go to state 85
    '!'             shift, and go to state 86

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    cast_expression            go to state 92
    multiplicative_expression  go to state 93
    additive_expression        go to state 94
    shift_expression           go to state 95
    relational_expression      go to state 96
    equality_expression        go to state 97
    and_expression             go to state 98
    exclusive_or_expression    go to state 99
    inclusive_or_expression    go to state 100
    logical_and_expression     go to state 101
    logical_or_expression      go to state 102
    conditional_expression     go to state 103
    assignment_expression      go to state 245


state 181

    1 primary_expression: . IDENTIFIER
    2                   | . HEX_CONSTANT
    3                   | . OCT_CONSTANT
    4                   | . DEC_CONSTANT
    5                   | . FLT_CONSTANT
    6                   | . STRING_LITERAL
    7                   | . '(' expression ')'
    8 postfix_expression: . primary_expression
    9                   | . postfix_expression '[' expression ']'
   10                   | . postfix_expression '(' ')'
   11                   | . postfix_expression '(' argument_expression_list ')'
   12                   | . postfix_expression '.' IDENTIFIER
   13                   | . postfix_expression PTR_OP IDENTIFIER
   14                   | . postfix_expression INC_OP
   15                   | . postfix_expression DEC_OP
   18 unary_expression: . postfix_expression
   19                 | . INC_OP unary_expression
   20                 | . DEC_OP unary_expression
   21                 | . '-' cast_expression
   22                 | . '&' cast_expression
   23                 | . '*' cast_expression
   24                 | . '~' cast_expression
   25                 | . '!' cast_expression
   26                 | . SIZEOF unary_expression
   27                 | . SIZEOF '(' CHAR ')'
   28                 | . SIZEOF '(' SHORT ')'
   29                 | . SIZEOF '(' INT ')'
   30                 | . SIZEOF '(' LONG ')'
   31                 | . SIZEOF '(' FLOAT ')'
   32 cast_expression: . unary_expression
   34 multiplicative_expression: multiplicative_expression '*' . cast_expression

    IDENTIFIER      shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    OCT_CONSTANT    shift, and go to state 64
    DEC_CONSTANT    shift, and go to state 65
    FLT_CONSTANT    shift, and go to state 66
    STRING_LITERAL  shift, and go to state 67
    INC_OP          shift, and go to state 68
    DEC_OP          shift, and go to state 69
    SIZEOF          shift, and go to state 70
    '('             shift, and go to state 81
    '-'             shift, and go to state 82
    '&'             shift, and go to state 83
    '*'             shift, and go to state 84
    '~'             shift, and go to state 85
    '!'             shift, and go to state 86

    primary_expression  go to state 89
    postfix_expression  go to state 90
    unary_expression    go to state 125
    cast_expression     go to state 246


state 182

    1 primary_expression: . IDENTIFIER
    2                   | . HEX_CONSTANT
    3                   | . OCT_CONSTANT
    4                   | . DEC_CONSTANT
    5                   | . FLT_CONSTANT
    6                   | . STRING_LITERAL
    7                   | . '(' expression ')'
    8 postfix_expression: . primary_expression
    9                   | . postfix_expression '[' expression ']'
   10                   | . postfix_expression '(' ')'
   11                   | . postfix_expression '(' argument_expression_list ')'
   12                   | . postfix_expression '.' IDENTIFIER
   13                   | . postfix_expression PTR_OP IDENTIFIER
   14                   | . postfix_expression INC_OP
   15                   | . postfix_expression DEC_OP
   18 unary_expression: . postfix_expression
   19                 | . INC_OP unary_expression
   20                 | . DEC_OP unary_expression
   21                 | . '-' cast_expression
   22                 | . '&' cast_expression
   23                 | . '*' cast_expression
   24                 | . '~' cast_expression
   25                 | . '!' cast_expression
   26                 | . SIZEOF unary_expression
   27                 | . SIZEOF '(' CHAR ')'
   28                 | . SIZEOF '(' SHORT ')'
   29                 | . SIZEOF '(' INT ')'
   30                 | . SIZEOF '(' LONG ')'
   31                 | . SIZEOF '(' FLOAT ')'
   32 cast_expression: . unary_expression
   35 multiplicative_expression: multiplicative_expression '/' . cast_expression

    IDENTIFIER      shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    OCT_CONSTANT    shift, and go to state 64
    DEC_CONSTANT    shift, and go to state 65
    FLT_CONSTANT    shift, and go to state 66
    STRING_LITERAL  shift, and go to state 67
    INC_OP          shift, and go to state 68
    DEC_OP          shift, and go to state 69
    SIZEOF          shift, and go to state 70
    '('             shift, and go to state 81
    '-'             shift, and go to state 82
    '&'             shift, and go to state 83
    '*'             shift, and go to state 84
    '~'             shift, and go to state 85
    '!'             shift, and go to state 86

    primary_expression  go to state 89
    postfix_expression  go to state 90
    unary_expression    go to state 125
    cast_expression     go to state 247


state 183

    1 primary_expression: . IDENTIFIER
    2                   | . HEX_CONSTANT
    3                   | . OCT_CONSTANT
    4                   | . DEC_CONSTANT
    5                   | . FLT_CONSTANT
    6                   | . STRING_LITERAL
    7                   | . '(' expression ')'
    8 postfix_expression: . primary_expression
    9                   | . postfix_expression '[' expression ']'
   10                   | . postfix_expression '(' ')'
   11                   | . postfix_expression '(' argument_expression_list ')'
   12                   | . postfix_expression '.' IDENTIFIER
   13                   | . postfix_expression PTR_OP IDENTIFIER
   14                   | . postfix_expression INC_OP
   15                   | . postfix_expression DEC_OP
   18 unary_expression: . postfix_expression
   19                 | . INC_OP unary_expression
   20                 | . DEC_OP unary_expression
   21                 | . '-' cast_expression
   22                 | . '&' cast_expression
   23                 | . '*' cast_expression
   24                 | . '~' cast_expression
   25                 | . '!' cast_expression
   26                 | . SIZEOF unary_expression
   27                 | . SIZEOF '(' CHAR ')'
   28                 | . SIZEOF '(' SHORT ')'
   29                 | . SIZEOF '(' INT ')'
   30                 | . SIZEOF '(' LONG ')'
   31                 | . SIZEOF '(' FLOAT ')'
   32 cast_expression: . unary_expression
   36 multiplicative_expression: multiplicative_expression '%' . cast_expression

    IDENTIFIER      shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    OCT_CONSTANT    shift, and go to state 64
    DEC_CONSTANT    shift, and go to state 65
    FLT_CONSTANT    shift, and go to state 66
    STRING_LITERAL  shift, and go to state 67
    INC_OP          shift, and go to state 68
    DEC_OP          shift, and go to state 69
    SIZEOF          shift, and go to state 70
    '('             shift, and go to state 81
    '-'             shift, and go to state 82
    '&'             shift, and go to state 83
    '*'             shift, and go to state 84
    '~'             shift, and go to state 85
    '!'             shift, and go to state 86

    primary_expression  go to state 89
    postfix_expression  go to state 90
    unary_expression    go to state 125
    cast_expression     go to state 248


state 184

    1 primary_expression: . IDENTIFIER
    2                   | . HEX_CONSTANT
    3                   | . OCT_CONSTANT
    4                   | . DEC_CONSTANT
    5                   | . FLT_CONSTANT
    6                   | . STRING_LITERAL
    7                   | . '(' expression ')'
    8 postfix_expression: . primary_expression
    9                   | . postfix_expression '[' expression ']'
   10                   | . postfix_expression '(' ')'
   11                   | . postfix_expression '(' argument_expression_list ')'
   12                   | . postfix_expression '.' IDENTIFIER
   13                   | . postfix_expression PTR_OP IDENTIFIER
   14                   | . postfix_expression INC_OP
   15                   | . postfix_expression DEC_OP
   18 unary_expression: . postfix_expression
   19                 | . INC_OP unary_expression
   20                 | . DEC_OP unary_expression
   21                 | . '-' cast_expression
   22                 | . '&' cast_expression
   23                 | . '*' cast_expression
   24                 | . '~' cast_expression
   25                 | . '!' cast_expression
   26                 | . SIZEOF unary_expression
   27                 | . SIZEOF '(' CHAR ')'
   28                 | . SIZEOF '(' SHORT ')'
   29                 | . SIZEOF '(' INT ')'
   30                 | . SIZEOF '(' LONG ')'
   31                 | . SIZEOF '(' FLOAT ')'
   32 cast_expression: . unary_expression
   33 multiplicative_expression: . cast_expression
   34                          | . multiplicative_expression '*' cast_expression
   35                          | . multiplicative_expression '/' cast_expression
   36                          | . multiplicative_expression '%' cast_expression
   39 additive_expression: additive_expression '-' . multiplicative_expression

    IDENTIFIER      shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    OCT_CONSTANT    shift, and go to state 64
    DEC_CONSTANT    shift, and go to state 65
    FLT_CONSTANT    shift, and go to state 66
    STRING_LITERAL  shift, and go to state 67
    INC_OP          shift, and go to state 68
    DEC_OP          shift, and go to state 69
    SIZEOF          shift, and go to state 70
    '('             shift, and go to state 81
    '-'             shift, and go to state 82
    '&'             shift, and go to state 83
    '*'             shift, and go to state 84
    '~'             shift, and go to state 85
    '!'             shift, and go to state 86

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 125
    cast_expression            go to state 92
    multiplicative_expression  go to state 249


state 185

    1 primary_expression: . IDENTIFIER
    2                   | . HEX_CONSTANT
    3                   | . OCT_CONSTANT
    4                   | . DEC_CONSTANT
    5                   | . FLT_CONSTANT
    6                   | . STRING_LITERAL
    7                   | . '(' expression ')'
    8 postfix_expression: . primary_expression
    9                   | . postfix_expression '[' expression ']'
   10                   | . postfix_expression '(' ')'
   11                   | . postfix_expression '(' argument_expression_list ')'
   12                   | . postfix_expression '.' IDENTIFIER
   13                   | . postfix_expression PTR_OP IDENTIFIER
   14                   | . postfix_expression INC_OP
   15                   | . postfix_expression DEC_OP
   18 unary_expression: . postfix_expression
   19                 | . INC_OP unary_expression
   20                 | . DEC_OP unary_expression
   21                 | . '-' cast_expression
   22                 | . '&' cast_expression
   23                 | . '*' cast_expression
   24                 | . '~' cast_expression
   25                 | . '!' cast_expression
   26                 | . SIZEOF unary_expression
   27                 | . SIZEOF '(' CHAR ')'
   28                 | . SIZEOF '(' SHORT ')'
   29                 | . SIZEOF '(' INT ')'
   30                 | . SIZEOF '(' LONG ')'
   31                 | . SIZEOF '(' FLOAT ')'
   32 cast_expression: . unary_expression
   33 multiplicative_expression: . cast_expression
   34                          | . multiplicative_expression '*' cast_expression
   35                          | . multiplicative_expression '/' cast_expression
   36                          | . multiplicative_expression '%' cast_expression
   38 additive_expression: additive_expression '+' . multiplicative_expression

    IDENTIFIER      shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    OCT_CONSTANT    shift, and go to state 64
    DEC_CONSTANT    shift, and go to state 65
    FLT_CONSTANT    shift, and go to state 66
    STRING_LITERAL  shift, and go to state 67
    INC_OP          shift, and go to state 68
    DEC_OP          shift, and go to state 69
    SIZEOF          shift, and go to state 70
    '('             shift, and go to state 81
    '-'             shift, and go to state 82
    '&'             shift, and go to state 83
    '*'             shift, and go to state 84
    '~'             shift, and go to state 85
    '!'             shift, and go to state 86

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 125
    cast_expression            go to state 92
    multiplicative_expression  go to state 250


state 186

    1 primary_expression: . IDENTIFIER
    2                   | . HEX_CONSTANT
    3                   | . OCT_CONSTANT
    4                   | . DEC_CONSTANT
    5                   | . FLT_CONSTANT
    6                   | . STRING_LITERAL
    7                   | . '(' expression ')'
    8 postfix_expression: . primary_expression
    9                   | . postfix_expression '[' expression ']'
   10                   | . postfix_expression '(' ')'
   11                   | . postfix_expression '(' argument_expression_list ')'
   12                   | . postfix_expression '.' IDENTIFIER
   13                   | . postfix_expression PTR_OP IDENTIFIER
   14                   | . postfix_expression INC_OP
   15                   | . postfix_expression DEC_OP
   18 unary_expression: . postfix_expression
   19                 | . INC_OP unary_expression
   20                 | . DEC_OP unary_expression
   21                 | . '-' cast_expression
   22                 | . '&' cast_expression
   23                 | . '*' cast_expression
   24                 | . '~' cast_expression
   25                 | . '!' cast_expression
   26                 | . SIZEOF unary_expression
   27                 | . SIZEOF '(' CHAR ')'
   28                 | . SIZEOF '(' SHORT ')'
   29                 | . SIZEOF '(' INT ')'
   30                 | . SIZEOF '(' LONG ')'
   31                 | . SIZEOF '(' FLOAT ')'
   32 cast_expression: . unary_expression
   33 multiplicative_expression: . cast_expression
   34                          | . multiplicative_expression '*' cast_expression
   35                          | . multiplicative_expression '/' cast_expression
   36                          | . multiplicative_expression '%' cast_expression
   37 additive_expression: . multiplicative_expression
   38                    | . additive_expression '+' multiplicative_expression
   39                    | . additive_expression '-' multiplicative_expression
   41 shift_expression: shift_expression LEFT_OP . additive_expression

    IDENTIFIER      shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    OCT_CONSTANT    shift, and go to state 64
    DEC_CONSTANT    shift, and go to state 65
    FLT_CONSTANT    shift, and go to state 66
    STRING_LITERAL  shift, and go to state 67
    INC_OP          shift, and go to state 68
    DEC_OP          shift, and go to state 69
    SIZEOF          shift, and go to state 70
    '('             shift, and go to state 81
    '-'             shift, and go to state 82
    '&'             shift, and go to state 83
    '*'             shift, and go to state 84
    '~'             shift, and go to state 85
    '!'             shift, and go to state 86

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 125
    cast_expression            go to state 92
    multiplicative_expression  go to state 93
    additive_expression        go to state 251


state 187

    1 primary_expression: . IDENTIFIER
    2                   | . HEX_CONSTANT
    3                   | . OCT_CONSTANT
    4                   | . DEC_CONSTANT
    5                   | . FLT_CONSTANT
    6                   | . STRING_LITERAL
    7                   | . '(' expression ')'
    8 postfix_expression: . primary_expression
    9                   | . postfix_expression '[' expression ']'
   10                   | . postfix_expression '(' ')'
   11                   | . postfix_expression '(' argument_expression_list ')'
   12                   | . postfix_expression '.' IDENTIFIER
   13                   | . postfix_expression PTR_OP IDENTIFIER
   14                   | . postfix_expression INC_OP
   15                   | . postfix_expression DEC_OP
   18 unary_expression: . postfix_expression
   19                 | . INC_OP unary_expression
   20                 | . DEC_OP unary_expression
   21                 | . '-' cast_expression
   22                 | . '&' cast_expression
   23                 | . '*' cast_expression
   24                 | . '~' cast_expression
   25                 | . '!' cast_expression
   26                 | . SIZEOF unary_expression
   27                 | . SIZEOF '(' CHAR ')'
   28                 | . SIZEOF '(' SHORT ')'
   29                 | . SIZEOF '(' INT ')'
   30                 | . SIZEOF '(' LONG ')'
   31                 | . SIZEOF '(' FLOAT ')'
   32 cast_expression: . unary_expression
   33 multiplicative_expression: . cast_expression
   34                          | . multiplicative_expression '*' cast_expression
   35                          | . multiplicative_expression '/' cast_expression
   36                          | . multiplicative_expression '%' cast_expression
   37 additive_expression: . multiplicative_expression
   38                    | . additive_expression '+' multiplicative_expression
   39                    | . additive_expression '-' multiplicative_expression
   42 shift_expression: shift_expression RIGHT_OP . additive_expression

    IDENTIFIER      shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    OCT_CONSTANT    shift, and go to state 64
    DEC_CONSTANT    shift, and go to state 65
    FLT_CONSTANT    shift, and go to state 66
    STRING_LITERAL  shift, and go to state 67
    INC_OP          shift, and go to state 68
    DEC_OP          shift, and go to state 69
    SIZEOF          shift, and go to state 70
    '('             shift, and go to state 81
    '-'             shift, and go to state 82
    '&'             shift, and go to state 83
    '*'             shift, and go to state 84
    '~'             shift, and go to state 85
    '!'             shift, and go to state 86

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 125
    cast_expression            go to state 92
    multiplicative_expression  go to state 93
    additive_expression        go to state 252


state 188

    1 primary_expression: . IDENTIFIER
    2                   | . HEX_CONSTANT
    3                   | . OCT_CONSTANT
    4                   | . DEC_CONSTANT
    5                   | . FLT_CONSTANT
    6                   | . STRING_LITERAL
    7                   | . '(' expression ')'
    8 postfix_expression: . primary_expression
    9                   | . postfix_expression '[' expression ']'
   10                   | . postfix_expression '(' ')'
   11                   | . postfix_expression '(' argument_expression_list ')'
   12                   | . postfix_expression '.' IDENTIFIER
   13                   | . postfix_expression PTR_OP IDENTIFIER
   14                   | . postfix_expression INC_OP
   15                   | . postfix_expression DEC_OP
   18 unary_expression: . postfix_expression
   19                 | . INC_OP unary_expression
   20                 | . DEC_OP unary_expression
   21                 | . '-' cast_expression
   22                 | . '&' cast_expression
   23                 | . '*' cast_expression
   24                 | . '~' cast_expression
   25                 | . '!' cast_expression
   26                 | . SIZEOF unary_expression
   27                 | . SIZEOF '(' CHAR ')'
   28                 | . SIZEOF '(' SHORT ')'
   29                 | . SIZEOF '(' INT ')'
   30                 | . SIZEOF '(' LONG ')'
   31                 | . SIZEOF '(' FLOAT ')'
   32 cast_expression: . unary_expression
   33 multiplicative_expression: . cast_expression
   34                          | . multiplicative_expression '*' cast_expression
   35                          | . multiplicative_expression '/' cast_expression
   36                          | . multiplicative_expression '%' cast_expression
   37 additive_expression: . multiplicative_expression
   38                    | . additive_expression '+' multiplicative_expression
   39                    | . additive_expression '-' multiplicative_expression
   40 shift_expression: . additive_expression
   41                 | . shift_expression LEFT_OP additive_expression
   42                 | . shift_expression RIGHT_OP additive_expression
   46 relational_expression: relational_expression LE_OP . shift_expression

    IDENTIFIER      shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    OCT_CONSTANT    shift, and go to state 64
    DEC_CONSTANT    shift, and go to state 65
    FLT_CONSTANT    shift, and go to state 66
    STRING_LITERAL  shift, and go to state 67
    INC_OP          shift, and go to state 68
    DEC_OP          shift, and go to state 69
    SIZEOF          shift, and go to state 70
    '('             shift, and go to state 81
    '-'             shift, and go to state 82
    '&'             shift, and go to state 83
    '*'             shift, and go to state 84
    '~'             shift, and go to state 85
    '!'             shift, and go to state 86

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 125
    cast_expression            go to state 92
    multiplicative_expression  go to state 93
    additive_expression        go to state 94
    shift_expression           go to state 253


state 189

    1 primary_expression: . IDENTIFIER
    2                   | . HEX_CONSTANT
    3                   | . OCT_CONSTANT
    4                   | . DEC_CONSTANT
    5                   | . FLT_CONSTANT
    6                   | . STRING_LITERAL
    7                   | . '(' expression ')'
    8 postfix_expression: . primary_expression
    9                   | . postfix_expression '[' expression ']'
   10                   | . postfix_expression '(' ')'
   11                   | . postfix_expression '(' argument_expression_list ')'
   12                   | . postfix_expression '.' IDENTIFIER
   13                   | . postfix_expression PTR_OP IDENTIFIER
   14                   | . postfix_expression INC_OP
   15                   | . postfix_expression DEC_OP
   18 unary_expression: . postfix_expression
   19                 | . INC_OP unary_expression
   20                 | . DEC_OP unary_expression
   21                 | . '-' cast_expression
   22                 | . '&' cast_expression
   23                 | . '*' cast_expression
   24                 | . '~' cast_expression
   25                 | . '!' cast_expression
   26                 | . SIZEOF unary_expression
   27                 | . SIZEOF '(' CHAR ')'
   28                 | . SIZEOF '(' SHORT ')'
   29                 | . SIZEOF '(' INT ')'
   30                 | . SIZEOF '(' LONG ')'
   31                 | . SIZEOF '(' FLOAT ')'
   32 cast_expression: . unary_expression
   33 multiplicative_expression: . cast_expression
   34                          | . multiplicative_expression '*' cast_expression
   35                          | . multiplicative_expression '/' cast_expression
   36                          | . multiplicative_expression '%' cast_expression
   37 additive_expression: . multiplicative_expression
   38                    | . additive_expression '+' multiplicative_expression
   39                    | . additive_expression '-' multiplicative_expression
   40 shift_expression: . additive_expression
   41                 | . shift_expression LEFT_OP additive_expression
   42                 | . shift_expression RIGHT_OP additive_expression
   47 relational_expression: relational_expression GE_OP . shift_expression

    IDENTIFIER      shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    OCT_CONSTANT    shift, and go to state 64
    DEC_CONSTANT    shift, and go to state 65
    FLT_CONSTANT    shift, and go to state 66
    STRING_LITERAL  shift, and go to state 67
    INC_OP          shift, and go to state 68
    DEC_OP          shift, and go to state 69
    SIZEOF          shift, and go to state 70
    '('             shift, and go to state 81
    '-'             shift, and go to state 82
    '&'             shift, and go to state 83
    '*'             shift, and go to state 84
    '~'             shift, and go to state 85
    '!'             shift, and go to state 86

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 125
    cast_expression            go to state 92
    multiplicative_expression  go to state 93
    additive_expression        go to state 94
    shift_expression           go to state 254


state 190

    1 primary_expression: . IDENTIFIER
    2                   | . HEX_CONSTANT
    3                   | . OCT_CONSTANT
    4                   | . DEC_CONSTANT
    5                   | . FLT_CONSTANT
    6                   | . STRING_LITERAL
    7                   | . '(' expression ')'
    8 postfix_expression: . primary_expression
    9                   | . postfix_expression '[' expression ']'
   10                   | . postfix_expression '(' ')'
   11                   | . postfix_expression '(' argument_expression_list ')'
   12                   | . postfix_expression '.' IDENTIFIER
   13                   | . postfix_expression PTR_OP IDENTIFIER
   14                   | . postfix_expression INC_OP
   15                   | . postfix_expression DEC_OP
   18 unary_expression: . postfix_expression
   19                 | . INC_OP unary_expression
   20                 | . DEC_OP unary_expression
   21                 | . '-' cast_expression
   22                 | . '&' cast_expression
   23                 | . '*' cast_expression
   24                 | . '~' cast_expression
   25                 | . '!' cast_expression
   26                 | . SIZEOF unary_expression
   27                 | . SIZEOF '(' CHAR ')'
   28                 | . SIZEOF '(' SHORT ')'
   29                 | . SIZEOF '(' INT ')'
   30                 | . SIZEOF '(' LONG ')'
   31                 | . SIZEOF '(' FLOAT ')'
   32 cast_expression: . unary_expression
   33 multiplicative_expression: . cast_expression
   34                          | . multiplicative_expression '*' cast_expression
   35                          | . multiplicative_expression '/' cast_expression
   36                          | . multiplicative_expression '%' cast_expression
   37 additive_expression: . multiplicative_expression
   38                    | . additive_expression '+' multiplicative_expression
   39                    | . additive_expression '-' multiplicative_expression
   40 shift_expression: . additive_expression
   41                 | . shift_expression LEFT_OP additive_expression
   42                 | . shift_expression RIGHT_OP additive_expression
   44 relational_expression: relational_expression '<' . shift_expression

    IDENTIFIER      shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    OCT_CONSTANT    shift, and go to state 64
    DEC_CONSTANT    shift, and go to state 65
    FLT_CONSTANT    shift, and go to state 66
    STRING_LITERAL  shift, and go to state 67
    INC_OP          shift, and go to state 68
    DEC_OP          shift, and go to state 69
    SIZEOF          shift, and go to state 70
    '('             shift, and go to state 81
    '-'             shift, and go to state 82
    '&'             shift, and go to state 83
    '*'             shift, and go to state 84
    '~'             shift, and go to state 85
    '!'             shift, and go to state 86

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 125
    cast_expression            go to state 92
    multiplicative_expression  go to state 93
    additive_expression        go to state 94
    shift_expression           go to state 255


state 191

    1 primary_expression: . IDENTIFIER
    2                   | . HEX_CONSTANT
    3                   | . OCT_CONSTANT
    4                   | . DEC_CONSTANT
    5                   | . FLT_CONSTANT
    6                   | . STRING_LITERAL
    7                   | . '(' expression ')'
    8 postfix_expression: . primary_expression
    9                   | . postfix_expression '[' expression ']'
   10                   | . postfix_expression '(' ')'
   11                   | . postfix_expression '(' argument_expression_list ')'
   12                   | . postfix_expression '.' IDENTIFIER
   13                   | . postfix_expression PTR_OP IDENTIFIER
   14                   | . postfix_expression INC_OP
   15                   | . postfix_expression DEC_OP
   18 unary_expression: . postfix_expression
   19                 | . INC_OP unary_expression
   20                 | . DEC_OP unary_expression
   21                 | . '-' cast_expression
   22                 | . '&' cast_expression
   23                 | . '*' cast_expression
   24                 | . '~' cast_expression
   25                 | . '!' cast_expression
   26                 | . SIZEOF unary_expression
   27                 | . SIZEOF '(' CHAR ')'
   28                 | . SIZEOF '(' SHORT ')'
   29                 | . SIZEOF '(' INT ')'
   30                 | . SIZEOF '(' LONG ')'
   31                 | . SIZEOF '(' FLOAT ')'
   32 cast_expression: . unary_expression
   33 multiplicative_expression: . cast_expression
   34                          | . multiplicative_expression '*' cast_expression
   35                          | . multiplicative_expression '/' cast_expression
   36                          | . multiplicative_expression '%' cast_expression
   37 additive_expression: . multiplicative_expression
   38                    | . additive_expression '+' multiplicative_expression
   39                    | . additive_expression '-' multiplicative_expression
   40 shift_expression: . additive_expression
   41                 | . shift_expression LEFT_OP additive_expression
   42                 | . shift_expression RIGHT_OP additive_expression
   45 relational_expression: relational_expression '>' . shift_expression

    IDENTIFIER      shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    OCT_CONSTANT    shift, and go to state 64
    DEC_CONSTANT    shift, and go to state 65
    FLT_CONSTANT    shift, and go to state 66
    STRING_LITERAL  shift, and go to state 67
    INC_OP          shift, and go to state 68
    DEC_OP          shift, and go to state 69
    SIZEOF          shift, and go to state 70
    '('             shift, and go to state 81
    '-'             shift, and go to state 82
    '&'             shift, and go to state 83
    '*'             shift, and go to state 84
    '~'             shift, and go to state 85
    '!'             shift, and go to state 86

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 125
    cast_expression            go to state 92
    multiplicative_expression  go to state 93
    additive_expression        go to state 94
    shift_expression           go to state 256


state 192

    1 primary_expression: . IDENTIFIER
    2                   | . HEX_CONSTANT
    3                   | . OCT_CONSTANT
    4                   | . DEC_CONSTANT
    5                   | . FLT_CONSTANT
    6                   | . STRING_LITERAL
    7                   | . '(' expression ')'
    8 postfix_expression: . primary_expression
    9                   | . postfix_expression '[' expression ']'
   10                   | . postfix_expression '(' ')'
   11                   | . postfix_expression '(' argument_expression_list ')'
   12                   | . postfix_expression '.' IDENTIFIER
   13                   | . postfix_expression PTR_OP IDENTIFIER
   14                   | . postfix_expression INC_OP
   15                   | . postfix_expression DEC_OP
   18 unary_expression: . postfix_expression
   19                 | . INC_OP unary_expression
   20                 | . DEC_OP unary_expression
   21                 | . '-' cast_expression
   22                 | . '&' cast_expression
   23                 | . '*' cast_expression
   24                 | . '~' cast_expression
   25                 | . '!' cast_expression
   26                 | . SIZEOF unary_expression
   27                 | . SIZEOF '(' CHAR ')'
   28                 | . SIZEOF '(' SHORT ')'
   29                 | . SIZEOF '(' INT ')'
   30                 | . SIZEOF '(' LONG ')'
   31                 | . SIZEOF '(' FLOAT ')'
   32 cast_expression: . unary_expression
   33 multiplicative_expression: . cast_expression
   34                          | . multiplicative_expression '*' cast_expression
   35                          | . multiplicative_expression '/' cast_expression
   36                          | . multiplicative_expression '%' cast_expression
   37 additive_expression: . multiplicative_expression
   38                    | . additive_expression '+' multiplicative_expression
   39                    | . additive_expression '-' multiplicative_expression
   40 shift_expression: . additive_expression
   41                 | . shift_expression LEFT_OP additive_expression
   42                 | . shift_expression RIGHT_OP additive_expression
   43 relational_expression: . shift_expression
   44                      | . relational_expression '<' shift_expression
   45                      | . relational_expression '>' shift_expression
   46                      | . relational_expression LE_OP shift_expression
   47                      | . relational_expression GE_OP shift_expression
   49 equality_expression: equality_expression EQ_OP . relational_expression

    IDENTIFIER      shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    OCT_CONSTANT    shift, and go to state 64
    DEC_CONSTANT    shift, and go to state 65
    FLT_CONSTANT    shift, and go to state 66
    STRING_LITERAL  shift, and go to state 67
    INC_OP          shift, and go to state 68
    DEC_OP          shift, and go to state 69
    SIZEOF          shift, and go to state 70
    '('             shift, and go to state 81
    '-'             shift, and go to state 82
    '&'             shift, and go to state 83
    '*'             shift, and go to state 84
    '~'             shift, and go to state 85
    '!'             shift, and go to state 86

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 125
    cast_expression            go to state 92
    multiplicative_expression  go to state 93
    additive_expression        go to state 94
    shift_expression           go to state 95
    relational_expression      go to state 257


state 193

    1 primary_expression: . IDENTIFIER
    2                   | . HEX_CONSTANT
    3                   | . OCT_CONSTANT
    4                   | . DEC_CONSTANT
    5                   | . FLT_CONSTANT
    6                   | . STRING_LITERAL
    7                   | . '(' expression ')'
    8 postfix_expression: . primary_expression
    9                   | . postfix_expression '[' expression ']'
   10                   | . postfix_expression '(' ')'
   11                   | . postfix_expression '(' argument_expression_list ')'
   12                   | . postfix_expression '.' IDENTIFIER
   13                   | . postfix_expression PTR_OP IDENTIFIER
   14                   | . postfix_expression INC_OP
   15                   | . postfix_expression DEC_OP
   18 unary_expression: . postfix_expression
   19                 | . INC_OP unary_expression
   20                 | . DEC_OP unary_expression
   21                 | . '-' cast_expression
   22                 | . '&' cast_expression
   23                 | . '*' cast_expression
   24                 | . '~' cast_expression
   25                 | . '!' cast_expression
   26                 | . SIZEOF unary_expression
   27                 | . SIZEOF '(' CHAR ')'
   28                 | . SIZEOF '(' SHORT ')'
   29                 | . SIZEOF '(' INT ')'
   30                 | . SIZEOF '(' LONG ')'
   31                 | . SIZEOF '(' FLOAT ')'
   32 cast_expression: . unary_expression
   33 multiplicative_expression: . cast_expression
   34                          | . multiplicative_expression '*' cast_expression
   35                          | . multiplicative_expression '/' cast_expression
   36                          | . multiplicative_expression '%' cast_expression
   37 additive_expression: . multiplicative_expression
   38                    | . additive_expression '+' multiplicative_expression
   39                    | . additive_expression '-' multiplicative_expression
   40 shift_expression: . additive_expression
   41                 | . shift_expression LEFT_OP additive_expression
   42                 | . shift_expression RIGHT_OP additive_expression
   43 relational_expression: . shift_expression
   44                      | . relational_expression '<' shift_expression
   45                      | . relational_expression '>' shift_expression
   46                      | . relational_expression LE_OP shift_expression
   47                      | . relational_expression GE_OP shift_expression
   50 equality_expression: equality_expression NE_OP . relational_expression

    IDENTIFIER      shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    OCT_CONSTANT    shift, and go to state 64
    DEC_CONSTANT    shift, and go to state 65
    FLT_CONSTANT    shift, and go to state 66
    STRING_LITERAL  shift, and go to state 67
    INC_OP          shift, and go to state 68
    DEC_OP          shift, and go to state 69
    SIZEOF          shift, and go to state 70
    '('             shift, and go to state 81
    '-'             shift, and go to state 82
    '&'             shift, and go to state 83
    '*'             shift, and go to state 84
    '~'             shift, and go to state 85
    '!'             shift, and go to state 86

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 125
    cast_expression            go to state 92
    multiplicative_expression  go to state 93
    additive_expression        go to state 94
    shift_expression           go to state 95
    relational_expression      go to state 258


state 194

    1 primary_expression: . IDENTIFIER
    2                   | . HEX_CONSTANT
    3                   | . OCT_CONSTANT
    4                   | . DEC_CONSTANT
    5                   | . FLT_CONSTANT
    6                   | . STRING_LITERAL
    7                   | . '(' expression ')'
    8 postfix_expression: . primary_expression
    9                   | . postfix_expression '[' expression ']'
   10                   | . postfix_expression '(' ')'
   11                   | . postfix_expression '(' argument_expression_list ')'
   12                   | . postfix_expression '.' IDENTIFIER
   13                   | . postfix_expression PTR_OP IDENTIFIER
   14                   | . postfix_expression INC_OP
   15                   | . postfix_expression DEC_OP
   18 unary_expression: . postfix_expression
   19                 | . INC_OP unary_expression
   20                 | . DEC_OP unary_expression
   21                 | . '-' cast_expression
   22                 | . '&' cast_expression
   23                 | . '*' cast_expression
   24                 | . '~' cast_expression
   25                 | . '!' cast_expression
   26                 | . SIZEOF unary_expression
   27                 | . SIZEOF '(' CHAR ')'
   28                 | . SIZEOF '(' SHORT ')'
   29                 | . SIZEOF '(' INT ')'
   30                 | . SIZEOF '(' LONG ')'
   31                 | . SIZEOF '(' FLOAT ')'
   32 cast_expression: . unary_expression
   33 multiplicative_expression: . cast_expression
   34                          | . multiplicative_expression '*' cast_expression
   35                          | . multiplicative_expression '/' cast_expression
   36                          | . multiplicative_expression '%' cast_expression
   37 additive_expression: . multiplicative_expression
   38                    | . additive_expression '+' multiplicative_expression
   39                    | . additive_expression '-' multiplicative_expression
   40 shift_expression: . additive_expression
   41                 | . shift_expression LEFT_OP additive_expression
   42                 | . shift_expression RIGHT_OP additive_expression
   43 relational_expression: . shift_expression
   44                      | . relational_expression '<' shift_expression
   45                      | . relational_expression '>' shift_expression
   46                      | . relational_expression LE_OP shift_expression
   47                      | . relational_expression GE_OP shift_expression
   48 equality_expression: . relational_expression
   49                    | . equality_expression EQ_OP relational_expression
   50                    | . equality_expression NE_OP relational_expression
   52 and_expression: and_expression '&' . equality_expression

    IDENTIFIER      shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    OCT_CONSTANT    shift, and go to state 64
    DEC_CONSTANT    shift, and go to state 65
    FLT_CONSTANT    shift, and go to state 66
    STRING_LITERAL  shift, and go to state 67
    INC_OP          shift, and go to state 68
    DEC_OP          shift, and go to state 69
    SIZEOF          shift, and go to state 70
    '('             shift, and go to state 81
    '-'             shift, and go to state 82
    '&'             shift, and go to state 83
    '*'             shift, and go to state 84
    '~'             shift, and go to state 85
    '!'             shift, and go to state 86

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 125
    cast_expression            go to state 92
    multiplicative_expression  go to state 93
    additive_expression        go to state 94
    shift_expression           go to state 95
    relational_expression      go to state 96
    equality_expression        go to state 259


state 195

    1 primary_expression: . IDENTIFIER
    2                   | . HEX_CONSTANT
    3                   | . OCT_CONSTANT
    4                   | . DEC_CONSTANT
    5                   | . FLT_CONSTANT
    6                   | . STRING_LITERAL
    7                   | . '(' expression ')'
    8 postfix_expression: . primary_expression
    9                   | . postfix_expression '[' expression ']'
   10                   | . postfix_expression '(' ')'
   11                   | . postfix_expression '(' argument_expression_list ')'
   12                   | . postfix_expression '.' IDENTIFIER
   13                   | . postfix_expression PTR_OP IDENTIFIER
   14                   | . postfix_expression INC_OP
   15                   | . postfix_expression DEC_OP
   18 unary_expression: . postfix_expression
   19                 | . INC_OP unary_expression
   20                 | . DEC_OP unary_expression
   21                 | . '-' cast_expression
   22                 | . '&' cast_expression
   23                 | . '*' cast_expression
   24                 | . '~' cast_expression
   25                 | . '!' cast_expression
   26                 | . SIZEOF unary_expression
   27                 | . SIZEOF '(' CHAR ')'
   28                 | . SIZEOF '(' SHORT ')'
   29                 | . SIZEOF '(' INT ')'
   30                 | . SIZEOF '(' LONG ')'
   31                 | . SIZEOF '(' FLOAT ')'
   32 cast_expression: . unary_expression
   33 multiplicative_expression: . cast_expression
   34                          | . multiplicative_expression '*' cast_expression
   35                          | . multiplicative_expression '/' cast_expression
   36                          | . multiplicative_expression '%' cast_expression
   37 additive_expression: . multiplicative_expression
   38                    | . additive_expression '+' multiplicative_expression
   39                    | . additive_expression '-' multiplicative_expression
   40 shift_expression: . additive_expression
   41                 | . shift_expression LEFT_OP additive_expression
   42                 | . shift_expression RIGHT_OP additive_expression
   43 relational_expression: . shift_expression
   44                      | . relational_expression '<' shift_expression
   45                      | . relational_expression '>' shift_expression
   46                      | . relational_expression LE_OP shift_expression
   47                      | . relational_expression GE_OP shift_expression
   48 equality_expression: . relational_expression
   49                    | . equality_expression EQ_OP relational_expression
   50                    | . equality_expression NE_OP relational_expression
   51 and_expression: . equality_expression
   52               | . and_expression '&' equality_expression
   54 exclusive_or_expression: exclusive_or_expression '^' . and_expression

    IDENTIFIER      shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    OCT_CONSTANT    shift, and go to state 64
    DEC_CONSTANT    shift, and go to state 65
    FLT_CONSTANT    shift, and go to state 66
    STRING_LITERAL  shift, and go to state 67
    INC_OP          shift, and go to state 68
    DEC_OP          shift, and go to state 69
    SIZEOF          shift, and go to state 70
    '('             shift, and go to state 81
    '-'             shift, and go to state 82
    '&'             shift, and go to state 83
    '*'             shift, and go to state 84
    '~'             shift, and go to state 85
    '!'             shift, and go to state 86

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 125
    cast_expression            go to state 92
    multiplicative_expression  go to state 93
    additive_expression        go to state 94
    shift_expression           go to state 95
    relational_expression      go to state 96
    equality_expression        go to state 97
    and_expression             go to state 260


state 196

    1 primary_expression: . IDENTIFIER
    2                   | . HEX_CONSTANT
    3                   | . OCT_CONSTANT
    4                   | . DEC_CONSTANT
    5                   | . FLT_CONSTANT
    6                   | . STRING_LITERAL
    7                   | . '(' expression ')'
    8 postfix_expression: . primary_expression
    9                   | . postfix_expression '[' expression ']'
   10                   | . postfix_expression '(' ')'
   11                   | . postfix_expression '(' argument_expression_list ')'
   12                   | . postfix_expression '.' IDENTIFIER
   13                   | . postfix_expression PTR_OP IDENTIFIER
   14                   | . postfix_expression INC_OP
   15                   | . postfix_expression DEC_OP
   18 unary_expression: . postfix_expression
   19                 | . INC_OP unary_expression
   20                 | . DEC_OP unary_expression
   21                 | . '-' cast_expression
   22                 | . '&' cast_expression
   23                 | . '*' cast_expression
   24                 | . '~' cast_expression
   25                 | . '!' cast_expression
   26                 | . SIZEOF unary_expression
   27                 | . SIZEOF '(' CHAR ')'
   28                 | . SIZEOF '(' SHORT ')'
   29                 | . SIZEOF '(' INT ')'
   30                 | . SIZEOF '(' LONG ')'
   31                 | . SIZEOF '(' FLOAT ')'
   32 cast_expression: . unary_expression
   33 multiplicative_expression: . cast_expression
   34                          | . multiplicative_expression '*' cast_expression
   35                          | . multiplicative_expression '/' cast_expression
   36                          | . multiplicative_expression '%' cast_expression
   37 additive_expression: . multiplicative_expression
   38                    | . additive_expression '+' multiplicative_expression
   39                    | . additive_expression '-' multiplicative_expression
   40 shift_expression: . additive_expression
   41                 | . shift_expression LEFT_OP additive_expression
   42                 | . shift_expression RIGHT_OP additive_expression
   43 relational_expression: . shift_expression
   44                      | . relational_expression '<' shift_expression
   45                      | . relational_expression '>' shift_expression
   46                      | . relational_expression LE_OP shift_expression
   47                      | . relational_expression GE_OP shift_expression
   48 equality_expression: . relational_expression
   49                    | . equality_expression EQ_OP relational_expression
   50                    | . equality_expression NE_OP relational_expression
   51 and_expression: . equality_expression
   52               | . and_expression '&' equality_expression
   53 exclusive_or_expression: . and_expression
   54                        | . exclusive_or_expression '^' and_expression
   56 inclusive_or_expression: inclusive_or_expression '|' . exclusive_or_expression

    IDENTIFIER      shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    OCT_CONSTANT    shift, and go to state 64
    DEC_CONSTANT    shift, and go to state 65
    FLT_CONSTANT    shift, and go to state 66
    STRING_LITERAL  shift, and go to state 67
    INC_OP          shift, and go to state 68
    DEC_OP          shift, and go to state 69
    SIZEOF          shift, and go to state 70
    '('             shift, and go to state 81
    '-'             shift, and go to state 82
    '&'             shift, and go to state 83
    '*'             shift, and go to state 84
    '~'             shift, and go to state 85
    '!'             shift, and go to state 86

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 125
    cast_expression            go to state 92
    multiplicative_expression  go to state 93
    additive_expression        go to state 94
    shift_expression           go to state 95
    relational_expression      go to state 96
    equality_expression        go to state 97
    and_expression             go to state 98
    exclusive_or_expression    go to state 261


state 197

    1 primary_expression: . IDENTIFIER
    2                   | . HEX_CONSTANT
    3                   | . OCT_CONSTANT
    4                   | . DEC_CONSTANT
    5                   | . FLT_CONSTANT
    6                   | . STRING_LITERAL
    7                   | . '(' expression ')'
    8 postfix_expression: . primary_expression
    9                   | . postfix_expression '[' expression ']'
   10                   | . postfix_expression '(' ')'
   11                   | . postfix_expression '(' argument_expression_list ')'
   12                   | . postfix_expression '.' IDENTIFIER
   13                   | . postfix_expression PTR_OP IDENTIFIER
   14                   | . postfix_expression INC_OP
   15                   | . postfix_expression DEC_OP
   18 unary_expression: . postfix_expression
   19                 | . INC_OP unary_expression
   20                 | . DEC_OP unary_expression
   21                 | . '-' cast_expression
   22                 | . '&' cast_expression
   23                 | . '*' cast_expression
   24                 | . '~' cast_expression
   25                 | . '!' cast_expression
   26                 | . SIZEOF unary_expression
   27                 | . SIZEOF '(' CHAR ')'
   28                 | . SIZEOF '(' SHORT ')'
   29                 | . SIZEOF '(' INT ')'
   30                 | . SIZEOF '(' LONG ')'
   31                 | . SIZEOF '(' FLOAT ')'
   32 cast_expression: . unary_expression
   33 multiplicative_expression: . cast_expression
   34                          | . multiplicative_expression '*' cast_expression
   35                          | . multiplicative_expression '/' cast_expression
   36                          | . multiplicative_expression '%' cast_expression
   37 additive_expression: . multiplicative_expression
   38                    | . additive_expression '+' multiplicative_expression
   39                    | . additive_expression '-' multiplicative_expression
   40 shift_expression: . additive_expression
   41                 | . shift_expression LEFT_OP additive_expression
   42                 | . shift_expression RIGHT_OP additive_expression
   43 relational_expression: . shift_expression
   44                      | . relational_expression '<' shift_expression
   45                      | . relational_expression '>' shift_expression
   46                      | . relational_expression LE_OP shift_expression
   47                      | . relational_expression GE_OP shift_expression
   48 equality_expression: . relational_expression
   49                    | . equality_expression EQ_OP relational_expression
   50                    | . equality_expression NE_OP relational_expression
   51 and_expression: . equality_expression
   52               | . and_expression '&' equality_expression
   53 exclusive_or_expression: . and_expression
   54                        | . exclusive_or_expression '^' and_expression
   55 inclusive_or_expression: . exclusive_or_expression
   56                        | . inclusive_or_expression '|' exclusive_or_expression
   58 logical_and_expression: logical_and_expression AND_OP . inclusive_or_expression

    IDENTIFIER      shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    OCT_CONSTANT    shift, and go to state 64
    DEC_CONSTANT    shift, and go to state 65
    FLT_CONSTANT    shift, and go to state 66
    STRING_LITERAL  shift, and go to state 67
    INC_OP          shift, and go to state 68
    DEC_OP          shift, and go to state 69
    SIZEOF          shift, and go to state 70
    '('             shift, and go to state 81
    '-'             shift, and go to state 82
    '&'             shift, and go to state 83
    '*'             shift, and go to state 84
    '~'             shift, and go to state 85
    '!'             shift, and go to state 86

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 125
    cast_expression            go to state 92
    multiplicative_expression  go to state 93
    additive_expression        go to state 94
    shift_expression           go to state 95
    relational_expression      go to state 96
    equality_expression        go to state 97
    and_expression             go to state 98
    exclusive_or_expression    go to state 99
    inclusive_or_expression    go to state 262


state 198

    1 primary_expression: . IDENTIFIER
    2                   | . HEX_CONSTANT
    3                   | . OCT_CONSTANT
    4                   | . DEC_CONSTANT
    5                   | . FLT_CONSTANT
    6                   | . STRING_LITERAL
    7                   | . '(' expression ')'
    8 postfix_expression: . primary_expression
    9                   | . postfix_expression '[' expression ']'
   10                   | . postfix_expression '(' ')'
   11                   | . postfix_expression '(' argument_expression_list ')'
   12                   | . postfix_expression '.' IDENTIFIER
   13                   | . postfix_expression PTR_OP IDENTIFIER
   14                   | . postfix_expression INC_OP
   15                   | . postfix_expression DEC_OP
   18 unary_expression: . postfix_expression
   19                 | . INC_OP unary_expression
   20                 | . DEC_OP unary_expression
   21                 | . '-' cast_expression
   22                 | . '&' cast_expression
   23                 | . '*' cast_expression
   24                 | . '~' cast_expression
   25                 | . '!' cast_expression
   26                 | . SIZEOF unary_expression
   27                 | . SIZEOF '(' CHAR ')'
   28                 | . SIZEOF '(' SHORT ')'
   29                 | . SIZEOF '(' INT ')'
   30                 | . SIZEOF '(' LONG ')'
   31                 | . SIZEOF '(' FLOAT ')'
   32 cast_expression: . unary_expression
   33 multiplicative_expression: . cast_expression
   34                          | . multiplicative_expression '*' cast_expression
   35                          | . multiplicative_expression '/' cast_expression
   36                          | . multiplicative_expression '%' cast_expression
   37 additive_expression: . multiplicative_expression
   38                    | . additive_expression '+' multiplicative_expression
   39                    | . additive_expression '-' multiplicative_expression
   40 shift_expression: . additive_expression
   41                 | . shift_expression LEFT_OP additive_expression
   42                 | . shift_expression RIGHT_OP additive_expression
   43 relational_expression: . shift_expression
   44                      | . relational_expression '<' shift_expression
   45                      | . relational_expression '>' shift_expression
   46                      | . relational_expression LE_OP shift_expression
   47                      | . relational_expression GE_OP shift_expression
   48 equality_expression: . relational_expression
   49                    | . equality_expression EQ_OP relational_expression
   50                    | . equality_expression NE_OP relational_expression
   51 and_expression: . equality_expression
   52               | . and_expression '&' equality_expression
   53 exclusive_or_expression: . and_expression
   54                        | . exclusive_or_expression '^' and_expression
   55 inclusive_or_expression: . exclusive_or_expression
   56                        | . inclusive_or_expression '|' exclusive_or_expression
   57 logical_and_expression: . inclusive_or_expression
   58                       | . logical_and_expression AND_OP inclusive_or_expression
   60 logical_or_expression: logical_or_expression OR_OP . logical_and_expression

    IDENTIFIER      shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    OCT_CONSTANT    shift, and go to state 64
    DEC_CONSTANT    shift, and go to state 65
    FLT_CONSTANT    shift, and go to state 66
    STRING_LITERAL  shift, and go to state 67
    INC_OP          shift, and go to state 68
    DEC_OP          shift, and go to state 69
    SIZEOF          shift, and go to state 70
    '('             shift, and go to state 81
    '-'             shift, and go to state 82
    '&'             shift, and go to state 83
    '*'             shift, and go to state 84
    '~'             shift, and go to state 85
    '!'             shift, and go to state 86

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 125
    cast_expression            go to state 92
    multiplicative_expression  go to state 93
    additive_expression        go to state 94
    shift_expression           go to state 95
    relational_expression      go to state 96
    equality_expression        go to state 97
    and_expression             go to state 98
    exclusive_or_expression    go to state 99
    inclusive_or_expression    go to state 100
    logical_and_expression     go to state 263


state 199

    1 primary_expression: . IDENTIFIER
    2                   | . HEX_CONSTANT
    3                   | . OCT_CONSTANT
    4                   | . DEC_CONSTANT
    5                   | . FLT_CONSTANT
    6                   | . STRING_LITERAL
    7                   | . '(' expression ')'
    8 postfix_expression: . primary_expression
    9                   | . postfix_expression '[' expression ']'
   10                   | . postfix_expression '(' ')'
   11                   | . postfix_expression '(' argument_expression_list ')'
   12                   | . postfix_expression '.' IDENTIFIER
   13                   | . postfix_expression PTR_OP IDENTIFIER
   14                   | . postfix_expression INC_OP
   15                   | . postfix_expression DEC_OP
   18 unary_expression: . postfix_expression
   19                 | . INC_OP unary_expression
   20                 | . DEC_OP unary_expression
   21                 | . '-' cast_expression
   22                 | . '&' cast_expression
   23                 | . '*' cast_expression
   24                 | . '~' cast_expression
   25                 | . '!' cast_expression
   26                 | . SIZEOF unary_expression
   27                 | . SIZEOF '(' CHAR ')'
   28                 | . SIZEOF '(' SHORT ')'
   29                 | . SIZEOF '(' INT ')'
   30                 | . SIZEOF '(' LONG ')'
   31                 | . SIZEOF '(' FLOAT ')'
   32 cast_expression: . unary_expression
   33 multiplicative_expression: . cast_expression
   34                          | . multiplicative_expression '*' cast_expression
   35                          | . multiplicative_expression '/' cast_expression
   36                          | . multiplicative_expression '%' cast_expression
   37 additive_expression: . multiplicative_expression
   38                    | . additive_expression '+' multiplicative_expression
   39                    | . additive_expression '-' multiplicative_expression
   40 shift_expression: . additive_expression
   41                 | . shift_expression LEFT_OP additive_expression
   42                 | . shift_expression RIGHT_OP additive_expression
   43 relational_expression: . shift_expression
   44                      | . relational_expression '<' shift_expression
   45                      | . relational_expression '>' shift_expression
   46                      | . relational_expression LE_OP shift_expression
   47                      | . relational_expression GE_OP shift_expression
   48 equality_expression: . relational_expression
   49                    | . equality_expression EQ_OP relational_expression
   50                    | . equality_expression NE_OP relational_expression
   51 and_expression: . equality_expression
   52               | . and_expression '&' equality_expression
   53 exclusive_or_expression: . and_expression
   54                        | . exclusive_or_expression '^' and_expression
   55 inclusive_or_expression: . exclusive_or_expression
   56                        | . inclusive_or_expression '|' exclusive_or_expression
   57 logical_and_expression: . inclusive_or_expression
   58                       | . logical_and_expression AND_OP inclusive_or_expression
   59 logical_or_expression: . logical_and_expression
   60                      | . logical_or_expression OR_OP logical_and_expression
   61 conditional_expression: . logical_or_expression
   62 assignment_expression: . conditional_expression
   63                      | . unary_expression assignment_operator assignment_expression
   76 expression: expression ',' . assignment_expression

    IDENTIFIER      shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    OCT_CONSTANT    shift, and go to state 64
    DEC_CONSTANT    shift, and go to state 65
    FLT_CONSTANT    shift, and go to state 66
    STRING_LITERAL  shift, and go to state 67
    INC_OP          shift, and go to state 68
    DEC_OP          shift, and go to state 69
    SIZEOF          shift, and go to state 70
    '('             shift, and go to state 81
    '-'             shift, and go to state 82
    '&'             shift, and go to state 83
    '*'             shift, and go to state 84
    '~'             shift, and go to state 85
    '!'             shift, and go to state 86

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    cast_expression            go to state 92
    multiplicative_expression  go to state 93
    additive_expression        go to state 94
    shift_expression           go to state 95
    relational_expression      go to state 96
    equality_expression        go to state 97
    and_expression             go to state 98
    exclusive_or_expression    go to state 99
    inclusive_or_expression    go to state 100
    logical_and_expression     go to state 101
    logical_or_expression      go to state 102
    conditional_expression     go to state 103
    assignment_expression      go to state 264


state 200

  167 expression_statement: expression ';' .

    $default  reduce using rule 167 (expression_statement)


state 201

  163 declaration_list: declaration_list declaration .

    $default  reduce using rule 163 (declaration_list)


state 202

    1 primary_expression: . IDENTIFIER
    2                   | . HEX_CONSTANT
    3                   | . OCT_CONSTANT
    4                   | . DEC_CONSTANT
    5                   | . FLT_CONSTANT
    6                   | . STRING_LITERAL
    7                   | . '(' expression ')'
    8 postfix_expression: . primary_expression
    9                   | . postfix_expression '[' expression ']'
   10                   | . postfix_expression '(' ')'
   11                   | . postfix_expression '(' argument_expression_list ')'
   12                   | . postfix_expression '.' IDENTIFIER
   13                   | . postfix_expression PTR_OP IDENTIFIER
   14                   | . postfix_expression INC_OP
   15                   | . postfix_expression DEC_OP
   18 unary_expression: . postfix_expression
   19                 | . INC_OP unary_expression
   20                 | . DEC_OP unary_expression
   21                 | . '-' cast_expression
   22                 | . '&' cast_expression
   23                 | . '*' cast_expression
   24                 | . '~' cast_expression
   25                 | . '!' cast_expression
   26                 | . SIZEOF unary_expression
   27                 | . SIZEOF '(' CHAR ')'
   28                 | . SIZEOF '(' SHORT ')'
   29                 | . SIZEOF '(' INT ')'
   30                 | . SIZEOF '(' LONG ')'
   31                 | . SIZEOF '(' FLOAT ')'
   32 cast_expression: . unary_expression
   33 multiplicative_expression: . cast_expression
   34                          | . multiplicative_expression '*' cast_expression
   35                          | . multiplicative_expression '/' cast_expression
   36                          | . multiplicative_expression '%' cast_expression
   37 additive_expression: . multiplicative_expression
   38                    | . additive_expression '+' multiplicative_expression
   39                    | . additive_expression '-' multiplicative_expression
   40 shift_expression: . additive_expression
   41                 | . shift_expression LEFT_OP additive_expression
   42                 | . shift_expression RIGHT_OP additive_expression
   43 relational_expression: . shift_expression
   44                      | . relational_expression '<' shift_expression
   45                      | . relational_expression '>' shift_expression
   46                      | . relational_expression LE_OP shift_expression
   47                      | . relational_expression GE_OP shift_expression
   48 equality_expression: . relational_expression
   49                    | . equality_expression EQ_OP relational_expression
   50                    | . equality_expression NE_OP relational_expression
   51 and_expression: . equality_expression
   52               | . and_expression '&' equality_expression
   53 exclusive_or_expression: . and_expression
   54                        | . exclusive_or_expression '^' and_expression
   55 inclusive_or_expression: . exclusive_or_expression
   56                        | . inclusive_or_expression '|' exclusive_or_expression
   57 logical_and_expression: . inclusive_or_expression
   58                       | . logical_and_expression AND_OP inclusive_or_expression
   59 logical_or_expression: . logical_and_expression
   60                      | . logical_or_expression OR_OP logical_and_expression
   61 conditional_expression: . logical_or_expression
   62 assignment_expression: . conditional_expression
   63                      | . unary_expression assignment_operator assignment_expression
   75 expression: . assignment_expression
   76           | . expression ',' assignment_expression
  151 statement: . labeled_statement
  152          | . compound_statement
  153          | . expression_statement
  154          | . selection_statement
  155          | . iteration_statement
  156          | . jump_statement
  157 labeled_statement: . CASE constant_expression ':' statement
  158                  | . DEFAULT ':' statement
  159 compound_statement: . '{' '}'
  160                   | . '{' statement_list '}'
  161                   | . '{' declaration_list statement_list '}'
  161                   | '{' declaration_list statement_list . '}'
  165 statement_list: statement_list . statement
  166 expression_statement: . ';'
  167                     | . expression ';'
  168 selection_statement: . IF '(' expression ')' statement
  169                    | . IF '(' expression ')' statement ELSE statement
  170                    | . SWITCH '(' expression ')' statement
  171 iteration_statement: . WHILE '(' expression ')' statement
  172                    | . DO statement WHILE '(' expression ')' ';'
  173                    | . FOR '(' expression_statement expression_statement expression ')' statement
  174 jump_statement: . CONTINUE ';'
  175               | . BREAK ';'
  176               | . RETURN ';'
  177               | . RETURN expression ';'

    IDENTIFIER      shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    OCT_CONSTANT    shift, and go to state 64
    DEC_CONSTANT    shift, and go to state 65
    FLT_CONSTANT    shift, and go to state 66
    STRING_LITERAL  shift, and go to state 67
    INC_OP          shift, and go to state 68
    DEC_OP          shift, and go to state 69
    SIZEOF          shift, and go to state 70
    CASE            shift, and go to state 71
    DEFAULT         shift, and go to state 72
    IF              shift, and go to state 73
    SWITCH          shift, and go to state 74
    WHILE           shift, and go to state 75
    DO              shift, and go to state 76
    FOR             shift, and go to state 77
    CONTINUE        shift, and go to state 78
    BREAK           shift, and go to state 79
    RETURN          shift, and go to state 80
    '('             shift, and go to state 81
    '-'             shift, and go to state 82
    '&'             shift, and go to state 83
    '*'             shift, and go to state 84
    '~'             shift, and go to state 85
    '!'             shift, and go to state 86
    ';'             shift, and go to state 87
    '{'             shift, and go to state 46
    '}'             shift, and go to state 265

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    cast_expression            go to state 92
    multiplicative_expression  go to state 93
    additive_expression        go to state 94
    shift_expression           go to state 95
    relational_expression      go to state 96
    equality_expression        go to state 97
    and_expression             go to state 98
    exclusive_or_expression    go to state 99
    inclusive_or_expression    go to state 100
    logical_and_expression     go to state 101
    logical_or_expression      go to state 102
    conditional_expression     go to state 103
    assignment_expression      go to state 104
    expression                 go to state 105
    statement                  go to state 204
    labeled_statement          go to state 109
    compound_statement         go to state 110
    expression_statement       go to state 113
    selection_statement        go to state 114
    iteration_statement        go to state 115
    jump_statement             go to state 116


state 203

  160 compound_statement: '{' statement_list '}' .

    $default  reduce using rule 160 (compound_statement)


state 204

  165 statement_list: statement_list statement .

    $default  reduce using rule 165 (statement_list)


state 205

  140 parameter_declaration: declaration_specifiers declarator .

    $default  reduce using rule 140 (parameter_declaration)


state 206

  126 declarator: pointer . direct_declarator
  128 direct_declarator: . IDENTIFIER
  129                  | . direct_declarator '[' constant_expression ']'
  130                  | . direct_declarator '[' ']'
  131                  | . direct_declarator '(' parameter_type_list ')'
  132                  | . direct_declarator '(' identifier_list ')'
  133                  | . direct_declarator '(' ')'
  145 abstract_declarator: pointer .  [')', ',']

    IDENTIFIER  shift, and go to state 1

    $default  reduce using rule 145 (abstract_declarator)

    direct_declarator  go to state 50


state 207

  141 parameter_declaration: declaration_specifiers abstract_declarator .

    $default  reduce using rule 141 (parameter_declaration)


state 208

  131 direct_declarator: direct_declarator '(' parameter_type_list ')' .

    $default  reduce using rule 131 (direct_declarator)


state 209

   79 declaration_specifiers: . storage_class_specifier
   80                       | . storage_class_specifier declaration_specifiers
   81                       | . type_specifier
   82                       | . type_specifier declaration_specifiers
   83                       | . type_qualifier
   84                       | . type_qualifier declaration_specifiers
   89 storage_class_specifier: . TYPEDEF
   90                        | . EXTERN
   91                        | . STATIC
   92                        | . AUTO
   93 type_specifier: . VOID
   94               | . CHAR
   95               | . SHORT
   96               | . INT
   97               | . LONG
   98               | . FLOAT
   99               | . DOUBLE
  100               | . SIGNED
  101               | . UNSIGNED
  102               | . struct_or_union_specifier
  103               | . enum_specifier
  104 struct_or_union_specifier: . struct_or_union IDENTIFIER '{' struct_declaration_list '}'
  105                          | . struct_or_union IDENTIFIER
  106 struct_or_union: . STRUCT
  107                | . UNION
  117 enum_specifier: . ENUM '{' enumerator_list '}'
  118               | . ENUM IDENTIFIER '{' enumerator_list '}'
  119               | . ENUM IDENTIFIER
  124 type_qualifier: . CONST
  125               | . VOLATILE
  139 parameter_list: parameter_list ',' . parameter_declaration
  140 parameter_declaration: . declaration_specifiers declarator
  141                      | . declaration_specifiers abstract_declarator
  142                      | . declaration_specifiers

    TYPEDEF   shift, and go to state 2
    EXTERN    shift, and go to state 3
    STATIC    shift, and go to state 4
    AUTO      shift, and go to state 5
    CHAR      shift, and go to state 6
    SHORT     shift, and go to state 7
    INT       shift, and go to state 8
    LONG      shift, and go to state 9
    SIGNED    shift, and go to state 10
    UNSIGNED  shift, and go to state 11
    FLOAT     shift, and go to state 12
    DOUBLE    shift, and go to state 13
    CONST     shift, and go to state 14
    VOLATILE  shift, and go to state 15
    VOID      shift, and go to state 16
    STRUCT    shift, and go to state 17
    UNION     shift, and go to state 18
    ENUM      shift, and go to state 19

    declaration_specifiers     go to state 119
    storage_class_specifier    go to state 23
    type_specifier             go to state 24
    struct_or_union_specifier  go to state 25
    struct_or_union            go to state 26
    enum_specifier             go to state 27
    type_qualifier             go to state 28
    parameter_declaration      go to state 266


state 210

  132 direct_declarator: direct_declarator '(' identifier_list ')' .

    $default  reduce using rule 132 (direct_declarator)


state 211

  144 identifier_list: identifier_list ',' . IDENTIFIER

    IDENTIFIER  shift, and go to state 267


state 212

  129 direct_declarator: direct_declarator '[' constant_expression ']' .

    $default  reduce using rule 129 (direct_declarator)


state 213

  118 enum_specifier: ENUM IDENTIFIER '{' enumerator_list '}' .

    $default  reduce using rule 118 (enum_specifier)


state 214

  123 enumerator: IDENTIFIER ASSIGN_OP constant_expression .

    $default  reduce using rule 123 (enumerator)


state 215

  121 enumerator_list: enumerator_list ',' enumerator .

    $default  reduce using rule 121 (enumerator_list)


state 216

  149 initializer_list: initializer .

    $default  reduce using rule 149 (initializer_list)


state 217

  147 initializer: '{' initializer_list . '}'
  148            | '{' initializer_list . ',' '}'
  150 initializer_list: initializer_list . ',' initializer

    ','  shift, and go to state 268
    '}'  shift, and go to state 269


state 218

  111 specifier_qualifier_list: type_specifier specifier_qualifier_list .

    $default  reduce using rule 111 (specifier_qualifier_list)


state 219

  104 struct_or_union_specifier: struct_or_union IDENTIFIER '{' struct_declaration_list '}' .

    $default  reduce using rule 104 (struct_or_union_specifier)


state 220

  109 struct_declaration_list: struct_declaration_list struct_declaration .

    $default  reduce using rule 109 (struct_declaration_list)


state 221

  110 struct_declaration: specifier_qualifier_list struct_declarator_list . ';'

    ';'  shift, and go to state 270


state 222

  115 struct_declarator_list: struct_declarator .

    $default  reduce using rule 115 (struct_declarator_list)


state 223

  116 struct_declarator: declarator .

    $default  reduce using rule 116 (struct_declarator)


state 224

  113 specifier_qualifier_list: type_qualifier specifier_qualifier_list .

    $default  reduce using rule 113 (specifier_qualifier_list)


state 225

   27 unary_expression: SIZEOF '(' CHAR . ')'

    ')'  shift, and go to state 271


state 226

   28 unary_expression: SIZEOF '(' SHORT . ')'

    ')'  shift, and go to state 272


state 227

   29 unary_expression: SIZEOF '(' INT . ')'

    ')'  shift, and go to state 273


state 228

   30 unary_expression: SIZEOF '(' LONG . ')'

    ')'  shift, and go to state 274


state 229

   31 unary_expression: SIZEOF '(' FLOAT . ')'

    ')'  shift, and go to state 275


state 230

    1 primary_expression: . IDENTIFIER
    2                   | . HEX_CONSTANT
    3                   | . OCT_CONSTANT
    4                   | . DEC_CONSTANT
    5                   | . FLT_CONSTANT
    6                   | . STRING_LITERAL
    7                   | . '(' expression ')'
    8 postfix_expression: . primary_expression
    9                   | . postfix_expression '[' expression ']'
   10                   | . postfix_expression '(' ')'
   11                   | . postfix_expression '(' argument_expression_list ')'
   12                   | . postfix_expression '.' IDENTIFIER
   13                   | . postfix_expression PTR_OP IDENTIFIER
   14                   | . postfix_expression INC_OP
   15                   | . postfix_expression DEC_OP
   18 unary_expression: . postfix_expression
   19                 | . INC_OP unary_expression
   20                 | . DEC_OP unary_expression
   21                 | . '-' cast_expression
   22                 | . '&' cast_expression
   23                 | . '*' cast_expression
   24                 | . '~' cast_expression
   25                 | . '!' cast_expression
   26                 | . SIZEOF unary_expression
   27                 | . SIZEOF '(' CHAR ')'
   28                 | . SIZEOF '(' SHORT ')'
   29                 | . SIZEOF '(' INT ')'
   30                 | . SIZEOF '(' LONG ')'
   31                 | . SIZEOF '(' FLOAT ')'
   32 cast_expression: . unary_expression
   33 multiplicative_expression: . cast_expression
   34                          | . multiplicative_expression '*' cast_expression
   35                          | . multiplicative_expression '/' cast_expression
   36                          | . multiplicative_expression '%' cast_expression
   37 additive_expression: . multiplicative_expression
   38                    | . additive_expression '+' multiplicative_expression
   39                    | . additive_expression '-' multiplicative_expression
   40 shift_expression: . additive_expression
   41                 | . shift_expression LEFT_OP additive_expression
   42                 | . shift_expression RIGHT_OP additive_expression
   43 relational_expression: . shift_expression
   44                      | . relational_expression '<' shift_expression
   45                      | . relational_expression '>' shift_expression
   46                      | . relational_expression LE_OP shift_expression
   47                      | . relational_expression GE_OP shift_expression
   48 equality_expression: . relational_expression
   49                    | . equality_expression EQ_OP relational_expression
   50                    | . equality_expression NE_OP relational_expression
   51 and_expression: . equality_expression
   52               | . and_expression '&' equality_expression
   53 exclusive_or_expression: . and_expression
   54                        | . exclusive_or_expression '^' and_expression
   55 inclusive_or_expression: . exclusive_or_expression
   56                        | . inclusive_or_expression '|' exclusive_or_expression
   57 logical_and_expression: . inclusive_or_expression
   58                       | . logical_and_expression AND_OP inclusive_or_expression
   59 logical_or_expression: . logical_and_expression
   60                      | . logical_or_expression OR_OP logical_and_expression
   61 conditional_expression: . logical_or_expression
   62 assignment_expression: . conditional_expression
   63                      | . unary_expression assignment_operator assignment_expression
   75 expression: . assignment_expression
   76           | . expression ',' assignment_expression
  151 statement: . labeled_statement
  152          | . compound_statement
  153          | . expression_statement
  154          | . selection_statement
  155          | . iteration_statement
  156          | . jump_statement
  157 labeled_statement: . CASE constant_expression ':' statement
  157                  | CASE constant_expression ':' . statement
  158                  | . DEFAULT ':' statement
  159 compound_statement: . '{' '}'
  160                   | . '{' statement_list '}'
  161                   | . '{' declaration_list statement_list '}'
  166 expression_statement: . ';'
  167                     | . expression ';'
  168 selection_statement: . IF '(' expression ')' statement
  169                    | . IF '(' expression ')' statement ELSE statement
  170                    | . SWITCH '(' expression ')' statement
  171 iteration_statement: . WHILE '(' expression ')' statement
  172                    | . DO statement WHILE '(' expression ')' ';'
  173                    | . FOR '(' expression_statement expression_statement expression ')' statement
  174 jump_statement: . CONTINUE ';'
  175               | . BREAK ';'
  176               | . RETURN ';'
  177               | . RETURN expression ';'

    IDENTIFIER      shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    OCT_CONSTANT    shift, and go to state 64
    DEC_CONSTANT    shift, and go to state 65
    FLT_CONSTANT    shift, and go to state 66
    STRING_LITERAL  shift, and go to state 67
    INC_OP          shift, and go to state 68
    DEC_OP          shift, and go to state 69
    SIZEOF          shift, and go to state 70
    CASE            shift, and go to state 71
    DEFAULT         shift, and go to state 72
    IF              shift, and go to state 73
    SWITCH          shift, and go to state 74
    WHILE           shift, and go to state 75
    DO              shift, and go to state 76
    FOR             shift, and go to state 77
    CONTINUE        shift, and go to state 78
    BREAK           shift, and go to state 79
    RETURN          shift, and go to state 80
    '('             shift, and go to state 81
    '-'             shift, and go to state 82
    '&'             shift, and go to state 83
    '*'             shift, and go to state 84
    '~'             shift, and go to state 85
    '!'             shift, and go to state 86
    ';'             shift, and go to state 87
    '{'             shift, and go to state 46

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    cast_expression            go to state 92
    multiplicative_expression  go to state 93
    additive_expression        go to state 94
    shift_expression           go to state 95
    relational_expression      go to state 96
    equality_expression        go to state 97
    and_expression             go to state 98
    exclusive_or_expression    go to state 99
    inclusive_or_expression    go to state 100
    logical_and_expression     go to state 101
    logical_or_expression      go to state 102
    conditional_expression     go to state 103
    assignment_expression      go to state 104
    expression                 go to state 105
    statement                  go to state 276
    labeled_statement          go to state 109
    compound_statement         go to state 110
    expression_statement       go to state 113
    selection_statement        go to state 114
    iteration_statement        go to state 115
    jump_statement             go to state 116


state 231

  158 labeled_statement: DEFAULT ':' statement .

    $default  reduce using rule 158 (labeled_statement)


state 232

   76 expression: expression . ',' assignment_expression
  168 selection_statement: IF '(' expression . ')' statement
  169                    | IF '(' expression . ')' statement ELSE statement

    ')'  shift, and go to state 277
    ','  shift, and go to state 199


state 233

   76 expression: expression . ',' assignment_expression
  170 selection_statement: SWITCH '(' expression . ')' statement

    ')'  shift, and go to state 278
    ','  shift, and go to state 199


state 234

   76 expression: expression . ',' assignment_expression
  171 iteration_statement: WHILE '(' expression . ')' statement

    ')'  shift, and go to state 279
    ','  shift, and go to state 199


state 235

  172 iteration_statement: DO statement WHILE . '(' expression ')' ';'

    '('  shift, and go to state 280


state 236

    1 primary_expression: . IDENTIFIER
    2                   | . HEX_CONSTANT
    3                   | . OCT_CONSTANT
    4                   | . DEC_CONSTANT
    5                   | . FLT_CONSTANT
    6                   | . STRING_LITERAL
    7                   | . '(' expression ')'
    8 postfix_expression: . primary_expression
    9                   | . postfix_expression '[' expression ']'
   10                   | . postfix_expression '(' ')'
   11                   | . postfix_expression '(' argument_expression_list ')'
   12                   | . postfix_expression '.' IDENTIFIER
   13                   | . postfix_expression PTR_OP IDENTIFIER
   14                   | . postfix_expression INC_OP
   15                   | . postfix_expression DEC_OP
   18 unary_expression: . postfix_expression
   19                 | . INC_OP unary_expression
   20                 | . DEC_OP unary_expression
   21                 | . '-' cast_expression
   22                 | . '&' cast_expression
   23                 | . '*' cast_expression
   24                 | . '~' cast_expression
   25                 | . '!' cast_expression
   26                 | . SIZEOF unary_expression
   27                 | . SIZEOF '(' CHAR ')'
   28                 | . SIZEOF '(' SHORT ')'
   29                 | . SIZEOF '(' INT ')'
   30                 | . SIZEOF '(' LONG ')'
   31                 | . SIZEOF '(' FLOAT ')'
   32 cast_expression: . unary_expression
   33 multiplicative_expression: . cast_expression
   34                          | . multiplicative_expression '*' cast_expression
   35                          | . multiplicative_expression '/' cast_expression
   36                          | . multiplicative_expression '%' cast_expression
   37 additive_expression: . multiplicative_expression
   38                    | . additive_expression '+' multiplicative_expression
   39                    | . additive_expression '-' multiplicative_expression
   40 shift_expression: . additive_expression
   41                 | . shift_expression LEFT_OP additive_expression
   42                 | . shift_expression RIGHT_OP additive_expression
   43 relational_expression: . shift_expression
   44                      | . relational_expression '<' shift_expression
   45                      | . relational_expression '>' shift_expression
   46                      | . relational_expression LE_OP shift_expression
   47                      | . relational_expression GE_OP shift_expression
   48 equality_expression: . relational_expression
   49                    | . equality_expression EQ_OP relational_expression
   50                    | . equality_expression NE_OP relational_expression
   51 and_expression: . equality_expression
   52               | . and_expression '&' equality_expression
   53 exclusive_or_expression: . and_expression
   54                        | . exclusive_or_expression '^' and_expression
   55 inclusive_or_expression: . exclusive_or_expression
   56                        | . inclusive_or_expression '|' exclusive_or_expression
   57 logical_and_expression: . inclusive_or_expression
   58                       | . logical_and_expression AND_OP inclusive_or_expression
   59 logical_or_expression: . logical_and_expression
   60                      | . logical_or_expression OR_OP logical_and_expression
   61 conditional_expression: . logical_or_expression
   62 assignment_expression: . conditional_expression
   63                      | . unary_expression assignment_operator assignment_expression
   75 expression: . assignment_expression
   76           | . expression ',' assignment_expression
  166 expression_statement: . ';'
  167                     | . expression ';'
  173 iteration_statement: FOR '(' expression_statement . expression_statement expression ')' statement

    IDENTIFIER      shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    OCT_CONSTANT    shift, and go to state 64
    DEC_CONSTANT    shift, and go to state 65
    FLT_CONSTANT    shift, and go to state 66
    STRING_LITERAL  shift, and go to state 67
    INC_OP          shift, and go to state 68
    DEC_OP          shift, and go to state 69
    SIZEOF          shift, and go to state 70
    '('             shift, and go to state 81
    '-'             shift, and go to state 82
    '&'             shift, and go to state 83
    '*'             shift, and go to state 84
    '~'             shift, and go to state 85
    '!'             shift, and go to state 86
    ';'             shift, and go to state 87

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    cast_expression            go to state 92
    multiplicative_expression  go to state 93
    additive_expression        go to state 94
    shift_expression           go to state 95
    relational_expression      go to state 96
    equality_expression        go to state 97
    and_expression             go to state 98
    exclusive_or_expression    go to state 99
    inclusive_or_expression    go to state 100
    logical_and_expression     go to state 101
    logical_or_expression      go to state 102
    conditional_expression     go to state 103
    assignment_expression      go to state 104
    expression                 go to state 105
    expression_statement       go to state 281


state 237

  177 jump_statement: RETURN expression ';' .

    $default  reduce using rule 177 (jump_statement)


state 238

    7 primary_expression: '(' expression ')' .

    $default  reduce using rule 7 (primary_expression)


state 239

   13 postfix_expression: postfix_expression PTR_OP IDENTIFIER .

    $default  reduce using rule 13 (postfix_expression)


state 240

   10 postfix_expression: postfix_expression '(' ')' .

    $default  reduce using rule 10 (postfix_expression)


state 241

   11 postfix_expression: postfix_expression '(' argument_expression_list . ')'
   17 argument_expression_list: argument_expression_list . ',' assignment_expression

    ')'  shift, and go to state 282
    ','  shift, and go to state 283


state 242

   16 argument_expression_list: assignment_expression .

    $default  reduce using rule 16 (argument_expression_list)


state 243

    9 postfix_expression: postfix_expression '[' expression . ']'
   76 expression: expression . ',' assignment_expression

    ']'  shift, and go to state 284
    ','  shift, and go to state 199


state 244

   12 postfix_expression: postfix_expression '.' IDENTIFIER .

    $default  reduce using rule 12 (postfix_expression)


state 245

   63 assignment_expression: unary_expression assignment_operator assignment_expression .

    $default  reduce using rule 63 (assignment_expression)


state 246

   34 multiplicative_expression: multiplicative_expression '*' cast_expression .

    $default  reduce using rule 34 (multiplicative_expression)


state 247

   35 multiplicative_expression: multiplicative_expression '/' cast_expression .

    $default  reduce using rule 35 (multiplicative_expression)


state 248

   36 multiplicative_expression: multiplicative_expression '%' cast_expression .

    $default  reduce using rule 36 (multiplicative_expression)


state 249

   34 multiplicative_expression: multiplicative_expression . '*' cast_expression
   35                          | multiplicative_expression . '/' cast_expression
   36                          | multiplicative_expression . '%' cast_expression
   39 additive_expression: additive_expression '-' multiplicative_expression .  [LEFT_OP, RIGHT_OP, LE_OP, GE_OP, EQ_OP, NE_OP, AND_OP, OR_OP, ')', ']', ',', '-', '&', '+', '<', '>', '^', '|', ';', '}', ':']

    '*'  shift, and go to state 181
    '/'  shift, and go to state 182
    '%'  shift, and go to state 183

    $default  reduce using rule 39 (additive_expression)


state 250

   34 multiplicative_expression: multiplicative_expression . '*' cast_expression
   35                          | multiplicative_expression . '/' cast_expression
   36                          | multiplicative_expression . '%' cast_expression
   38 additive_expression: additive_expression '+' multiplicative_expression .  [LEFT_OP, RIGHT_OP, LE_OP, GE_OP, EQ_OP, NE_OP, AND_OP, OR_OP, ')', ']', ',', '-', '&', '+', '<', '>', '^', '|', ';', '}', ':']

    '*'  shift, and go to state 181
    '/'  shift, and go to state 182
    '%'  shift, and go to state 183

    $default  reduce using rule 38 (additive_expression)


state 251

   38 additive_expression: additive_expression . '+' multiplicative_expression
   39                    | additive_expression . '-' multiplicative_expression
   41 shift_expression: shift_expression LEFT_OP additive_expression .  [LEFT_OP, RIGHT_OP, LE_OP, GE_OP, EQ_OP, NE_OP, AND_OP, OR_OP, ')', ']', ',', '&', '<', '>', '^', '|', ';', '}', ':']

    '-'  shift, and go to state 184
    '+'  shift, and go to state 185

    $default  reduce using rule 41 (shift_expression)


state 252

   38 additive_expression: additive_expression . '+' multiplicative_expression
   39                    | additive_expression . '-' multiplicative_expression
   42 shift_expression: shift_expression RIGHT_OP additive_expression .  [LEFT_OP, RIGHT_OP, LE_OP, GE_OP, EQ_OP, NE_OP, AND_OP, OR_OP, ')', ']', ',', '&', '<', '>', '^', '|', ';', '}', ':']

    '-'  shift, and go to state 184
    '+'  shift, and go to state 185

    $default  reduce using rule 42 (shift_expression)


state 253

   41 shift_expression: shift_expression . LEFT_OP additive_expression
   42                 | shift_expression . RIGHT_OP additive_expression
   46 relational_expression: relational_expression LE_OP shift_expression .  [LE_OP, GE_OP, EQ_OP, NE_OP, AND_OP, OR_OP, ')', ']', ',', '&', '<', '>', '^', '|', ';', '}', ':']

    LEFT_OP   shift, and go to state 186
    RIGHT_OP  shift, and go to state 187

    $default  reduce using rule 46 (relational_expression)


state 254

   41 shift_expression: shift_expression . LEFT_OP additive_expression
   42                 | shift_expression . RIGHT_OP additive_expression
   47 relational_expression: relational_expression GE_OP shift_expression .  [LE_OP, GE_OP, EQ_OP, NE_OP, AND_OP, OR_OP, ')', ']', ',', '&', '<', '>', '^', '|', ';', '}', ':']

    LEFT_OP   shift, and go to state 186
    RIGHT_OP  shift, and go to state 187

    $default  reduce using rule 47 (relational_expression)


state 255

   41 shift_expression: shift_expression . LEFT_OP additive_expression
   42                 | shift_expression . RIGHT_OP additive_expression
   44 relational_expression: relational_expression '<' shift_expression .  [LE_OP, GE_OP, EQ_OP, NE_OP, AND_OP, OR_OP, ')', ']', ',', '&', '<', '>', '^', '|', ';', '}', ':']

    LEFT_OP   shift, and go to state 186
    RIGHT_OP  shift, and go to state 187

    $default  reduce using rule 44 (relational_expression)


state 256

   41 shift_expression: shift_expression . LEFT_OP additive_expression
   42                 | shift_expression . RIGHT_OP additive_expression
   45 relational_expression: relational_expression '>' shift_expression .  [LE_OP, GE_OP, EQ_OP, NE_OP, AND_OP, OR_OP, ')', ']', ',', '&', '<', '>', '^', '|', ';', '}', ':']

    LEFT_OP   shift, and go to state 186
    RIGHT_OP  shift, and go to state 187

    $default  reduce using rule 45 (relational_expression)


state 257

   44 relational_expression: relational_expression . '<' shift_expression
   45                      | relational_expression . '>' shift_expression
   46                      | relational_expression . LE_OP shift_expression
   47                      | relational_expression . GE_OP shift_expression
   49 equality_expression: equality_expression EQ_OP relational_expression .  [EQ_OP, NE_OP, AND_OP, OR_OP, ')', ']', ',', '&', '^', '|', ';', '}', ':']

    LE_OP  shift, and go to state 188
    GE_OP  shift, and go to state 189
    '<'    shift, and go to state 190
    '>'    shift, and go to state 191

    $default  reduce using rule 49 (equality_expression)


state 258

   44 relational_expression: relational_expression . '<' shift_expression
   45                      | relational_expression . '>' shift_expression
   46                      | relational_expression . LE_OP shift_expression
   47                      | relational_expression . GE_OP shift_expression
   50 equality_expression: equality_expression NE_OP relational_expression .  [EQ_OP, NE_OP, AND_OP, OR_OP, ')', ']', ',', '&', '^', '|', ';', '}', ':']

    LE_OP  shift, and go to state 188
    GE_OP  shift, and go to state 189
    '<'    shift, and go to state 190
    '>'    shift, and go to state 191

    $default  reduce using rule 50 (equality_expression)


state 259

   49 equality_expression: equality_expression . EQ_OP relational_expression
   50                    | equality_expression . NE_OP relational_expression
   52 and_expression: and_expression '&' equality_expression .  [AND_OP, OR_OP, ')', ']', ',', '&', '^', '|', ';', '}', ':']

    EQ_OP  shift, and go to state 192
    NE_OP  shift, and go to state 193

    $default  reduce using rule 52 (and_expression)


state 260

   52 and_expression: and_expression . '&' equality_expression
   54 exclusive_or_expression: exclusive_or_expression '^' and_expression .  [AND_OP, OR_OP, ')', ']', ',', '^', '|', ';', '}', ':']

    '&'  shift, and go to state 194

    $default  reduce using rule 54 (exclusive_or_expression)


state 261

   54 exclusive_or_expression: exclusive_or_expression . '^' and_expression
   56 inclusive_or_expression: inclusive_or_expression '|' exclusive_or_expression .  [AND_OP, OR_OP, ')', ']', ',', '|', ';', '}', ':']

    '^'  shift, and go to state 195

    $default  reduce using rule 56 (inclusive_or_expression)


state 262

   56 inclusive_or_expression: inclusive_or_expression . '|' exclusive_or_expression
   58 logical_and_expression: logical_and_expression AND_OP inclusive_or_expression .  [AND_OP, OR_OP, ')', ']', ',', ';', '}', ':']

    '|'  shift, and go to state 196

    $default  reduce using rule 58 (logical_and_expression)


state 263

   58 logical_and_expression: logical_and_expression . AND_OP inclusive_or_expression
   60 logical_or_expression: logical_or_expression OR_OP logical_and_expression .  [OR_OP, ')', ']', ',', ';', '}', ':']

    AND_OP  shift, and go to state 197

    $default  reduce using rule 60 (logical_or_expression)


state 264

   76 expression: expression ',' assignment_expression .

    $default  reduce using rule 76 (expression)


state 265

  161 compound_statement: '{' declaration_list statement_list '}' .

    $default  reduce using rule 161 (compound_statement)


state 266

  139 parameter_list: parameter_list ',' parameter_declaration .

    $default  reduce using rule 139 (parameter_list)


state 267

  144 identifier_list: identifier_list ',' IDENTIFIER .

    $default  reduce using rule 144 (identifier_list)


state 268

    1 primary_expression: . IDENTIFIER
    2                   | . HEX_CONSTANT
    3                   | . OCT_CONSTANT
    4                   | . DEC_CONSTANT
    5                   | . FLT_CONSTANT
    6                   | . STRING_LITERAL
    7                   | . '(' expression ')'
    8 postfix_expression: . primary_expression
    9                   | . postfix_expression '[' expression ']'
   10                   | . postfix_expression '(' ')'
   11                   | . postfix_expression '(' argument_expression_list ')'
   12                   | . postfix_expression '.' IDENTIFIER
   13                   | . postfix_expression PTR_OP IDENTIFIER
   14                   | . postfix_expression INC_OP
   15                   | . postfix_expression DEC_OP
   18 unary_expression: . postfix_expression
   19                 | . INC_OP unary_expression
   20                 | . DEC_OP unary_expression
   21                 | . '-' cast_expression
   22                 | . '&' cast_expression
   23                 | . '*' cast_expression
   24                 | . '~' cast_expression
   25                 | . '!' cast_expression
   26                 | . SIZEOF unary_expression
   27                 | . SIZEOF '(' CHAR ')'
   28                 | . SIZEOF '(' SHORT ')'
   29                 | . SIZEOF '(' INT ')'
   30                 | . SIZEOF '(' LONG ')'
   31                 | . SIZEOF '(' FLOAT ')'
   32 cast_expression: . unary_expression
   33 multiplicative_expression: . cast_expression
   34                          | . multiplicative_expression '*' cast_expression
   35                          | . multiplicative_expression '/' cast_expression
   36                          | . multiplicative_expression '%' cast_expression
   37 additive_expression: . multiplicative_expression
   38                    | . additive_expression '+' multiplicative_expression
   39                    | . additive_expression '-' multiplicative_expression
   40 shift_expression: . additive_expression
   41                 | . shift_expression LEFT_OP additive_expression
   42                 | . shift_expression RIGHT_OP additive_expression
   43 relational_expression: . shift_expression
   44                      | . relational_expression '<' shift_expression
   45                      | . relational_expression '>' shift_expression
   46                      | . relational_expression LE_OP shift_expression
   47                      | . relational_expression GE_OP shift_expression
   48 equality_expression: . relational_expression
   49                    | . equality_expression EQ_OP relational_expression
   50                    | . equality_expression NE_OP relational_expression
   51 and_expression: . equality_expression
   52               | . and_expression '&' equality_expression
   53 exclusive_or_expression: . and_expression
   54                        | . exclusive_or_expression '^' and_expression
   55 inclusive_or_expression: . exclusive_or_expression
   56                        | . inclusive_or_expression '|' exclusive_or_expression
   57 logical_and_expression: . inclusive_or_expression
   58                       | . logical_and_expression AND_OP inclusive_or_expression
   59 logical_or_expression: . logical_and_expression
   60                      | . logical_or_expression OR_OP logical_and_expression
   61 conditional_expression: . logical_or_expression
   62 assignment_expression: . conditional_expression
   63                      | . unary_expression assignment_operator assignment_expression
  146 initializer: . assignment_expression
  147            | . '{' initializer_list '}'
  148            | . '{' initializer_list ',' '}'
  148            | '{' initializer_list ',' . '}'
  150 initializer_list: initializer_list ',' . initializer

    IDENTIFIER      shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    OCT_CONSTANT    shift, and go to state 64
    DEC_CONSTANT    shift, and go to state 65
    FLT_CONSTANT    shift, and go to state 66
    STRING_LITERAL  shift, and go to state 67
    INC_OP          shift, and go to state 68
    DEC_OP          shift, and go to state 69
    SIZEOF          shift, and go to state 70
    '('             shift, and go to state 81
    '-'             shift, and go to state 82
    '&'             shift, and go to state 83
    '*'             shift, and go to state 84
    '~'             shift, and go to state 85
    '!'             shift, and go to state 86
    '{'             shift, and go to state 134
    '}'             shift, and go to state 285

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    cast_expression            go to state 92
    multiplicative_expression  go to state 93
    additive_expression        go to state 94
    shift_expression           go to state 95
    relational_expression      go to state 96
    equality_expression        go to state 97
    and_expression             go to state 98
    exclusive_or_expression    go to state 99
    inclusive_or_expression    go to state 100
    logical_and_expression     go to state 101
    logical_or_expression      go to state 102
    conditional_expression     go to state 103
    assignment_expression      go to state 135
    initializer                go to state 286


state 269

  147 initializer: '{' initializer_list '}' .

    $default  reduce using rule 147 (initializer)


state 270

  110 struct_declaration: specifier_qualifier_list struct_declarator_list ';' .

    $default  reduce using rule 110 (struct_declaration)


state 271

   27 unary_expression: SIZEOF '(' CHAR ')' .

    $default  reduce using rule 27 (unary_expression)


state 272

   28 unary_expression: SIZEOF '(' SHORT ')' .

    $default  reduce using rule 28 (unary_expression)


state 273

   29 unary_expression: SIZEOF '(' INT ')' .

    $default  reduce using rule 29 (unary_expression)


state 274

   30 unary_expression: SIZEOF '(' LONG ')' .

    $default  reduce using rule 30 (unary_expression)


state 275

   31 unary_expression: SIZEOF '(' FLOAT ')' .

    $default  reduce using rule 31 (unary_expression)


state 276

  157 labeled_statement: CASE constant_expression ':' statement .

    $default  reduce using rule 157 (labeled_statement)


state 277

    1 primary_expression: . IDENTIFIER
    2                   | . HEX_CONSTANT
    3                   | . OCT_CONSTANT
    4                   | . DEC_CONSTANT
    5                   | . FLT_CONSTANT
    6                   | . STRING_LITERAL
    7                   | . '(' expression ')'
    8 postfix_expression: . primary_expression
    9                   | . postfix_expression '[' expression ']'
   10                   | . postfix_expression '(' ')'
   11                   | . postfix_expression '(' argument_expression_list ')'
   12                   | . postfix_expression '.' IDENTIFIER
   13                   | . postfix_expression PTR_OP IDENTIFIER
   14                   | . postfix_expression INC_OP
   15                   | . postfix_expression DEC_OP
   18 unary_expression: . postfix_expression
   19                 | . INC_OP unary_expression
   20                 | . DEC_OP unary_expression
   21                 | . '-' cast_expression
   22                 | . '&' cast_expression
   23                 | . '*' cast_expression
   24                 | . '~' cast_expression
   25                 | . '!' cast_expression
   26                 | . SIZEOF unary_expression
   27                 | . SIZEOF '(' CHAR ')'
   28                 | . SIZEOF '(' SHORT ')'
   29                 | . SIZEOF '(' INT ')'
   30                 | . SIZEOF '(' LONG ')'
   31                 | . SIZEOF '(' FLOAT ')'
   32 cast_expression: . unary_expression
   33 multiplicative_expression: . cast_expression
   34                          | . multiplicative_expression '*' cast_expression
   35                          | . multiplicative_expression '/' cast_expression
   36                          | . multiplicative_expression '%' cast_expression
   37 additive_expression: . multiplicative_expression
   38                    | . additive_expression '+' multiplicative_expression
   39                    | . additive_expression '-' multiplicative_expression
   40 shift_expression: . additive_expression
   41                 | . shift_expression LEFT_OP additive_expression
   42                 | . shift_expression RIGHT_OP additive_expression
   43 relational_expression: . shift_expression
   44                      | . relational_expression '<' shift_expression
   45                      | . relational_expression '>' shift_expression
   46                      | . relational_expression LE_OP shift_expression
   47                      | . relational_expression GE_OP shift_expression
   48 equality_expression: . relational_expression
   49                    | . equality_expression EQ_OP relational_expression
   50                    | . equality_expression NE_OP relational_expression
   51 and_expression: . equality_expression
   52               | . and_expression '&' equality_expression
   53 exclusive_or_expression: . and_expression
   54                        | . exclusive_or_expression '^' and_expression
   55 inclusive_or_expression: . exclusive_or_expression
   56                        | . inclusive_or_expression '|' exclusive_or_expression
   57 logical_and_expression: . inclusive_or_expression
   58                       | . logical_and_expression AND_OP inclusive_or_expression
   59 logical_or_expression: . logical_and_expression
   60                      | . logical_or_expression OR_OP logical_and_expression
   61 conditional_expression: . logical_or_expression
   62 assignment_expression: . conditional_expression
   63                      | . unary_expression assignment_operator assignment_expression
   75 expression: . assignment_expression
   76           | . expression ',' assignment_expression
  151 statement: . labeled_statement
  152          | . compound_statement
  153          | . expression_statement
  154          | . selection_statement
  155          | . iteration_statement
  156          | . jump_statement
  157 labeled_statement: . CASE constant_expression ':' statement
  158                  | . DEFAULT ':' statement
  159 compound_statement: . '{' '}'
  160                   | . '{' statement_list '}'
  161                   | . '{' declaration_list statement_list '}'
  166 expression_statement: . ';'
  167                     | . expression ';'
  168 selection_statement: . IF '(' expression ')' statement
  168                    | IF '(' expression ')' . statement
  169                    | . IF '(' expression ')' statement ELSE statement
  169                    | IF '(' expression ')' . statement ELSE statement
  170                    | . SWITCH '(' expression ')' statement
  171 iteration_statement: . WHILE '(' expression ')' statement
  172                    | . DO statement WHILE '(' expression ')' ';'
  173                    | . FOR '(' expression_statement expression_statement expression ')' statement
  174 jump_statement: . CONTINUE ';'
  175               | . BREAK ';'
  176               | . RETURN ';'
  177               | . RETURN expression ';'

    IDENTIFIER      shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    OCT_CONSTANT    shift, and go to state 64
    DEC_CONSTANT    shift, and go to state 65
    FLT_CONSTANT    shift, and go to state 66
    STRING_LITERAL  shift, and go to state 67
    INC_OP          shift, and go to state 68
    DEC_OP          shift, and go to state 69
    SIZEOF          shift, and go to state 70
    CASE            shift, and go to state 71
    DEFAULT         shift, and go to state 72
    IF              shift, and go to state 73
    SWITCH          shift, and go to state 74
    WHILE           shift, and go to state 75
    DO              shift, and go to state 76
    FOR             shift, and go to state 77
    CONTINUE        shift, and go to state 78
    BREAK           shift, and go to state 79
    RETURN          shift, and go to state 80
    '('             shift, and go to state 81
    '-'             shift, and go to state 82
    '&'             shift, and go to state 83
    '*'             shift, and go to state 84
    '~'             shift, and go to state 85
    '!'             shift, and go to state 86
    ';'             shift, and go to state 87
    '{'             shift, and go to state 46

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    cast_expression            go to state 92
    multiplicative_expression  go to state 93
    additive_expression        go to state 94
    shift_expression           go to state 95
    relational_expression      go to state 96
    equality_expression        go to state 97
    and_expression             go to state 98
    exclusive_or_expression    go to state 99
    inclusive_or_expression    go to state 100
    logical_and_expression     go to state 101
    logical_or_expression      go to state 102
    conditional_expression     go to state 103
    assignment_expression      go to state 104
    expression                 go to state 105
    statement                  go to state 287
    labeled_statement          go to state 109
    compound_statement         go to state 110
    expression_statement       go to state 113
    selection_statement        go to state 114
    iteration_statement        go to state 115
    jump_statement             go to state 116


state 278

    1 primary_expression: . IDENTIFIER
    2                   | . HEX_CONSTANT
    3                   | . OCT_CONSTANT
    4                   | . DEC_CONSTANT
    5                   | . FLT_CONSTANT
    6                   | . STRING_LITERAL
    7                   | . '(' expression ')'
    8 postfix_expression: . primary_expression
    9                   | . postfix_expression '[' expression ']'
   10                   | . postfix_expression '(' ')'
   11                   | . postfix_expression '(' argument_expression_list ')'
   12                   | . postfix_expression '.' IDENTIFIER
   13                   | . postfix_expression PTR_OP IDENTIFIER
   14                   | . postfix_expression INC_OP
   15                   | . postfix_expression DEC_OP
   18 unary_expression: . postfix_expression
   19                 | . INC_OP unary_expression
   20                 | . DEC_OP unary_expression
   21                 | . '-' cast_expression
   22                 | . '&' cast_expression
   23                 | . '*' cast_expression
   24                 | . '~' cast_expression
   25                 | . '!' cast_expression
   26                 | . SIZEOF unary_expression
   27                 | . SIZEOF '(' CHAR ')'
   28                 | . SIZEOF '(' SHORT ')'
   29                 | . SIZEOF '(' INT ')'
   30                 | . SIZEOF '(' LONG ')'
   31                 | . SIZEOF '(' FLOAT ')'
   32 cast_expression: . unary_expression
   33 multiplicative_expression: . cast_expression
   34                          | . multiplicative_expression '*' cast_expression
   35                          | . multiplicative_expression '/' cast_expression
   36                          | . multiplicative_expression '%' cast_expression
   37 additive_expression: . multiplicative_expression
   38                    | . additive_expression '+' multiplicative_expression
   39                    | . additive_expression '-' multiplicative_expression
   40 shift_expression: . additive_expression
   41                 | . shift_expression LEFT_OP additive_expression
   42                 | . shift_expression RIGHT_OP additive_expression
   43 relational_expression: . shift_expression
   44                      | . relational_expression '<' shift_expression
   45                      | . relational_expression '>' shift_expression
   46                      | . relational_expression LE_OP shift_expression
   47                      | . relational_expression GE_OP shift_expression
   48 equality_expression: . relational_expression
   49                    | . equality_expression EQ_OP relational_expression
   50                    | . equality_expression NE_OP relational_expression
   51 and_expression: . equality_expression
   52               | . and_expression '&' equality_expression
   53 exclusive_or_expression: . and_expression
   54                        | . exclusive_or_expression '^' and_expression
   55 inclusive_or_expression: . exclusive_or_expression
   56                        | . inclusive_or_expression '|' exclusive_or_expression
   57 logical_and_expression: . inclusive_or_expression
   58                       | . logical_and_expression AND_OP inclusive_or_expression
   59 logical_or_expression: . logical_and_expression
   60                      | . logical_or_expression OR_OP logical_and_expression
   61 conditional_expression: . logical_or_expression
   62 assignment_expression: . conditional_expression
   63                      | . unary_expression assignment_operator assignment_expression
   75 expression: . assignment_expression
   76           | . expression ',' assignment_expression
  151 statement: . labeled_statement
  152          | . compound_statement
  153          | . expression_statement
  154          | . selection_statement
  155          | . iteration_statement
  156          | . jump_statement
  157 labeled_statement: . CASE constant_expression ':' statement
  158                  | . DEFAULT ':' statement
  159 compound_statement: . '{' '}'
  160                   | . '{' statement_list '}'
  161                   | . '{' declaration_list statement_list '}'
  166 expression_statement: . ';'
  167                     | . expression ';'
  168 selection_statement: . IF '(' expression ')' statement
  169                    | . IF '(' expression ')' statement ELSE statement
  170                    | . SWITCH '(' expression ')' statement
  170                    | SWITCH '(' expression ')' . statement
  171 iteration_statement: . WHILE '(' expression ')' statement
  172                    | . DO statement WHILE '(' expression ')' ';'
  173                    | . FOR '(' expression_statement expression_statement expression ')' statement
  174 jump_statement: . CONTINUE ';'
  175               | . BREAK ';'
  176               | . RETURN ';'
  177               | . RETURN expression ';'

    IDENTIFIER      shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    OCT_CONSTANT    shift, and go to state 64
    DEC_CONSTANT    shift, and go to state 65
    FLT_CONSTANT    shift, and go to state 66
    STRING_LITERAL  shift, and go to state 67
    INC_OP          shift, and go to state 68
    DEC_OP          shift, and go to state 69
    SIZEOF          shift, and go to state 70
    CASE            shift, and go to state 71
    DEFAULT         shift, and go to state 72
    IF              shift, and go to state 73
    SWITCH          shift, and go to state 74
    WHILE           shift, and go to state 75
    DO              shift, and go to state 76
    FOR             shift, and go to state 77
    CONTINUE        shift, and go to state 78
    BREAK           shift, and go to state 79
    RETURN          shift, and go to state 80
    '('             shift, and go to state 81
    '-'             shift, and go to state 82
    '&'             shift, and go to state 83
    '*'             shift, and go to state 84
    '~'             shift, and go to state 85
    '!'             shift, and go to state 86
    ';'             shift, and go to state 87
    '{'             shift, and go to state 46

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    cast_expression            go to state 92
    multiplicative_expression  go to state 93
    additive_expression        go to state 94
    shift_expression           go to state 95
    relational_expression      go to state 96
    equality_expression        go to state 97
    and_expression             go to state 98
    exclusive_or_expression    go to state 99
    inclusive_or_expression    go to state 100
    logical_and_expression     go to state 101
    logical_or_expression      go to state 102
    conditional_expression     go to state 103
    assignment_expression      go to state 104
    expression                 go to state 105
    statement                  go to state 288
    labeled_statement          go to state 109
    compound_statement         go to state 110
    expression_statement       go to state 113
    selection_statement        go to state 114
    iteration_statement        go to state 115
    jump_statement             go to state 116


state 279

    1 primary_expression: . IDENTIFIER
    2                   | . HEX_CONSTANT
    3                   | . OCT_CONSTANT
    4                   | . DEC_CONSTANT
    5                   | . FLT_CONSTANT
    6                   | . STRING_LITERAL
    7                   | . '(' expression ')'
    8 postfix_expression: . primary_expression
    9                   | . postfix_expression '[' expression ']'
   10                   | . postfix_expression '(' ')'
   11                   | . postfix_expression '(' argument_expression_list ')'
   12                   | . postfix_expression '.' IDENTIFIER
   13                   | . postfix_expression PTR_OP IDENTIFIER
   14                   | . postfix_expression INC_OP
   15                   | . postfix_expression DEC_OP
   18 unary_expression: . postfix_expression
   19                 | . INC_OP unary_expression
   20                 | . DEC_OP unary_expression
   21                 | . '-' cast_expression
   22                 | . '&' cast_expression
   23                 | . '*' cast_expression
   24                 | . '~' cast_expression
   25                 | . '!' cast_expression
   26                 | . SIZEOF unary_expression
   27                 | . SIZEOF '(' CHAR ')'
   28                 | . SIZEOF '(' SHORT ')'
   29                 | . SIZEOF '(' INT ')'
   30                 | . SIZEOF '(' LONG ')'
   31                 | . SIZEOF '(' FLOAT ')'
   32 cast_expression: . unary_expression
   33 multiplicative_expression: . cast_expression
   34                          | . multiplicative_expression '*' cast_expression
   35                          | . multiplicative_expression '/' cast_expression
   36                          | . multiplicative_expression '%' cast_expression
   37 additive_expression: . multiplicative_expression
   38                    | . additive_expression '+' multiplicative_expression
   39                    | . additive_expression '-' multiplicative_expression
   40 shift_expression: . additive_expression
   41                 | . shift_expression LEFT_OP additive_expression
   42                 | . shift_expression RIGHT_OP additive_expression
   43 relational_expression: . shift_expression
   44                      | . relational_expression '<' shift_expression
   45                      | . relational_expression '>' shift_expression
   46                      | . relational_expression LE_OP shift_expression
   47                      | . relational_expression GE_OP shift_expression
   48 equality_expression: . relational_expression
   49                    | . equality_expression EQ_OP relational_expression
   50                    | . equality_expression NE_OP relational_expression
   51 and_expression: . equality_expression
   52               | . and_expression '&' equality_expression
   53 exclusive_or_expression: . and_expression
   54                        | . exclusive_or_expression '^' and_expression
   55 inclusive_or_expression: . exclusive_or_expression
   56                        | . inclusive_or_expression '|' exclusive_or_expression
   57 logical_and_expression: . inclusive_or_expression
   58                       | . logical_and_expression AND_OP inclusive_or_expression
   59 logical_or_expression: . logical_and_expression
   60                      | . logical_or_expression OR_OP logical_and_expression
   61 conditional_expression: . logical_or_expression
   62 assignment_expression: . conditional_expression
   63                      | . unary_expression assignment_operator assignment_expression
   75 expression: . assignment_expression
   76           | . expression ',' assignment_expression
  151 statement: . labeled_statement
  152          | . compound_statement
  153          | . expression_statement
  154          | . selection_statement
  155          | . iteration_statement
  156          | . jump_statement
  157 labeled_statement: . CASE constant_expression ':' statement
  158                  | . DEFAULT ':' statement
  159 compound_statement: . '{' '}'
  160                   | . '{' statement_list '}'
  161                   | . '{' declaration_list statement_list '}'
  166 expression_statement: . ';'
  167                     | . expression ';'
  168 selection_statement: . IF '(' expression ')' statement
  169                    | . IF '(' expression ')' statement ELSE statement
  170                    | . SWITCH '(' expression ')' statement
  171 iteration_statement: . WHILE '(' expression ')' statement
  171                    | WHILE '(' expression ')' . statement
  172                    | . DO statement WHILE '(' expression ')' ';'
  173                    | . FOR '(' expression_statement expression_statement expression ')' statement
  174 jump_statement: . CONTINUE ';'
  175               | . BREAK ';'
  176               | . RETURN ';'
  177               | . RETURN expression ';'

    IDENTIFIER      shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    OCT_CONSTANT    shift, and go to state 64
    DEC_CONSTANT    shift, and go to state 65
    FLT_CONSTANT    shift, and go to state 66
    STRING_LITERAL  shift, and go to state 67
    INC_OP          shift, and go to state 68
    DEC_OP          shift, and go to state 69
    SIZEOF          shift, and go to state 70
    CASE            shift, and go to state 71
    DEFAULT         shift, and go to state 72
    IF              shift, and go to state 73
    SWITCH          shift, and go to state 74
    WHILE           shift, and go to state 75
    DO              shift, and go to state 76
    FOR             shift, and go to state 77
    CONTINUE        shift, and go to state 78
    BREAK           shift, and go to state 79
    RETURN          shift, and go to state 80
    '('             shift, and go to state 81
    '-'             shift, and go to state 82
    '&'             shift, and go to state 83
    '*'             shift, and go to state 84
    '~'             shift, and go to state 85
    '!'             shift, and go to state 86
    ';'             shift, and go to state 87
    '{'             shift, and go to state 46

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    cast_expression            go to state 92
    multiplicative_expression  go to state 93
    additive_expression        go to state 94
    shift_expression           go to state 95
    relational_expression      go to state 96
    equality_expression        go to state 97
    and_expression             go to state 98
    exclusive_or_expression    go to state 99
    inclusive_or_expression    go to state 100
    logical_and_expression     go to state 101
    logical_or_expression      go to state 102
    conditional_expression     go to state 103
    assignment_expression      go to state 104
    expression                 go to state 105
    statement                  go to state 289
    labeled_statement          go to state 109
    compound_statement         go to state 110
    expression_statement       go to state 113
    selection_statement        go to state 114
    iteration_statement        go to state 115
    jump_statement             go to state 116


state 280

    1 primary_expression: . IDENTIFIER
    2                   | . HEX_CONSTANT
    3                   | . OCT_CONSTANT
    4                   | . DEC_CONSTANT
    5                   | . FLT_CONSTANT
    6                   | . STRING_LITERAL
    7                   | . '(' expression ')'
    8 postfix_expression: . primary_expression
    9                   | . postfix_expression '[' expression ']'
   10                   | . postfix_expression '(' ')'
   11                   | . postfix_expression '(' argument_expression_list ')'
   12                   | . postfix_expression '.' IDENTIFIER
   13                   | . postfix_expression PTR_OP IDENTIFIER
   14                   | . postfix_expression INC_OP
   15                   | . postfix_expression DEC_OP
   18 unary_expression: . postfix_expression
   19                 | . INC_OP unary_expression
   20                 | . DEC_OP unary_expression
   21                 | . '-' cast_expression
   22                 | . '&' cast_expression
   23                 | . '*' cast_expression
   24                 | . '~' cast_expression
   25                 | . '!' cast_expression
   26                 | . SIZEOF unary_expression
   27                 | . SIZEOF '(' CHAR ')'
   28                 | . SIZEOF '(' SHORT ')'
   29                 | . SIZEOF '(' INT ')'
   30                 | . SIZEOF '(' LONG ')'
   31                 | . SIZEOF '(' FLOAT ')'
   32 cast_expression: . unary_expression
   33 multiplicative_expression: . cast_expression
   34                          | . multiplicative_expression '*' cast_expression
   35                          | . multiplicative_expression '/' cast_expression
   36                          | . multiplicative_expression '%' cast_expression
   37 additive_expression: . multiplicative_expression
   38                    | . additive_expression '+' multiplicative_expression
   39                    | . additive_expression '-' multiplicative_expression
   40 shift_expression: . additive_expression
   41                 | . shift_expression LEFT_OP additive_expression
   42                 | . shift_expression RIGHT_OP additive_expression
   43 relational_expression: . shift_expression
   44                      | . relational_expression '<' shift_expression
   45                      | . relational_expression '>' shift_expression
   46                      | . relational_expression LE_OP shift_expression
   47                      | . relational_expression GE_OP shift_expression
   48 equality_expression: . relational_expression
   49                    | . equality_expression EQ_OP relational_expression
   50                    | . equality_expression NE_OP relational_expression
   51 and_expression: . equality_expression
   52               | . and_expression '&' equality_expression
   53 exclusive_or_expression: . and_expression
   54                        | . exclusive_or_expression '^' and_expression
   55 inclusive_or_expression: . exclusive_or_expression
   56                        | . inclusive_or_expression '|' exclusive_or_expression
   57 logical_and_expression: . inclusive_or_expression
   58                       | . logical_and_expression AND_OP inclusive_or_expression
   59 logical_or_expression: . logical_and_expression
   60                      | . logical_or_expression OR_OP logical_and_expression
   61 conditional_expression: . logical_or_expression
   62 assignment_expression: . conditional_expression
   63                      | . unary_expression assignment_operator assignment_expression
   75 expression: . assignment_expression
   76           | . expression ',' assignment_expression
  172 iteration_statement: DO statement WHILE '(' . expression ')' ';'

    IDENTIFIER      shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    OCT_CONSTANT    shift, and go to state 64
    DEC_CONSTANT    shift, and go to state 65
    FLT_CONSTANT    shift, and go to state 66
    STRING_LITERAL  shift, and go to state 67
    INC_OP          shift, and go to state 68
    DEC_OP          shift, and go to state 69
    SIZEOF          shift, and go to state 70
    '('             shift, and go to state 81
    '-'             shift, and go to state 82
    '&'             shift, and go to state 83
    '*'             shift, and go to state 84
    '~'             shift, and go to state 85
    '!'             shift, and go to state 86

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    cast_expression            go to state 92
    multiplicative_expression  go to state 93
    additive_expression        go to state 94
    shift_expression           go to state 95
    relational_expression      go to state 96
    equality_expression        go to state 97
    and_expression             go to state 98
    exclusive_or_expression    go to state 99
    inclusive_or_expression    go to state 100
    logical_and_expression     go to state 101
    logical_or_expression      go to state 102
    conditional_expression     go to state 103
    assignment_expression      go to state 104
    expression                 go to state 290


state 281

    1 primary_expression: . IDENTIFIER
    2                   | . HEX_CONSTANT
    3                   | . OCT_CONSTANT
    4                   | . DEC_CONSTANT
    5                   | . FLT_CONSTANT
    6                   | . STRING_LITERAL
    7                   | . '(' expression ')'
    8 postfix_expression: . primary_expression
    9                   | . postfix_expression '[' expression ']'
   10                   | . postfix_expression '(' ')'
   11                   | . postfix_expression '(' argument_expression_list ')'
   12                   | . postfix_expression '.' IDENTIFIER
   13                   | . postfix_expression PTR_OP IDENTIFIER
   14                   | . postfix_expression INC_OP
   15                   | . postfix_expression DEC_OP
   18 unary_expression: . postfix_expression
   19                 | . INC_OP unary_expression
   20                 | . DEC_OP unary_expression
   21                 | . '-' cast_expression
   22                 | . '&' cast_expression
   23                 | . '*' cast_expression
   24                 | . '~' cast_expression
   25                 | . '!' cast_expression
   26                 | . SIZEOF unary_expression
   27                 | . SIZEOF '(' CHAR ')'
   28                 | . SIZEOF '(' SHORT ')'
   29                 | . SIZEOF '(' INT ')'
   30                 | . SIZEOF '(' LONG ')'
   31                 | . SIZEOF '(' FLOAT ')'
   32 cast_expression: . unary_expression
   33 multiplicative_expression: . cast_expression
   34                          | . multiplicative_expression '*' cast_expression
   35                          | . multiplicative_expression '/' cast_expression
   36                          | . multiplicative_expression '%' cast_expression
   37 additive_expression: . multiplicative_expression
   38                    | . additive_expression '+' multiplicative_expression
   39                    | . additive_expression '-' multiplicative_expression
   40 shift_expression: . additive_expression
   41                 | . shift_expression LEFT_OP additive_expression
   42                 | . shift_expression RIGHT_OP additive_expression
   43 relational_expression: . shift_expression
   44                      | . relational_expression '<' shift_expression
   45                      | . relational_expression '>' shift_expression
   46                      | . relational_expression LE_OP shift_expression
   47                      | . relational_expression GE_OP shift_expression
   48 equality_expression: . relational_expression
   49                    | . equality_expression EQ_OP relational_expression
   50                    | . equality_expression NE_OP relational_expression
   51 and_expression: . equality_expression
   52               | . and_expression '&' equality_expression
   53 exclusive_or_expression: . and_expression
   54                        | . exclusive_or_expression '^' and_expression
   55 inclusive_or_expression: . exclusive_or_expression
   56                        | . inclusive_or_expression '|' exclusive_or_expression
   57 logical_and_expression: . inclusive_or_expression
   58                       | . logical_and_expression AND_OP inclusive_or_expression
   59 logical_or_expression: . logical_and_expression
   60                      | . logical_or_expression OR_OP logical_and_expression
   61 conditional_expression: . logical_or_expression
   62 assignment_expression: . conditional_expression
   63                      | . unary_expression assignment_operator assignment_expression
   75 expression: . assignment_expression
   76           | . expression ',' assignment_expression
  173 iteration_statement: FOR '(' expression_statement expression_statement . expression ')' statement

    IDENTIFIER      shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    OCT_CONSTANT    shift, and go to state 64
    DEC_CONSTANT    shift, and go to state 65
    FLT_CONSTANT    shift, and go to state 66
    STRING_LITERAL  shift, and go to state 67
    INC_OP          shift, and go to state 68
    DEC_OP          shift, and go to state 69
    SIZEOF          shift, and go to state 70
    '('             shift, and go to state 81
    '-'             shift, and go to state 82
    '&'             shift, and go to state 83
    '*'             shift, and go to state 84
    '~'             shift, and go to state 85
    '!'             shift, and go to state 86

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    cast_expression            go to state 92
    multiplicative_expression  go to state 93
    additive_expression        go to state 94
    shift_expression           go to state 95
    relational_expression      go to state 96
    equality_expression        go to state 97
    and_expression             go to state 98
    exclusive_or_expression    go to state 99
    inclusive_or_expression    go to state 100
    logical_and_expression     go to state 101
    logical_or_expression      go to state 102
    conditional_expression     go to state 103
    assignment_expression      go to state 104
    expression                 go to state 291


state 282

   11 postfix_expression: postfix_expression '(' argument_expression_list ')' .

    $default  reduce using rule 11 (postfix_expression)


state 283

    1 primary_expression: . IDENTIFIER
    2                   | . HEX_CONSTANT
    3                   | . OCT_CONSTANT
    4                   | . DEC_CONSTANT
    5                   | . FLT_CONSTANT
    6                   | . STRING_LITERAL
    7                   | . '(' expression ')'
    8 postfix_expression: . primary_expression
    9                   | . postfix_expression '[' expression ']'
   10                   | . postfix_expression '(' ')'
   11                   | . postfix_expression '(' argument_expression_list ')'
   12                   | . postfix_expression '.' IDENTIFIER
   13                   | . postfix_expression PTR_OP IDENTIFIER
   14                   | . postfix_expression INC_OP
   15                   | . postfix_expression DEC_OP
   17 argument_expression_list: argument_expression_list ',' . assignment_expression
   18 unary_expression: . postfix_expression
   19                 | . INC_OP unary_expression
   20                 | . DEC_OP unary_expression
   21                 | . '-' cast_expression
   22                 | . '&' cast_expression
   23                 | . '*' cast_expression
   24                 | . '~' cast_expression
   25                 | . '!' cast_expression
   26                 | . SIZEOF unary_expression
   27                 | . SIZEOF '(' CHAR ')'
   28                 | . SIZEOF '(' SHORT ')'
   29                 | . SIZEOF '(' INT ')'
   30                 | . SIZEOF '(' LONG ')'
   31                 | . SIZEOF '(' FLOAT ')'
   32 cast_expression: . unary_expression
   33 multiplicative_expression: . cast_expression
   34                          | . multiplicative_expression '*' cast_expression
   35                          | . multiplicative_expression '/' cast_expression
   36                          | . multiplicative_expression '%' cast_expression
   37 additive_expression: . multiplicative_expression
   38                    | . additive_expression '+' multiplicative_expression
   39                    | . additive_expression '-' multiplicative_expression
   40 shift_expression: . additive_expression
   41                 | . shift_expression LEFT_OP additive_expression
   42                 | . shift_expression RIGHT_OP additive_expression
   43 relational_expression: . shift_expression
   44                      | . relational_expression '<' shift_expression
   45                      | . relational_expression '>' shift_expression
   46                      | . relational_expression LE_OP shift_expression
   47                      | . relational_expression GE_OP shift_expression
   48 equality_expression: . relational_expression
   49                    | . equality_expression EQ_OP relational_expression
   50                    | . equality_expression NE_OP relational_expression
   51 and_expression: . equality_expression
   52               | . and_expression '&' equality_expression
   53 exclusive_or_expression: . and_expression
   54                        | . exclusive_or_expression '^' and_expression
   55 inclusive_or_expression: . exclusive_or_expression
   56                        | . inclusive_or_expression '|' exclusive_or_expression
   57 logical_and_expression: . inclusive_or_expression
   58                       | . logical_and_expression AND_OP inclusive_or_expression
   59 logical_or_expression: . logical_and_expression
   60                      | . logical_or_expression OR_OP logical_and_expression
   61 conditional_expression: . logical_or_expression
   62 assignment_expression: . conditional_expression
   63                      | . unary_expression assignment_operator assignment_expression

    IDENTIFIER      shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    OCT_CONSTANT    shift, and go to state 64
    DEC_CONSTANT    shift, and go to state 65
    FLT_CONSTANT    shift, and go to state 66
    STRING_LITERAL  shift, and go to state 67
    INC_OP          shift, and go to state 68
    DEC_OP          shift, and go to state 69
    SIZEOF          shift, and go to state 70
    '('             shift, and go to state 81
    '-'             shift, and go to state 82
    '&'             shift, and go to state 83
    '*'             shift, and go to state 84
    '~'             shift, and go to state 85
    '!'             shift, and go to state 86

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    cast_expression            go to state 92
    multiplicative_expression  go to state 93
    additive_expression        go to state 94
    shift_expression           go to state 95
    relational_expression      go to state 96
    equality_expression        go to state 97
    and_expression             go to state 98
    exclusive_or_expression    go to state 99
    inclusive_or_expression    go to state 100
    logical_and_expression     go to state 101
    logical_or_expression      go to state 102
    conditional_expression     go to state 103
    assignment_expression      go to state 292


state 284

    9 postfix_expression: postfix_expression '[' expression ']' .

    $default  reduce using rule 9 (postfix_expression)


state 285

  148 initializer: '{' initializer_list ',' '}' .

    $default  reduce using rule 148 (initializer)


state 286

  150 initializer_list: initializer_list ',' initializer .

    $default  reduce using rule 150 (initializer_list)


state 287

  168 selection_statement: IF '(' expression ')' statement .  [IDENTIFIER, HEX_CONSTANT, OCT_CONSTANT, DEC_CONSTANT, FLT_CONSTANT, STRING_LITERAL, INC_OP, DEC_OP, SIZEOF, CASE, DEFAULT, IF, ELSE, SWITCH, WHILE, DO, FOR, CONTINUE, BREAK, RETURN, '(', '-', '&', '*', '~', '!', ';', '{', '}']
  169                    | IF '(' expression ')' statement . ELSE statement

    ELSE  shift, and go to state 293

    ELSE      [reduce using rule 168 (selection_statement)]
    $default  reduce using rule 168 (selection_statement)


state 288

  170 selection_statement: SWITCH '(' expression ')' statement .

    $default  reduce using rule 170 (selection_statement)


state 289

  171 iteration_statement: WHILE '(' expression ')' statement .

    $default  reduce using rule 171 (iteration_statement)


state 290

   76 expression: expression . ',' assignment_expression
  172 iteration_statement: DO statement WHILE '(' expression . ')' ';'

    ')'  shift, and go to state 294
    ','  shift, and go to state 199


state 291

   76 expression: expression . ',' assignment_expression
  173 iteration_statement: FOR '(' expression_statement expression_statement expression . ')' statement

    ')'  shift, and go to state 295
    ','  shift, and go to state 199


state 292

   17 argument_expression_list: argument_expression_list ',' assignment_expression .

    $default  reduce using rule 17 (argument_expression_list)


state 293

    1 primary_expression: . IDENTIFIER
    2                   | . HEX_CONSTANT
    3                   | . OCT_CONSTANT
    4                   | . DEC_CONSTANT
    5                   | . FLT_CONSTANT
    6                   | . STRING_LITERAL
    7                   | . '(' expression ')'
    8 postfix_expression: . primary_expression
    9                   | . postfix_expression '[' expression ']'
   10                   | . postfix_expression '(' ')'
   11                   | . postfix_expression '(' argument_expression_list ')'
   12                   | . postfix_expression '.' IDENTIFIER
   13                   | . postfix_expression PTR_OP IDENTIFIER
   14                   | . postfix_expression INC_OP
   15                   | . postfix_expression DEC_OP
   18 unary_expression: . postfix_expression
   19                 | . INC_OP unary_expression
   20                 | . DEC_OP unary_expression
   21                 | . '-' cast_expression
   22                 | . '&' cast_expression
   23                 | . '*' cast_expression
   24                 | . '~' cast_expression
   25                 | . '!' cast_expression
   26                 | . SIZEOF unary_expression
   27                 | . SIZEOF '(' CHAR ')'
   28                 | . SIZEOF '(' SHORT ')'
   29                 | . SIZEOF '(' INT ')'
   30                 | . SIZEOF '(' LONG ')'
   31                 | . SIZEOF '(' FLOAT ')'
   32 cast_expression: . unary_expression
   33 multiplicative_expression: . cast_expression
   34                          | . multiplicative_expression '*' cast_expression
   35                          | . multiplicative_expression '/' cast_expression
   36                          | . multiplicative_expression '%' cast_expression
   37 additive_expression: . multiplicative_expression
   38                    | . additive_expression '+' multiplicative_expression
   39                    | . additive_expression '-' multiplicative_expression
   40 shift_expression: . additive_expression
   41                 | . shift_expression LEFT_OP additive_expression
   42                 | . shift_expression RIGHT_OP additive_expression
   43 relational_expression: . shift_expression
   44                      | . relational_expression '<' shift_expression
   45                      | . relational_expression '>' shift_expression
   46                      | . relational_expression LE_OP shift_expression
   47                      | . relational_expression GE_OP shift_expression
   48 equality_expression: . relational_expression
   49                    | . equality_expression EQ_OP relational_expression
   50                    | . equality_expression NE_OP relational_expression
   51 and_expression: . equality_expression
   52               | . and_expression '&' equality_expression
   53 exclusive_or_expression: . and_expression
   54                        | . exclusive_or_expression '^' and_expression
   55 inclusive_or_expression: . exclusive_or_expression
   56                        | . inclusive_or_expression '|' exclusive_or_expression
   57 logical_and_expression: . inclusive_or_expression
   58                       | . logical_and_expression AND_OP inclusive_or_expression
   59 logical_or_expression: . logical_and_expression
   60                      | . logical_or_expression OR_OP logical_and_expression
   61 conditional_expression: . logical_or_expression
   62 assignment_expression: . conditional_expression
   63                      | . unary_expression assignment_operator assignment_expression
   75 expression: . assignment_expression
   76           | . expression ',' assignment_expression
  151 statement: . labeled_statement
  152          | . compound_statement
  153          | . expression_statement
  154          | . selection_statement
  155          | . iteration_statement
  156          | . jump_statement
  157 labeled_statement: . CASE constant_expression ':' statement
  158                  | . DEFAULT ':' statement
  159 compound_statement: . '{' '}'
  160                   | . '{' statement_list '}'
  161                   | . '{' declaration_list statement_list '}'
  166 expression_statement: . ';'
  167                     | . expression ';'
  168 selection_statement: . IF '(' expression ')' statement
  169                    | . IF '(' expression ')' statement ELSE statement
  169                    | IF '(' expression ')' statement ELSE . statement
  170                    | . SWITCH '(' expression ')' statement
  171 iteration_statement: . WHILE '(' expression ')' statement
  172                    | . DO statement WHILE '(' expression ')' ';'
  173                    | . FOR '(' expression_statement expression_statement expression ')' statement
  174 jump_statement: . CONTINUE ';'
  175               | . BREAK ';'
  176               | . RETURN ';'
  177               | . RETURN expression ';'

    IDENTIFIER      shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    OCT_CONSTANT    shift, and go to state 64
    DEC_CONSTANT    shift, and go to state 65
    FLT_CONSTANT    shift, and go to state 66
    STRING_LITERAL  shift, and go to state 67
    INC_OP          shift, and go to state 68
    DEC_OP          shift, and go to state 69
    SIZEOF          shift, and go to state 70
    CASE            shift, and go to state 71
    DEFAULT         shift, and go to state 72
    IF              shift, and go to state 73
    SWITCH          shift, and go to state 74
    WHILE           shift, and go to state 75
    DO              shift, and go to state 76
    FOR             shift, and go to state 77
    CONTINUE        shift, and go to state 78
    BREAK           shift, and go to state 79
    RETURN          shift, and go to state 80
    '('             shift, and go to state 81
    '-'             shift, and go to state 82
    '&'             shift, and go to state 83
    '*'             shift, and go to state 84
    '~'             shift, and go to state 85
    '!'             shift, and go to state 86
    ';'             shift, and go to state 87
    '{'             shift, and go to state 46

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    cast_expression            go to state 92
    multiplicative_expression  go to state 93
    additive_expression        go to state 94
    shift_expression           go to state 95
    relational_expression      go to state 96
    equality_expression        go to state 97
    and_expression             go to state 98
    exclusive_or_expression    go to state 99
    inclusive_or_expression    go to state 100
    logical_and_expression     go to state 101
    logical_or_expression      go to state 102
    conditional_expression     go to state 103
    assignment_expression      go to state 104
    expression                 go to state 105
    statement                  go to state 296
    labeled_statement          go to state 109
    compound_statement         go to state 110
    expression_statement       go to state 113
    selection_statement        go to state 114
    iteration_statement        go to state 115
    jump_statement             go to state 116


state 294

  172 iteration_statement: DO statement WHILE '(' expression ')' . ';'

    ';'  shift, and go to state 297


state 295

    1 primary_expression: . IDENTIFIER
    2                   | . HEX_CONSTANT
    3                   | . OCT_CONSTANT
    4                   | . DEC_CONSTANT
    5                   | . FLT_CONSTANT
    6                   | . STRING_LITERAL
    7                   | . '(' expression ')'
    8 postfix_expression: . primary_expression
    9                   | . postfix_expression '[' expression ']'
   10                   | . postfix_expression '(' ')'
   11                   | . postfix_expression '(' argument_expression_list ')'
   12                   | . postfix_expression '.' IDENTIFIER
   13                   | . postfix_expression PTR_OP IDENTIFIER
   14                   | . postfix_expression INC_OP
   15                   | . postfix_expression DEC_OP
   18 unary_expression: . postfix_expression
   19                 | . INC_OP unary_expression
   20                 | . DEC_OP unary_expression
   21                 | . '-' cast_expression
   22                 | . '&' cast_expression
   23                 | . '*' cast_expression
   24                 | . '~' cast_expression
   25                 | . '!' cast_expression
   26                 | . SIZEOF unary_expression
   27                 | . SIZEOF '(' CHAR ')'
   28                 | . SIZEOF '(' SHORT ')'
   29                 | . SIZEOF '(' INT ')'
   30                 | . SIZEOF '(' LONG ')'
   31                 | . SIZEOF '(' FLOAT ')'
   32 cast_expression: . unary_expression
   33 multiplicative_expression: . cast_expression
   34                          | . multiplicative_expression '*' cast_expression
   35                          | . multiplicative_expression '/' cast_expression
   36                          | . multiplicative_expression '%' cast_expression
   37 additive_expression: . multiplicative_expression
   38                    | . additive_expression '+' multiplicative_expression
   39                    | . additive_expression '-' multiplicative_expression
   40 shift_expression: . additive_expression
   41                 | . shift_expression LEFT_OP additive_expression
   42                 | . shift_expression RIGHT_OP additive_expression
   43 relational_expression: . shift_expression
   44                      | . relational_expression '<' shift_expression
   45                      | . relational_expression '>' shift_expression
   46                      | . relational_expression LE_OP shift_expression
   47                      | . relational_expression GE_OP shift_expression
   48 equality_expression: . relational_expression
   49                    | . equality_expression EQ_OP relational_expression
   50                    | . equality_expression NE_OP relational_expression
   51 and_expression: . equality_expression
   52               | . and_expression '&' equality_expression
   53 exclusive_or_expression: . and_expression
   54                        | . exclusive_or_expression '^' and_expression
   55 inclusive_or_expression: . exclusive_or_expression
   56                        | . inclusive_or_expression '|' exclusive_or_expression
   57 logical_and_expression: . inclusive_or_expression
   58                       | . logical_and_expression AND_OP inclusive_or_expression
   59 logical_or_expression: . logical_and_expression
   60                      | . logical_or_expression OR_OP logical_and_expression
   61 conditional_expression: . logical_or_expression
   62 assignment_expression: . conditional_expression
   63                      | . unary_expression assignment_operator assignment_expression
   75 expression: . assignment_expression
   76           | . expression ',' assignment_expression
  151 statement: . labeled_statement
  152          | . compound_statement
  153          | . expression_statement
  154          | . selection_statement
  155          | . iteration_statement
  156          | . jump_statement
  157 labeled_statement: . CASE constant_expression ':' statement
  158                  | . DEFAULT ':' statement
  159 compound_statement: . '{' '}'
  160                   | . '{' statement_list '}'
  161                   | . '{' declaration_list statement_list '}'
  166 expression_statement: . ';'
  167                     | . expression ';'
  168 selection_statement: . IF '(' expression ')' statement
  169                    | . IF '(' expression ')' statement ELSE statement
  170                    | . SWITCH '(' expression ')' statement
  171 iteration_statement: . WHILE '(' expression ')' statement
  172                    | . DO statement WHILE '(' expression ')' ';'
  173                    | . FOR '(' expression_statement expression_statement expression ')' statement
  173                    | FOR '(' expression_statement expression_statement expression ')' . statement
  174 jump_statement: . CONTINUE ';'
  175               | . BREAK ';'
  176               | . RETURN ';'
  177               | . RETURN expression ';'

    IDENTIFIER      shift, and go to state 62
    HEX_CONSTANT    shift, and go to state 63
    OCT_CONSTANT    shift, and go to state 64
    DEC_CONSTANT    shift, and go to state 65
    FLT_CONSTANT    shift, and go to state 66
    STRING_LITERAL  shift, and go to state 67
    INC_OP          shift, and go to state 68
    DEC_OP          shift, and go to state 69
    SIZEOF          shift, and go to state 70
    CASE            shift, and go to state 71
    DEFAULT         shift, and go to state 72
    IF              shift, and go to state 73
    SWITCH          shift, and go to state 74
    WHILE           shift, and go to state 75
    DO              shift, and go to state 76
    FOR             shift, and go to state 77
    CONTINUE        shift, and go to state 78
    BREAK           shift, and go to state 79
    RETURN          shift, and go to state 80
    '('             shift, and go to state 81
    '-'             shift, and go to state 82
    '&'             shift, and go to state 83
    '*'             shift, and go to state 84
    '~'             shift, and go to state 85
    '!'             shift, and go to state 86
    ';'             shift, and go to state 87
    '{'             shift, and go to state 46

    primary_expression         go to state 89
    postfix_expression         go to state 90
    unary_expression           go to state 91
    cast_expression            go to state 92
    multiplicative_expression  go to state 93
    additive_expression        go to state 94
    shift_expression           go to state 95
    relational_expression      go to state 96
    equality_expression        go to state 97
    and_expression             go to state 98
    exclusive_or_expression    go to state 99
    inclusive_or_expression    go to state 100
    logical_and_expression     go to state 101
    logical_or_expression      go to state 102
    conditional_expression     go to state 103
    assignment_expression      go to state 104
    expression                 go to state 105
    statement                  go to state 298
    labeled_statement          go to state 109
    compound_statement         go to state 110
    expression_statement       go to state 113
    selection_statement        go to state 114
    iteration_statement        go to state 115
    jump_statement             go to state 116


state 296

  169 selection_statement: IF '(' expression ')' statement ELSE statement .

    $default  reduce using rule 169 (selection_statement)


state 297

  172 iteration_statement: DO statement WHILE '(' expression ')' ';' .

    $default  reduce using rule 172 (iteration_statement)


state 298

  173 iteration_statement: FOR '(' expression_statement expression_statement expression ')' statement .

    $default  reduce using rule 173 (iteration_statement)
